Message-ID: <578301799.15.1750505967557@ff8cd9e862ce>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_14_1195019268.1750505967557"

------=_Part_14_1195019268.1750505967557
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Cheat Sheet Java</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font: var(--ds-font-body-small, Arial, Helvetica, FreeSans, sans-se=
rif);
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: var(--ds-surface, #fff) !important;
        color: var(--ds-text, #000) !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: var(--ds-text, #000);
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        page-break-after: avoid;
    }

    pre {
        font: var(--ds-font-code, Monaco, "Courier New", monospace);
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Cheat Sheet Java</h1>
    <div class=3D"Section1">
        <h2 id=3D"CheatSheetJava-LanguageFundamentals">Language Fundamental=
s</h2>
<p>Identifiers</p>
<p>Reserved Words</p>
<p>Data Types</p>
<p>Literals</p>
<p>Arrays</p>
<p>Types of variables</p>
<p>var-arg methods</p>
<p>main method</p>
<p>command line arguments</p>
<p>java coding standards</p>
<h2 id=3D"CheatSheetJava-OperatorsAndAssignments">Operators And Assignments=
</h2>
<p>Increment and Decrement Operator</p>
<p>Arithmetic Operator</p>
<p>Concatenation</p>
<p>Relational Operator</p>
<p>Equality Operator</p>
<p>Bitwise Operator</p>
<p>Short-circuit</p>
<p>instanceOf</p>
<p>typeCast Operator</p>
<p>Assignment Operator</p>
<p>Conditional Operator</p>
<p>new Operator</p>
<p>=E2=80=9C[]=E2=80=9C Operator</p>
<p>Operator precedence</p>
<p>Evaluation Order of java Operands</p>
<p></p>
<h2 id=3D"CheatSheetJava-flowcontrol">flow control</h2>
<p>Selection statements &gt; if-else, switch</p>
<p>Iterative statements &gt; while loop, do while, for, for-each</p>
<p>transfer statements &gt; break, continue, return, try, catch, final</p>
<p></p>
<h2 id=3D"CheatSheetJava-DeclarationsandAccessModifiers">Declarations and A=
ccess Modifiers</h2>
<p>java source file structure</p>
<p>class modifiers</p>
<p>member modifiers</p>
<p>Interfaces</p>
<p>public &lt;default&gt; private protected final abstract static synchroni=
zed native strictfp transient volatile</p>
<p></p>
<h2 id=3D"CheatSheetJava-Interfaces">Interfaces</h2>
<p>Introduction</p>
<p>Interface declaration and implementation</p>
<p>extends Vs implements</p>
<p>Interface methods</p>
<p>Interface Variables</p>
<p>Interface naming conflicts</p>
<blockquote>
<p>method naming conflicts</p>
<p>variable naming conflicts</p>
</blockquote>
<p>marker Interface</p>
<p>Adapter class</p>
<p>Abstract class Vs Concrete class Vs Interface</p>
<p>difference between Abstract class and Interface</p>
<p></p>
<h2 id=3D"CheatSheetJava-OOPSConcepts">OOPS Concepts</h2>
<p>Data Hiding</p>
<p>Abstraction</p>
<p>Encapsulation</p>
<p>Tightly Encapsulated class</p>
<p>Is-A Relationship - Inheritance</p>
<p>Has-A Relationship</p>
<p>method signature</p>
<p>method overloading</p>
<p>method overriding</p>
<p>method hiding</p>
<p>Polymorphism</p>
<p>static control flow</p>
<p>instance control flow</p>
<p>Constructors</p>
<p>super And this keyword</p>
<p>Coupling</p>
<p>Cohesion</p>
<p>Type-Casting</p>
<p></p>
<p></p>
<p></p>
<h2 id=3D"CheatSheetJava-LanguageFundamentals.1">Language Fundamentals</h2>
<p></p>
<h2 id=3D"CheatSheetJava-Identifiers">Identifiers</h2>
<p>an <strong>identifier</strong> in Java is just the <strong>name</strong>=
 you give to things in your program so you can refer to them later.</p>
<p>In Java, you name things like:</p>
<ul>
<li>
<p><strong>Variables</strong> (to store data)<br>
Example: <code>int age =3D 25;</code> =E2=86=92 Here, <code>age</code> is t=
he identifier.</p></li>
<li>
<p><strong>Classes</strong> (blueprints for objects)<br>
Example: <code>class Car {}</code> =E2=86=92 <code>Car</code> is the identi=
fier.</p></li>
<li>
<p><strong>Methods</strong> (actions or functions)<br>
Example: <code>void drive() {}</code> =E2=86=92 <code>drive</code> is the i=
dentifier.</p></li>
</ul>
<h3 id=3D"CheatSheetJava-RulesforIdentifiersinJava:">Rules for Identifiers =
in Java:</h3>
<ol start=3D"1">
<li>
<p>Can only contain <strong>letters (A-Z, a-z)</strong>, <strong>digits (0-=
9)</strong>, <strong>underscore (_) or dollar sign ($)</strong>.</p></li>
<li>
<p><strong>Cannot start with a digit</strong>.</p></li>
<li>
<p><strong>Cannot use Java keywords</strong> like <code>class</code>, <code=
>int</code>, <code>public</code>, etc.</p></li>
<li>
<p><strong>Case-sensitive</strong> =E2=80=93 <code>Age</code> and <code>age=
</code> are different.</p></li>
</ol>
<h3 id=3D"CheatSheetJava-Example:">Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int sco=
re =3D 100;
String playerName =3D "Alex";
</pre>
</div>
</div>
<p>Here, <code>score</code> and <code>playerName</code> are identifiers.</p=
>
<h2 id=3D"CheatSheetJava-ReservedWords">Reserved Words</h2>
<p>In <strong>Java</strong>, <strong>reserved words</strong> (also called <=
strong>keywords</strong>) are special words that are <strong>already define=
d by the language</strong> and have a <strong>specific meaning</strong>. Yo=
u <strong>cannot use them as names</strong> for your variables, classes, or=
 methods.</p>
<h3 id=3D"CheatSheetJava-Thinkofitlikethis:">Think of it like this:</h3>
<p>Imagine you're filling out a form, and there's a field labeled <strong>"=
Date of Birth"</strong>. You can't write your name there because that field=
 is <strong>reserved</strong> for a specific purpose. Similarly, in Java, w=
ords like <code>class</code>, <code>if</code>, <code>while</code>, and <cod=
e>return</code> are <strong>reserved</strong> for specific tasks in the lan=
guage.</p>
<h3 id=3D"CheatSheetJava-ExamplesofReservedWordsinJava:">Examples of Reserv=
ed Words in Java:</h3>
<p>Reserved Words =3D 53</p>
<p>Keywords =3D50</p>
<p>Literals =3D 3 - true, false, null</p>
<p>used keywords =3D48 and unused keywords=3D2 (goto, const)</p>
<p><strong>Reserved words in java for Data Types</strong></p>
<p>In Java, <strong>reserved words for data types</strong> are the keywords=
 used to define the <strong>type of data</strong> a variable can hold. Thes=
e are also called <strong>primitive data types</strong>, and Java has <stro=
ng>8 of them</strong>.</p>
<p>Here=E2=80=99s a list of <strong>reserved words in Java for data types</=
strong>:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"78=
c4ff42-592c-4a7c-bae9-2915430cee87" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>byte</code></p></td>
<td class=3D"confluenceTd">
<p>8-bit integer (-128 to 127)</p></td>
<td class=3D"confluenceTd">
<p><code>byte age =3D 25;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>short</code></p></td>
<td class=3D"confluenceTd">
<p>16-bit integer (-32,768 to 32,767)</p></td>
<td class=3D"confluenceTd">
<p><code>short temp =3D 300;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int</code></p></td>
<td class=3D"confluenceTd">
<p>32-bit integer</p></td>
<td class=3D"confluenceTd">
<p><code>int score =3D 1000;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>long</code></p></td>
<td class=3D"confluenceTd">
<p>64-bit integer</p></td>
<td class=3D"confluenceTd">
<p><code>long views =3D 100000L;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>float</code></p></td>
<td class=3D"confluenceTd">
<p>32-bit decimal number</p></td>
<td class=3D"confluenceTd">
<p><code>float price =3D 19.99f;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>double</code></p></td>
<td class=3D"confluenceTd">
<p>64-bit decimal number (more precise)</p></td>
<td class=3D"confluenceTd">
<p><code>double pi =3D 3.14159;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>char</code></p></td>
<td class=3D"confluenceTd">
<p>Single 16-bit Unicode character</p></td>
<td class=3D"confluenceTd">
<p><code>char grade =3D 'A';</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>boolean</code></p></td>
<td class=3D"confluenceTd">
<p>True or false value</p></td>
<td class=3D"confluenceTd">
<p><code>boolean isOn =3D true;</code></p></td>
</tr>
</tbody>
</table>
</div>
<p>These are <strong>reserved</strong>, so you <strong>cannot use them as v=
ariable names</strong>.</p>
<p></p>
<p><strong>Reserved Words for Flow Control</strong></p>
<p>In Java, <strong>flow control reserved words</strong> are keywords that =
control the <strong>order in which code is executed</strong>. These are use=
d to make decisions, repeat actions, or jump to different parts of the code=
.</p>
<p>Here=E2=80=99s a list of <strong>Java reserved words used for flow contr=
ol</strong>:</p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=81Loops">=F0=9F=94=81 <strong>Loops</str=
ong></h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"42=
faa3d8-2653-4a00-b230-ee82bc9efe9e" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Purpose</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example Use</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>for</code></p></td>
<td class=3D"confluenceTd">
<p>Repeats a block of code a set number of times</p></td>
<td class=3D"confluenceTd">
<p><code>for (int i =3D 0; i &lt; 5; i++)</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>while</code></p></td>
<td class=3D"confluenceTd">
<p>Repeats a block of code while a condition is true</p></td>
<td class=3D"confluenceTd">
<p><code>while (x &lt; 10)</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>do</code></p></td>
<td class=3D"confluenceTd">
<p>Like <code>while</code>, but runs at least once</p></td>
<td class=3D"confluenceTd">
<p><code>do { ... } while (x &lt; 10);</code></p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=80DecisionMaking">=F0=9F=94=80 <strong>D=
ecision Making</strong></h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"59=
f271f3-f033-4cb6-89c1-269b0b7da8f6" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Purpose</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example Use</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>if</code></p></td>
<td class=3D"confluenceTd">
<p>Runs code only if a condition is true</p></td>
<td class=3D"confluenceTd">
<p><code>if (score &gt; 50)</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>else</code></p></td>
<td class=3D"confluenceTd">
<p>Runs code if the <code>if</code> condition is false</p></td>
<td class=3D"confluenceTd">
<p><code>else { ... }</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>switch</code></p></td>
<td class=3D"confluenceTd">
<p>Selects one of many code blocks to run</p></td>
<td class=3D"confluenceTd">
<p><code>switch (choice)</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>case</code></p></td>
<td class=3D"confluenceTd">
<p>Defines a block in a <code>switch</code> statement</p></td>
<td class=3D"confluenceTd">
<p><code>case 1:</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>default</code></p></td>
<td class=3D"confluenceTd">
<p>Runs if no <code>case</code> matches in <code>switch</code></p></td>
<td class=3D"confluenceTd">
<p><code>default:</code></p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"CheatSheetJava-=E2=8F=B9=EF=B8=8FJumpStatements">=E2=8F=B9=EF=B8=
=8F <strong>Jump Statements</strong></h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"48=
c06c08-950f-4201-a874-d2bb0ae83e58" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Purpose</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example Use</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>break</code></p></td>
<td class=3D"confluenceTd">
<p>Exits a loop or <code>switch</code> early</p></td>
<td class=3D"confluenceTd">
<p><code>break;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>continue</code></p></td>
<td class=3D"confluenceTd">
<p>Skips the current loop iteration</p></td>
<td class=3D"confluenceTd">
<p><code>continue;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>return</code></p></td>
<td class=3D"confluenceTd">
<p>Exits from a method and optionally returns a value</p></td>
<td class=3D"confluenceTd">
<p><code>return x;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>try</code></p></td>
<td class=3D"confluenceTd">
<p>Starts a block to catch exceptions</p></td>
<td class=3D"confluenceTd">
<p><code>try { ... }</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>catch</code></p></td>
<td class=3D"confluenceTd">
<p>Handles exceptions</p></td>
<td class=3D"confluenceTd">
<p><code>catch (Exception e)</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>finally</code></p></td>
<td class=3D"confluenceTd">
<p>Runs code after <code>try</code>/<code>catch</code>, always</p></td>
<td class=3D"confluenceTd">
<p><code>finally { ... }</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>throw</code></p></td>
<td class=3D"confluenceTd">
<p>Throws an exception</p></td>
<td class=3D"confluenceTd">
<p><code>throw new Exception();</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>throws</code></p></td>
<td class=3D"confluenceTd">
<p>Declares exceptions a method might throw</p></td>
<td class=3D"confluenceTd">
<p><code>throws IOException</code></p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<p><strong>Reserved Keywords for Modifiers</strong></p>
<p>In Java, <strong>modifiers</strong> are reserved keywords that change th=
e <strong>behavior</strong>, <strong>visibility</strong>, or <strong>charac=
teristics</strong> of classes, methods, and variables. They help define <st=
rong>how</strong> and <strong>where</strong> something can be used.</p>
<p>Here=E2=80=99s a list of <strong>Java reserved keywords used as modifier=
s</strong>, grouped by their purpose:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=93AccessModifiers(Controlvisibility)">=
=F0=9F=94=93 <strong>Access Modifiers</strong> (Control visibility)</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"0a=
79871b-c34b-4024-840d-0272122c8384" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Meaning</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>public</code></p></td>
<td class=3D"confluenceTd">
<p>Accessible from anywhere</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>private</code></p></td>
<td class=3D"confluenceTd">
<p>Accessible only within the same class</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>protected</code></p></td>
<td class=3D"confluenceTd">
<p>Accessible within the same package or subclass</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=ACNon-AccessModifiers(Controlbehavior)">=
=F0=9F=A7=AC <strong>Non-Access Modifiers</strong> (Control behavior)</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"14=
07fb8d-3854-4fdc-a4fa-b3747dddd221" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Meaning</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>static</code></p></td>
<td class=3D"confluenceTd">
<p>Belongs to the class, not instances</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>final</code></p></td>
<td class=3D"confluenceTd">
<p>Cannot be changed (for variables), or overridden (for methods)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>abstract</code></p></td>
<td class=3D"confluenceTd">
<p>Declares a method or class without full implementation</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>synchronized</code></p></td>
<td class=3D"confluenceTd">
<p>Ensures only one thread can access a method/block at a time</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>volatile</code></p></td>
<td class=3D"confluenceTd">
<p>Tells the JVM that a variable may be changed by multiple threads</p></td=
>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>transient</code></p></td>
<td class=3D"confluenceTd">
<p>Prevents a variable from being serialized</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>native</code></p></td>
<td class=3D"confluenceTd">
<p>Indicates a method is implemented in native (non-Java) code</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>strictfp</code></p></td>
<td class=3D"confluenceTd">
<p>Forces floating-point calculations to follow IEEE standards</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-Example:.1">Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
final class MyClass {
    private static int count;
    protected synchronized void update() {
        // thread-safe update
    }
}
</pre>
</div>
</div>
<p></p>
<p><strong>Reserved Keywords for Exception Handling</strong></p>
<p>In Java, <strong>exception handling</strong> is a mechanism to handle <s=
trong>runtime errors</strong> so the program can continue running or fail g=
racefully. Java provides specific <strong>reserved keywords</strong> for th=
is purpose.</p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=A7ReservedKeywordsforExceptionHandlingin=
Java:">=F0=9F=94=A7 Reserved Keywords for Exception Handling in Java:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"f7=
f75eea-c289-474c-a0bc-3fbbbc36fc2b" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Purpose</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>try</code></p></td>
<td class=3D"confluenceTd">
<p>Defines a block of code to test for errors</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>catch</code></p></td>
<td class=3D"confluenceTd">
<p>Defines a block of code to handle the error</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>finally</code></p></td>
<td class=3D"confluenceTd">
<p>Defines a block of code that always runs, whether an error occurred or n=
ot</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>throw</code></p></td>
<td class=3D"confluenceTd">
<p>Used to <strong>manually throw</strong> an exception</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>throws</code></p></td>
<td class=3D"confluenceTd">
<p>Declares the exceptions a method might throw</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A9Example:">=F0=9F=A7=A9 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Example {
    public static void main(String[] args) {
        try {
            int result =3D 10 / 0; // This will cause an exception
        } catch (ArithmeticException e) {
            System.out.println("Cannot divide by zero!");
        } finally {
            System.out.println("This block always runs.");
        }
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DQuickSummary:">=F0=9F=94=8D Quick Summ=
ary:</h3>
<ul>
<li>
<p><code>try</code> =E2=86=92 "Let's try this risky code."</p></li>
<li>
<p><code>catch</code> =E2=86=92 "If something goes wrong, handle it here."<=
/p></li>
<li>
<p><code>finally</code> =E2=86=92 "No matter what, do this at the end."</p>=
</li>
<li>
<p><code>throw</code> =E2=86=92 "I'm throwing an error on purpose."</p></li=
>
<li>
<p><code>throws</code> =E2=86=92 "This method might throw an error."</p></l=
i>
</ul>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhatitshows:">=F0=9F=94=8D What it sho=
ws:</h3>
<ul>
<li>
<p><code>try</code>: Code that might throw an exception.</p></li>
<li>
<p><code>catch</code>: Handles the exception if one occurs.</p></li>
<li>
<p><code>finally</code>: Always runs, whether an exception occurred or not.=
</p></li>
<li>
<p><code>throw</code>: Used to manually throw an exception.</p></li>
<li>
<p><code>throws</code>: Declares that a method might throw an exception.</p=
></li>
</ul>
<p></p>
<p><strong>Class related Reserved Keywords</strong></p>
<p>class, interface, package, import, extends, implements</p>
<p>In Java, there are several <strong>reserved keywords related to classes<=
/strong>. These keywords are used to <strong>define</strong>, <strong>exten=
d</strong>, or <strong>interact</strong> with classes and interfaces.</p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=B1ReservedKeywordsforClass-RelatedOperat=
ions:">=F0=9F=A7=B1 Reserved Keywords for Class-Related Operations:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"69=
e8d8b0-db59-41b9-9e5e-9c48f1537f9c" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Purpose</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>class</code></p></td>
<td class=3D"confluenceTd">
<p>Declares a class</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>interface</code></p></td>
<td class=3D"confluenceTd">
<p>Declares an interface (a contract for classes to follow)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>extends</code></p></td>
<td class=3D"confluenceTd">
<p>Indicates that a class inherits from a superclass</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>implements</code></p></td>
<td class=3D"confluenceTd">
<p>Indicates that a class implements an interface</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>abstract</code></p></td>
<td class=3D"confluenceTd">
<p>Declares a class or method that is incomplete and must be extended</p></=
td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>final</code></p></td>
<td class=3D"confluenceTd">
<p>Prevents a class from being extended or a method from being overridden</=
p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>new</code></p></td>
<td class=3D"confluenceTd">
<p>Creates a new object from a class</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>this</code></p></td>
<td class=3D"confluenceTd">
<p>Refers to the current instance of the class</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>super</code></p></td>
<td class=3D"confluenceTd">
<p>Refers to the parent class (superclass)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>static</code></p></td>
<td class=3D"confluenceTd">
<p>Belongs to the class rather than instances</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>enum</code></p></td>
<td class=3D"confluenceTd">
<p>Declares an enumeration (a fixed set of constants)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>instanceof</code></p></td>
<td class=3D"confluenceTd">
<p>Tests whether an object is an instance of a specific class or subclass</=
p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A9Example:.1">=F0=9F=A7=A9 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">abstrac=
t class Animal {
    abstract void sound();
}

class Dog extends Animal implements Pet {
    public void sound() {
        System.out.println("Bark");
    }
}

interface Pet {
    void sound();
}
</pre>
</div>
</div>
<p></p>
<p><strong>Object related Reserved Keywords</strong></p>
<p>In Java, <strong>object-related reserved keywords</strong> are those tha=
t help you <strong>create</strong>, <strong>manipulate</strong>, or <strong=
>interact</strong> with objects. Since Java is an <strong>object-oriented p=
rogramming language</strong>, these keywords are essential for working with=
 classes and their instances (objects).</p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A9ReservedKeywordsRelatedtoObjects:">=F0=
=9F=A7=A9 Reserved Keywords Related to Objects:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"0e=
2752e9-4589-4796-b861-747c61323243" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Keyword</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Purpose</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>new</code></p></td>
<td class=3D"confluenceTd">
<p>Creates a new object from a class</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>this</code></p></td>
<td class=3D"confluenceTd">
<p>Refers to the current object (instance of the class)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>super</code></p></td>
<td class=3D"confluenceTd">
<p>Refers to the parent class of the current object</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>instanceof</code></p></td>
<td class=3D"confluenceTd">
<p>Checks if an object is an instance of a specific class or subclass</p></=
td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>null</code></p></td>
<td class=3D"confluenceTd">
<p>A literal (not a keyword) that represents the absence of an object</p></=
td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:">=F0=9F=94=8D Explanation=
:</h3>
<ul>
<li>
<p><code>new</code>: Used to create an object.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Dog myD=
og =3D new Dog();
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p><code>this</code>: Refers to the current object inside a class.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">this.na=
me =3D name;
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p><code>super</code>: Calls the constructor or method of the parent class.=
</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">super.s=
ound();
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p><code>instanceof</code>: Checks the type of an object.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">if (myD=
og instanceof Animal) { ... }
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p><code>null</code>: Represents a reference that points to no object.</p><=
/li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
name =3D null;
</pre>
</div>
</div>
<p></p>
<p><strong>NULL in detail</strong></p>
<p>Absolutely! Let's dive into the concept of <code>null</code> in Java in =
a clear and simple way.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9WhatisnullinJava?">=F0=9F=94=B9 What i=
s <code>null</code> in Java?</h3>
<p>In Java, <code>null</code> is a <strong>special literal</strong> that me=
ans <strong>"no object"</strong> or <strong>"nothing here."</strong></p>
<p>It=E2=80=99s used to indicate that a <strong>reference variable</strong>=
 doesn=E2=80=99t point to any object in memory.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Thinkofitlikethis:">=F0=9F=A7=A0 Think=
 of it like this:</h3>
<p>Imagine you have a <strong>remote control</strong> (reference variable),=
 but it=E2=80=99s <strong>not connected to any TV</strong> (object). The re=
mote exists, but it doesn=E2=80=99t control anything =E2=80=94 that=E2=80=
=99s what <code>null</code> means.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AAExample:">=F0=9F=A7=AA Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
name =3D null;
</pre>
</div>
</div>
<p>This means:</p>
<ul>
<li>
<p><code>name</code> is a variable that can hold a <code>String</code> obje=
ct.</p></li>
<li>
<p>But right now, it <strong>doesn=E2=80=99t point to any actual string</st=
rong> =E2=80=94 it=E2=80=99s empty or unassigned.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9A=A0=EF=B8=8FWhyisnullimportant?">=E2=9A=A0=
=EF=B8=8F Why is <code>null</code> important?</h3>
<ul>
<li>
<p>It helps you <strong>initialize variables</strong> when you don=E2=80=99=
t yet have a value.</p></li>
<li>
<p>It=E2=80=99s used to <strong>check if an object exists</strong> before u=
sing it.</p></li>
<li>
<p>It helps <strong>avoid memory usage</strong> until needed.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=97CommonMistake:NullPointerException">=E2=
=9D=97 Common Mistake: NullPointerException</h3>
<p>If you try to use a <code>null</code> reference like it=E2=80=99s a real=
 object, Java will throw a <code>NullPointerException</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
name =3D null;
System.out.println(name.length()); // =E2=9D=8C This will crash!
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85SafeUsage:">=E2=9C=85 Safe Usage:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">if (nam=
e !=3D null) {
    System.out.println(name.length());
} else {
    System.out.println("Name is not set.");
}
</pre>
</div>
</div>
<p></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>How to avoid NullPointerExceptions?</p>
<p>Great question! <strong>NullPointerExceptions (NPEs)</strong> are one of=
 the most common runtime errors in Java. They happen when you try to use a =
reference that points to <code>null</code> as if it were an actual object.<=
/p>
<p>Here are some <strong>practical ways to avoid NullPointerExceptions</str=
ong>:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=851.InitializeVariablesProperly">=E2=9C=85 =
1. <strong>Initialize Variables Properly</strong></h3>
<p>Always assign a valid object to your variables when possible.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
name =3D ""; // instead of null
List&lt;String&gt; list =3D new ArrayList&lt;&gt;();
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=852.UseNullChecksBeforeAccessing">=E2=9C=85=
 2. <strong>Use Null Checks Before Accessing</strong></h3>
<p>Check if a variable is <code>null</code> before using it.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">if (use=
r !=3D null) {
    System.out.println(user.getName());
}</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=853.UseObjects.requireNonNull()">=E2=9C=85 =
3. <strong>Use </strong><code>Objects.requireNonNull()</code></h3>
<p>This throws a clear exception early if a value is unexpectedly null.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">import =
java.util.Objects;

public void setName(String name) {
    this.name =3D Objects.requireNonNull(name, "Name cannot be null");
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=854.UseOptional(Java8+)">=E2=9C=85 4. <stro=
ng>Use Optional (Java 8+)</strong></h3>
<p><code>Optional</code> is a container that may or may not hold a non-null=
 value.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Optiona=
l&lt;String&gt; name =3D Optional.ofNullable(getName());
name.ifPresent(n -&gt; System.out.println(n));
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=855.AvoidReturningnullfromMethods">=E2=9C=
=85 5. <strong>Avoid Returning </strong><code>null</code><strong> from Meth=
ods</strong></h3>
<p>Return empty collections or <code>Optional</code> instead of <code>null<=
/code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
List&lt;String&gt; getItems() {
    return new ArrayList&lt;&gt;(); // not null
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=856.UseAnnotations(like@NonNull,@Nullable)"=
>=E2=9C=85 6. <strong>Use Annotations (like </strong><code>@NonNull</code><=
strong>, </strong><code>@Nullable</code><strong>)</strong></h3>
<p>These help tools and IDEs warn you about potential null issues.</p>
<h3 id=3D"CheatSheetJava-=E2=9C=857.UseModernIDEFeatures">=E2=9C=85 7. <str=
ong>Use Modern IDE Features</strong></h3>
<p>IDEs like IntelliJ IDEA or Eclipse can highlight potential null issues a=
nd suggest fixes.</p>
</div>
</div>
<p></p>
<p></p>
<p><strong>void - return type keyword</strong></p>
<p>In Java, <code>void</code> is a <strong>return type keyword</strong> use=
d to indicate that a method <strong>does not return any value</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Thinkofitlikethis:.1">=F0=9F=A7=A0 Thi=
nk of it like this:</h3>
<p>If a method is like a <strong>vending machine</strong>, then:</p>
<ul>
<li>
<p>A method with a return type like <code>int</code> gives you a <strong>sn=
ack</strong> (a value).</p></li>
<li>
<p>A method with <code>void</code> gives you <strong>nothing back</strong> =
=E2=80=94 it just <strong>does something</strong> (like making a sound or p=
rinting a message).</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9SyntaxExample:">=F0=9F=94=B9 Syntax Ex=
ample:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void greet() {
    System.out.println("Hello!");
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>void</code> means this method <strong>performs an action</strong> =
(printing "Hello!") but <strong>doesn=E2=80=99t return anything</strong>.</=
p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhentoUsevoid:">=F0=9F=94=8D When to U=
se <code>void</code>:</h3>
<ul>
<li>
<p>When your method is meant to <strong>perform an action</strong>, not cal=
culate or return a result.</p></li>
<li>
<p>Common in methods that:</p>
<ul>
<li>
<p>Print messages</p></li>
<li>
<p>Update values</p></li>
<li>
<p>Modify objects</p></li>
<li>
<p>Trigger events</p></li>
</ul></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CWhatYouCan=E2=80=99tDowithvoid:">=E2=9D=
=8C What You Can=E2=80=99t Do with <code>void</code>:</h3>
<p>You <strong>cannot use </strong><code>return</code><strong> with a value=
</strong> in a <code>void</code> method:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void test() {
    return 5; // =E2=9D=8C Error! Can't return a value from a void method
}
</pre>
</div>
</div>
<p>You <strong>can</strong> use <code>return;</code> by itself to exit earl=
y:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void check(int x) {
    if (x &lt; 0) return; // =E2=9C=85 Just exits the method
    System.out.println("x is positive");
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>void</code>: Executes an action but returns nothing.</p></li>
<li>
<p><code>int</code>: Returns a whole number.</p></li>
<li>
<p><code>String</code>: Returns a sequence of characters (text).</p></li>
<li>
<p><code>boolean</code>: Returns either <code>true</code> or <code>false</c=
ode>.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-DataTypes">Data Types</h2>
<p>In Java, <strong>data types</strong> define the kind of data a variable =
can hold. Java is a <strong>strongly typed language</strong>, which means e=
very variable must be declared with a data type.</p>
<p></p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper=
 confluence-embedded-manual-size"><img class=3D"confluence-embedded-image i=
mage-center" alt=3D"image-20250618-145809.png" width=3D"468" loading=3D"laz=
y" src=3D"972dae2638bfb6dd6cc3bc067f459fd28429e69d150dc13133e7121f5fdacc30"=
 data-image-src=3D"https://rahul-ritesh.atlassian.net/wiki/download/attachm=
ents/27525121/image-20250618-145809.png?version=3D1&amp;modificationDate=3D=
1750258697699&amp;cacheVersion=3D1&amp;api=3Dv2" data-height=3D"479" data-w=
idth=3D"943" data-unresolved-comment-count=3D"0" data-linked-resource-id=3D=
"28016646" data-linked-resource-version=3D"1" data-linked-resource-type=3D"=
attachment" data-linked-resource-default-alias=3D"image-20250618-145809.png=
" data-base-url=3D"https://rahul-ritesh.atlassian.net/wiki" data-linked-res=
ource-content-type=3D"image/png" data-linked-resource-container-id=3D"27525=
121" data-linked-resource-container-version=3D"15" data-media-id=3D"5a61613=
f-1aa2-4b32-86fa-af21227b241a" data-media-type=3D"file" height=3D"237"></sp=
an>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9JavaDataTypesAreDividedIntoTwoMainCate=
gories:">=F0=9F=94=B9 Java Data Types Are Divided Into Two Main Categories:=
</h3>
<h4 id=3D"CheatSheetJava-1.PrimitiveDataTypes(built-in)">1. <strong>Primiti=
ve Data Types</strong> (built-in)</h4>
<p>There are <strong>8 primitive types</strong> in Java:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"bf=
6a820d-b335-4a6c-8f73-98035b01f3fe" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Data Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Size</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>byte</code></p></td>
<td class=3D"confluenceTd">
<p>8-bit</p></td>
<td class=3D"confluenceTd">
<p>Small integers (-128 to 127)</p></td>
<td class=3D"confluenceTd">
<p><code>byte b =3D 100;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>short</code></p></td>
<td class=3D"confluenceTd">
<p>16-bit</p></td>
<td class=3D"confluenceTd">
<p>Larger integers</p></td>
<td class=3D"confluenceTd">
<p><code>short s =3D 1000;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int</code></p></td>
<td class=3D"confluenceTd">
<p>32-bit</p></td>
<td class=3D"confluenceTd">
<p>Standard integers</p></td>
<td class=3D"confluenceTd">
<p><code>int x =3D 50000;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>long</code></p></td>
<td class=3D"confluenceTd">
<p>64-bit</p></td>
<td class=3D"confluenceTd">
<p>Very large integers</p></td>
<td class=3D"confluenceTd">
<p><code>long l =3D 100000L;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>float</code></p></td>
<td class=3D"confluenceTd">
<p>32-bit</p></td>
<td class=3D"confluenceTd">
<p>Decimal numbers (less precision)</p></td>
<td class=3D"confluenceTd">
<p><code>float f =3D 5.75f;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>double</code></p></td>
<td class=3D"confluenceTd">
<p>64-bit</p></td>
<td class=3D"confluenceTd">
<p>Decimal numbers (more precision)</p></td>
<td class=3D"confluenceTd">
<p><code>double d =3D 19.99;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>char</code></p></td>
<td class=3D"confluenceTd">
<p>16-bit</p></td>
<td class=3D"confluenceTd">
<p>Single character</p></td>
<td class=3D"confluenceTd">
<p><code>char c =3D 'A';</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>boolean</code></p></td>
<td class=3D"confluenceTd">
<p>1-bit</p></td>
<td class=3D"confluenceTd">
<p>True or false</p></td>
<td class=3D"confluenceTd">
<p><code>boolean isOn =3D true;</code></p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h4 id=3D"CheatSheetJava-2.Non-Primitive(Reference)DataTypes">2. <strong>No=
n-Primitive (Reference) Data Types</strong></h4>
<p>These are types that refer to objects:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"43=
543d18-d12b-4fcd-863c-298f4ff455d4" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>String</code></p></td>
<td class=3D"confluenceTd">
<p>Sequence of characters</p></td>
<td class=3D"confluenceTd">
<p><code>String name =3D "Java";</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Arrays</p></td>
<td class=3D"confluenceTd">
<p>Collection of elements of the same type</p></td>
<td class=3D"confluenceTd">
<p><code>int[] nums =3D {1, 2, 3};</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Classes</p></td>
<td class=3D"confluenceTd">
<p>Custom data types</p></td>
<td class=3D"confluenceTd">
<p><code>Car myCar =3D new Car();</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Interfaces</p></td>
<td class=3D"confluenceTd">
<p>Contracts for classes</p></td>
<td class=3D"confluenceTd">
<p><code>Runnable r =3D new Task();</code></p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0KeyDifferences:">=F0=9F=A7=A0 Key Diff=
erences:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"ba=
62f19e-629a-42ef-a31b-91f6a52199e3" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Primitive Types</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Non-Primitive Types</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Built-in</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>No (except <code>String</code>)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Memory efficiency</p></td>
<td class=3D"confluenceTd">
<p>High</p></td>
<td class=3D"confluenceTd">
<p>Lower</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Methods available</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Can be <code>null</code></p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DHighlights:">=F0=9F=94=8D Highlights:<=
/h3>
<ul>
<li>
<p><strong>Numeric Types</strong> (<code>byte</code>, <code>short</code>, <=
code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>=
):</p>
<ul>
<li>
<p>Used for numbers (integers and decimals).</p></li>
<li>
<p>Differ in size and precision.</p></li>
</ul></li>
<li>
<p><code>char</code>:</p>
<ul>
<li>
<p>Stores a single Unicode character.</p></li>
<li>
<p>16-bit, can represent characters like <code>'A'</code>, <code>'9'</code>=
, or <code>'=E2=82=B9'</code>.</p></li>
</ul></li>
<li>
<p><code>boolean</code>:</p>
<ul>
<li>
<p>Only two possible values: <code>true</code> or <code>false</code>.</p></=
li>
<li>
<p>Used for logical decisions and conditions.</p></li>
</ul></li>
</ul>
<h2 id=3D"CheatSheetJava-Note-">Note-</h2>
<p></p>
<h2 id=3D"CheatSheetJava-byte">byte</h2>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9Whyisbytesuitableforhandlingdatastream=
s(fromfilesornetworks)?">=F0=9F=94=B9 Why is <code>byte</code> suitable for=
 handling data streams (from files or networks)?</h3>
<p>When you're working with <strong>files</strong> or <strong>network conne=
ctions</strong>, data is often transferred in the form of <strong>raw binar=
y data</strong> =E2=80=94 not as text or numbers, but as a <strong>stream o=
f bytes</strong>.</p>
<p>The <code>byte</code> data type in Java is perfect for this because:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=851.EfficientMemoryUsage">=E2=9C=85 1. <str=
ong>Efficient Memory Usage</strong></h3>
<ul>
<li>
<p>A <code>byte</code> is only <strong>8 bits</strong> (1/4 the size of an =
<code>int</code>), so it's <strong>lightweight</strong>.</p></li>
<li>
<p>When reading large files or streaming data, using <code>byte</code> help=
s <strong>save memory</strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=852.MatchestheFormatofRawData">=E2=9C=85 2.=
 <strong>Matches the Format of Raw Data</strong></h3>
<ul>
<li>
<p>Files and network protocols send data as <strong>sequences of bytes</str=
ong>.</p></li>
<li>
<p>Java=E2=80=99s <code>InputStream</code> and <code>OutputStream</code> cl=
asses work directly with <code>byte</code> arrays.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">InputSt=
ream input =3D new FileInputStream("file.txt");
byte[] buffer =3D new byte[1024];
int bytesRead =3D input.read(buffer);
</pre>
</div>
</div>
<p>Here, you're reading <strong>1024 bytes</strong> at a time from a file =
=E2=80=94 exactly how data is stored and transmitted.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=853.UniversalCompatibility">=E2=9C=85 3. <s=
trong>Universal Compatibility</strong></h3>
<ul>
<li>
<p><code>byte</code> can represent any kind of data: text, images, audio, e=
tc.</p></li>
<li>
<p>It=E2=80=99s ideal for <strong>low-level data processing</strong>, like =
compression, encryption, or file transfer.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=854.UsedinJavaI/OandNetworkingAPIs">=E2=9C=
=85 4. <strong>Used in Java I/O and Networking APIs</strong></h3>
<ul>
<li>
<p>Classes like <code>BufferedInputStream</code>, <code>DataInputStream</co=
de>, <code>Socket</code>, and <code>ByteArrayOutputStream</code> all use <c=
ode>byte</code> for reading/writing data.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Analogy:">=F0=9F=A7=A0 Analogy:</h3>
<p>Think of <code>byte</code> as a <strong>single Lego brick</strong>. When=
 you're building something complex (like a file or a video stream), you nee=
d to work with <strong>individual bricks</strong> =E2=80=94 not entire wall=
s. That=E2=80=99s what <code>byte</code> lets you do.</p>
<p></p>
<h2 id=3D"CheatSheetJava-short">short</h2>
<p>the <code>short</code> data type in Java is <strong>rarely used</strong>=
 in modern programming. Here's why it's considered <strong>outdated or less=
 practical</strong>:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B91.LimitedRange">=F0=9F=94=B9 1. <stron=
g>Limited Range</strong></h3>
<ul>
<li>
<p><code>short</code> is a 16-bit signed integer.</p></li>
<li>
<p>It can store values from <strong>-32,768 to 32,767</strong>.</p></li>
<li>
<p>This range is <strong>too small</strong> for most real-world application=
s.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">short s=
 =3D 32000; // okay
short s =3D 40000; // =E2=9D=8C error: out of range
</pre>
</div>
</div></li>
</ul>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B92.intistheDefaultIntegerType">=F0=9F=
=94=B9 2. <code>int</code><strong> is the Default Integer Type</strong></h3=
>
<ul>
<li>
<p>Java automatically treats whole numbers as <code>int</code> (32-bit).</p=
></li>
<li>
<p>Most arithmetic operations are done using <code>int</code>, even if you =
use <code>short</code>.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">short a=
 =3D 1000;
short b =3D 2000;
short c =3D a + b; // =E2=9D=8C error: result is int, needs casting
</pre>
</div>
</div>
<p>So you often need <strong>extra casting</strong>, which makes code <stro=
ng>less clean</strong>.</p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B93.NoRealMemoryAdvantage">=F0=9F=94=B9 =
3. <strong>No Real Memory Advantage</strong></h3>
<ul>
<li>
<p>In modern systems, the <strong>memory savings</strong> from using <code>=
short</code> over <code>int</code> are <strong>negligible</strong>.</p></li=
>
<li>
<p>CPUs are optimized for 32-bit or 64-bit operations, so using <code>short=
</code> can even be <strong>slower</strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B94.NotCommoninAPIsorLibraries">=F0=9F=
=94=B9 4. <strong>Not Common in APIs or Libraries</strong></h3>
<ul>
<li>
<p>Most Java libraries and frameworks use <code>int</code> for numeric valu=
es.</p></li>
<li>
<p>Using <code>short</code> can lead to <strong>incompatibility</strong> or=
 <strong>extra conversions</strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B95.UsedOnlyinSpecialCases">=F0=9F=94=B9=
 5. <strong>Used Only in Special Cases</strong></h3>
<ul>
<li>
<p><code>short</code> is still used in:</p>
<ul>
<li>
<p><strong>Low-level programming</strong> (e.g., embedded systems)</p></li>
<li>
<p><strong>Binary file formats</strong> or <strong>network protocols</stron=
g> where size matters</p></li>
<li>
<p><strong>Legacy codebases</strong></p></li>
</ul></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Summary:">=E2=9C=85 Summary:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"bb=
5336b8-0e5d-4c19-acd6-8898a96ee2a6" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><code>short</code></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><code>int</code></p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Size</p></td>
<td class=3D"confluenceTd">
<p>16-bit</p></td>
<td class=3D"confluenceTd">
<p>32-bit</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Range</p></td>
<td class=3D"confluenceTd">
<p>-32,768 to 32,767</p></td>
<td class=3D"confluenceTd">
<p>-2^31 to 2^31 - 1</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Default in Java</p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C No</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Usage</p></td>
<td class=3D"confluenceTd">
<p>Rare/special cases</p></td>
<td class=3D"confluenceTd">
<p>Common/default</p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<h2 id=3D"CheatSheetJava-int">int</h2>
<p>The <code>int</code><strong> data type</strong> in Java is one of the mo=
st commonly used data types. It stands for <strong>"integer"</strong> and i=
s used to store <strong>whole numbers</strong> (i.e., numbers without decim=
al points).</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85WhentoUseintinJava:">=E2=9C=85 When to Us=
e <code>int</code> in Java:</h3>
<h4 id=3D"CheatSheetJava-1.CountingorIndexing">1. <strong>Counting or Index=
ing</strong></h4>
<ul>
<li>
<p>Loop counters, array indices, and general counting tasks.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">for (in=
t i =3D 0; i &lt; 10; i++) {
    System.out.println(i);
}
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-2.StoringWholeNumbers">2. <strong>Storing Whole Nu=
mbers</strong></h4>
<ul>
<li>
<p>When you need to store numbers like age, score, quantity, etc.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int age=
 =3D 25;
int score =3D 100;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-3.MathematicalCalculations">3. <strong>Mathematica=
l Calculations</strong></h4>
<ul>
<li>
<p>For arithmetic operations that don=E2=80=99t require decimals.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int sum=
 =3D 10 + 20;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-4.DefaultChoiceforIntegerValues">4. <strong>Defaul=
t Choice for Integer Values</strong></h4>
<ul>
<li>
<p>Java treats whole number literals as <code>int</code> by default.</p></l=
i>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int x =
=3D 5000; // No suffix needed
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-5.WorkingwithAPIsandLibraries">5. <strong>Working =
with APIs and Libraries</strong></h4>
<ul>
<li>
<p>Most Java libraries and frameworks use <code>int</code> for numeric valu=
es like sizes, IDs, and limits.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyintisPreferred:">=F0=9F=94=8D Why <=
code>int</code> is Preferred:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"1b=
ac821f-75c2-49de-8da5-08d0e08c6c59" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><code>int</code></p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Size</p></td>
<td class=3D"confluenceTd">
<p>32 bits</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Range</p></td>
<td class=3D"confluenceTd">
<p>-2,147,483,648 to 2,147,483,647</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Default integer</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Performance</p></td>
<td class=3D"confluenceTd">
<p>Optimized on modern CPUs</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CWhenNottoUseint:">=E2=9D=8C When Not to U=
se <code>int</code>:</h3>
<ul>
<li>
<p>If you need <strong>very large numbers</strong> =E2=86=92 use <code>long=
</code>.</p></li>
<li>
<p>If you need <strong>decimal values</strong> =E2=86=92 use <code>float</c=
ode> or <code>double</code>.</p></li>
<li>
<p>If memory is extremely limited (e.g., embedded systems) =E2=86=92 consid=
er <code>byte</code> or <code>short</code>.</p></li>
</ul>
<h2 id=3D"CheatSheetJava-long">long</h2>
<p>The <code>long</code> data type in Java is used when you need to store <=
strong>very large whole numbers</strong> =E2=80=94 larger than what an <cod=
e>int</code> can hold.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9WhentoUselong:">=F0=9F=94=B9 When to U=
se <code>long</code>:</h3>
<h4 id=3D"CheatSheetJava-=E2=9C=851.StoringLargeNumbers">=E2=9C=85 1. <stro=
ng>Storing Large Numbers</strong></h4>
<ul>
<li>
<p>Use <code>long</code> when values exceed the range of <code>int</code>:<=
/p>
<ul>
<li>
<p><code>int</code> range: =E2=88=922,147,483,648 to 2,147,483,647</p></li>
<li>
<p><code>long</code> range: =E2=88=929,223,372,036,854,775,808 to 9,223,372=
,036,854,775,807</p></li>
</ul></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">long po=
pulation =3D 8000000000L; // World population
</pre>
</div>
</div>
<p>Note: Add <code>L</code> or <code>l</code> at the end of the number to i=
ndicate it's a <code>long</code>.</p>
<h4 id=3D"CheatSheetJava-=E2=9C=852.TimestampsandTimeCalculations">=E2=9C=
=85 2. <strong>Timestamps and Time Calculations</strong></h4>
<ul>
<li>
<p>Java uses <code>long</code> for time in milliseconds (e.g., <code>System=
.currentTimeMillis()</code>).</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">long cu=
rrentTime =3D System.currentTimeMillis();
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-=E2=9C=853.FinancialCalculations(withcaution)">=E2=
=9C=85 3. <strong>Financial Calculations (with caution)</strong></h4>
<ul>
<li>
<p>For <strong>money in smallest units</strong> (like cents or paise), <cod=
e>long</code> is safer than <code>float</code> or <code>double</code> due t=
o precision issues.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">long ac=
countBalanceInCents =3D 123456789L;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-=E2=9C=854.LargeLoopCountersorDataSizes">=E2=9C=85=
 4. <strong>Large Loop Counters or Data Sizes</strong></h4>
<ul>
<li>
<p>When working with <strong>big data</strong>, file sizes, or large arrays=
.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">for (lo=
ng i =3D 0; i &lt; 10000000000L; i++) {
    // process
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9D=8CWhenNottoUselong:">=E2=9D=8C When Not to =
Use <code>long</code>:</h3>
<ul>
<li>
<p>If the number fits within <code>int</code>, prefer <code>int</code> for =
better performance.</p></li>
<li>
<p>Avoid using <code>long</code> for decimal values =E2=80=94 use <code>dou=
ble</code> or <code>BigDecimal</code> instead.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-floatingpointDataType">floating point Data Type</h=
2>
<p></p>
<p>In Java, <strong>floating-point data types</strong> are used when you ne=
ed to store <strong>numbers with decimal points</strong> =E2=80=94 like 3.1=
4, 99.99, or -0.001.</p>
<p>Java provides two floating-point types:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"1a=
f69405-b2e1-4385-8d61-52e275a76801" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Size</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Precision</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>float</code></p></td>
<td class=3D"confluenceTd">
<p>32-bit</p></td>
<td class=3D"confluenceTd">
<p>~6=E2=80=937 decimal digits</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>double</code></p></td>
<td class=3D"confluenceTd">
<p>64-bit</p></td>
<td class=3D"confluenceTd">
<p>~15=E2=80=9316 decimal digits</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85WhentoUseFloating-PointDataTypes:">=E2=9C=
=85 When to Use Floating-Point Data Types:</h3>
<h4 id=3D"CheatSheetJava-1.DecimalValuesAreNeeded">1. <strong>Decimal Value=
s Are Needed</strong></h4>
<p>Use <code>float</code> or <code>double</code> when your data includes <s=
trong>fractions or decimal points</strong>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">float t=
emperature =3D 36.6f;
double pi =3D 3.14159265359;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-2.ScientificCalculations">2. <strong>Scientific Ca=
lculations</strong></h4>
<p>Floating-point types are ideal for <strong>physics, engineering, or math=
ematical formulas</strong>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">double =
gravity =3D 9.81;
double force =3D mass * gravity;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-3.GraphicsandGameDevelopment">3. <strong>Graphics =
and Game Development</strong></h4>
<p>Used for <strong>coordinates, angles, scaling</strong>, etc., where prec=
ision matters but exact values aren't critical.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">float x=
 =3D 10.5f;
float y =3D 20.75f;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-4.PerformanceOverPrecision">4. <strong>Performance=
 Over Precision</strong></h4>
<p>Use <code>float</code> when:</p>
<ul>
<li>
<p>You need to save memory (e.g., large arrays of numbers).</p></li>
<li>
<p>You can tolerate <strong>less precision</strong>.</p></li>
</ul>
<p>Use <code>double</code> when:</p>
<ul>
<li>
<p>You need <strong>more precision</strong>.</p></li>
<li>
<p>It's the <strong>default choice</strong> for decimal numbers in Java.</p=
></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9A=A0=EF=B8=8FWhenNottoUseFloating-PointTypes:=
">=E2=9A=A0=EF=B8=8F When <em>Not</em> to Use Floating-Point Types:</h3>
<ul>
<li>
<p>For <strong>exact values</strong> like money or currency =E2=86=92 use <=
code>BigDecimal</code> instead.</p></li>
<li>
<p>When <strong>precision errors</strong> can cause problems (e.g., financi=
al apps).</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-chardatatype">char data type</h2>
<p>The <code>char</code> data type in Java is used to store a <strong>singl=
e character</strong> =E2=80=94 like a letter, digit, or symbol.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85WhentoUsechar:">=E2=9C=85 When to Use <co=
de>char</code>:</h3>
<h4 id=3D"CheatSheetJava-1.StoringaSingleCharacter">1. <strong>Storing a Si=
ngle Character</strong></h4>
<p>Use <code>char</code> when you need to store just <strong>one character<=
/strong>, not a whole string.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char gr=
ade =3D 'A';
char symbol =3D '#';
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-2.WorkingwithCharactersinText">2. <strong>Working =
with Characters in Text</strong></h4>
<p>Useful when processing or analyzing <strong>individual characters</stron=
g> in a string.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char fi=
rstLetter =3D name.charAt(0);
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-3.HandlingUnicodeCharacters">3. <strong>Handling U=
nicode Characters</strong></h4>
<p><code>char</code> in Java is <strong>16-bit</strong> and supports <stron=
g>Unicode</strong>, so it can store characters from many languages and symb=
ols.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char ru=
pee =3D '=E2=82=B9';
char chineseChar =3D '=E4=BD=A0';
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-4.SwitchStatements">4. <strong>Switch Statements</=
strong></h4>
<p>Often used in <code>switch</code> statements for character-based decisio=
ns.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">switch =
(inputChar) {
    case 'Y':
        System.out.println("Yes");
        break;
    case 'N':
        System.out.println("No");
        break;
}
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-5.KeyboardInputHandling">5. <strong>Keyboard Input=
 Handling</strong></h4>
<p>When reading a <strong>single key press</strong> or character from input=
.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CWhenNottoUsechar:">=E2=9D=8C When <em>Not=
</em> to Use <code>char</code>:</h3>
<ul>
<li>
<p>If you need to store <strong>multiple characters or words</strong> =E2=
=86=92 use <code>String</code>.</p></li>
<li>
<p>If you're doing <strong>numeric operations</strong> =E2=86=92 use <code>=
int</code>, <code>float</code>, etc.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-booleandatatype">boolean data type</h2>
<p>The <code>boolean</code> data type in Java is used to store <strong>true=
 or false</strong> values =E2=80=94 nothing else. It=E2=80=99s perfect for =
making <strong>decisions</strong> in your code.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85WhentoUseboolean:">=E2=9C=85 When to Use =
<code>boolean</code>:</h3>
<h4 id=3D"CheatSheetJava-1.ConditionalLogic">1. <strong>Conditional Logic</=
strong></h4>
<p>Use <code>boolean</code> to control <code>if</code>, <code>while</code>,=
 and other decision-making statements.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">boolean=
 isLoggedIn =3D true;

if (isLoggedIn) {
    System.out.println("Welcome back!");
}
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-2.FlagsandSwitches">2. <strong>Flags and Switches<=
/strong></h4>
<p>Use it as a <strong>flag</strong> to track a condition or state.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">boolean=
 isGameOver =3D false;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-3.MethodReturnValues">3. <strong>Method Return Val=
ues</strong></h4>
<p>Use <code>boolean</code> when a method needs to answer a <strong>yes/no<=
/strong> question.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
boolean isEven(int number) {
    return number % 2 =3D=3D 0;
}
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-4.Comparisons">4. <strong>Comparisons</strong></h4=
>
<p>Any comparison in Java returns a <code>boolean</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int age=
 =3D 20;
boolean isAdult =3D age &gt;=3D 18; // true
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-5.LoopControl">5. <strong>Loop Control</strong></h=
4>
<p>Use <code>boolean</code> to control when a loop should stop.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">boolean=
 keepRunning =3D true;
while (keepRunning) {
    // do something
    keepRunning =3D false; // exit loop
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9D=8CWhenNottoUseboolean:">=E2=9D=8C When <em>=
Not</em> to Use <code>boolean</code>:</h3>
<ul>
<li>
<p>If you need to store <strong>more than two states</strong> =E2=86=92 use=
 <code>enum</code> or <code>int</code>.</p></li>
<li>
<p>If you need to store <strong>text or numbers</strong> =E2=86=92 use <cod=
e>String</code>, <code>int</code>, etc.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-Literals">Literals</h2>
<p>In Java, a <strong>literal</strong> is a <strong>fixed value</strong> th=
at you directly write in your code. It represents a constant value that doe=
sn=E2=80=99t change and is assigned to a variable.</p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9TypesofLiteralsinJava:">=F0=9F=94=B9 T=
ypes of Literals in Java:</h3>
<h4 id=3D"CheatSheetJava-1.IntegerLiterals">1. <strong>Integer Literals</st=
rong></h4>
<p>Whole numbers without a decimal point.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int age=
 =3D 25;
long population =3D 8000000000L;
</pre>
</div>
</div>
<ul>
<li>
<p>Can be written in <strong>decimal</strong>, <strong>binary (</strong><co=
de>0b</code><strong>)</strong>, <strong>octal (</strong><code>0</code><stro=
ng>)</strong>, or <strong>hexadecimal (</strong><code>0x</code><strong>)</s=
trong>.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-2.Floating-PointLiterals">2. <strong>Floating-Poin=
t Literals</strong></h4>
<p>Numbers with a decimal point.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">float p=
rice =3D 19.99f;
double pi =3D 3.14159;
</pre>
</div>
</div>
<ul>
<li>
<p>Use <code>f</code> or <code>F</code> for <code>float</code>, and <code>d=
</code> or <code>D</code> (optional) for <code>double</code>.</p></li>
</ul>
<p></p>
<h4 id=3D"CheatSheetJava-3.CharacterLiterals">3. <strong>Character Literals=
</strong></h4>
<p>A single character enclosed in single quotes.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char gr=
ade =3D 'A';
char symbol =3D '#';
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p>Can also use <strong>Unicode</strong>: <code>'\u0041'</code> (which is <=
code>'A'</code>)</p></li>
</ul>
<p></p>
<h4 id=3D"CheatSheetJava-4.StringLiterals">4. <strong>String Literals</stro=
ng></h4>
<p>A sequence of characters enclosed in double quotes.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
name =3D "Java";
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-5.BooleanLiterals">5. <strong>Boolean Literals</st=
rong></h4>
<p>Only two possible values: <code>true</code> or <code>false</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">boolean=
 isJavaFun =3D true;
</pre>
</div>
</div>
<p></p>
<h4 id=3D"CheatSheetJava-6.NullLiteral">6. <strong>Null Literal</strong></h=
4>
<p>Represents the absence of an object.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
text =3D null;
</pre>
</div>
</div>
<p></p>
<p>Here's the completed <strong>summary table</strong> that includes Java l=
iteral types, examples, descriptions, and their <strong>default values</str=
ong>:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"ed=
c46b62-a61b-406e-8526-5f93e9d504a6" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Type</strong></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Example</strong></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Description</strong></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Default Value</strong></p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p><code>100</code>, <code>0x1A</code></p></td>
<td class=3D"confluenceTd">
<p>Whole numbers</p></td>
<td class=3D"confluenceTd">
<p><code>0</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Floating</p></td>
<td class=3D"confluenceTd">
<p><code>3.14</code>, <code>2.5f</code></p></td>
<td class=3D"confluenceTd">
<p>Decimal numbers</p></td>
<td class=3D"confluenceTd">
<p><code>0.0</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Character</p></td>
<td class=3D"confluenceTd">
<p><code>'A'</code>, <code>'9'</code></p></td>
<td class=3D"confluenceTd">
<p>Single characters</p></td>
<td class=3D"confluenceTd">
<p><code>'\u0000'</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p><code>"Hello"</code></p></td>
<td class=3D"confluenceTd">
<p>Text</p></td>
<td class=3D"confluenceTd">
<p><code>null</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Boolean</p></td>
<td class=3D"confluenceTd">
<p><code>true</code>, <code>false</code></p></td>
<td class=3D"confluenceTd">
<p>Logical values</p></td>
<td class=3D"confluenceTd">
<p><code>false</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Null</p></td>
<td class=3D"confluenceTd">
<p><code>null</code></p></td>
<td class=3D"confluenceTd">
<p>No object reference</p></td>
<td class=3D"confluenceTd">
<p><code>null</code></p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<p>The following promotions will be performed automatically by the compiler=
:</p>
<p></p><span class=3D"confluence-embedded-file-wrapper image-center-wrapper=
 confluence-embedded-manual-size"><img class=3D"confluence-embedded-image i=
mage-center" alt=3D"image-20250620-083554.png" width=3D"468" loading=3D"laz=
y" src=3D"7ee599634e708cfa6be9d82271c77ac6523de91934942817a198ae755227c3d0"=
 data-image-src=3D"https://rahul-ritesh.atlassian.net/wiki/download/attachm=
ents/27525121/image-20250620-083554.png?version=3D1&amp;modificationDate=3D=
1750408563338&amp;cacheVersion=3D1&amp;api=3Dv2" data-height=3D"218" data-w=
idth=3D"602" data-unresolved-comment-count=3D"0" data-linked-resource-id=3D=
"28770311" data-linked-resource-version=3D"1" data-linked-resource-type=3D"=
attachment" data-linked-resource-default-alias=3D"image-20250620-083554.png=
" data-base-url=3D"https://rahul-ritesh.atlassian.net/wiki" data-linked-res=
ource-content-type=3D"image/png" data-linked-resource-container-id=3D"27525=
121" data-linked-resource-container-version=3D"15" data-media-id=3D"12c3bde=
e-0145-4fa3-a336-c5fe47778763" data-media-type=3D"file" height=3D"169"></sp=
an>
<p></p>
<p></p>
<h2 id=3D"CheatSheetJava-Arrays">Arrays</h2>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>An Array is an indexed collection of fixed number of homogeneous data el=
ements. The main advantage of Array is we can represent multiple values und=
er the same name so that readability of the code can be improved.</p>
<p>But the main limitation of an Array is once an Array is created there is=
 no chance of increasing and decreasing of Array size based on the requirem=
ent. Hence for memory point of view Arrays are not recommended to use. We c=
an resolve this problem by using collections.</p>
</div>
</div>
<p></p>
<p>An <strong>array</strong> in Java is an <strong>indexed collection of a =
fixed number of elements</strong>, all of the <strong>same data type</stron=
g> (homogeneous). The main advantage of using arrays is that they allow us =
to store and manage <strong>multiple values under a single variable name</s=
trong>, which improves the <strong>readability and organization</strong> of=
 the code.</p>
<p>However, arrays have a significant limitation: <strong>their size is fix=
ed once created</strong>. This means you cannot increase or decrease the si=
ze of an array during runtime based on changing requirements. As a result, =
arrays can lead to <strong>inefficient memory usage</strong>=E2=80=94either=
 by wasting space or by running out of room.</p>
<p>To overcome this limitation, Java provides the <strong>Collections Frame=
work</strong>, which includes dynamic data structures like <code>ArrayList<=
/code>, <code>LinkedList</code>, <code>HashSet</code>, and others. These co=
llections can <strong>grow or shrink automatically</strong>, making them mo=
re flexible and memory-efficient for most real-world applications.</p>
<p>Explaination-</p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BAArrays:TheFixed-SizeContainer">=F0=9F=
=A7=BA Arrays: The Fixed-Size Container</h3>
<p>Imagine you have a <strong>box with 10 compartments</strong> to store to=
ys. Once the box is made, you <strong>can=E2=80=99t add more compartments</=
strong> or remove any. That=E2=80=99s how arrays work:</p>
<ul>
<li>
<p><strong>Fixed size</strong>: You must decide the size when you create it=
.</p></li>
<li>
<p><strong>Same type</strong>: All elements must be of the same type (e.g.,=
 all integers).</p></li>
<li>
<p><strong>Efficient</strong>: Fast and simple if you know the exact number=
 of elements.</p></li>
</ul>
<p>But what if:</p>
<ul>
<li>
<p>You don=E2=80=99t know how many toys you'll have?</p></li>
<li>
<p>You want to add or remove toys frequently?</p></li>
</ul>
<p>Then arrays become <strong>inflexible</strong> and <strong>waste memory<=
/strong> if you overestimate the size.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=B0Collections:TheFlexibleToolbox">=F0=9F=
=A7=B0 Collections: The Flexible Toolbox</h3>
<p>Java provides <strong>Collections Framework</strong> to solve this probl=
em. Think of collections like <strong>expandable storage</strong>=E2=80=94y=
ou can add or remove items as needed.</p>
<p>Some common collection types:</p>
<ul>
<li>
<p><strong>ArrayList</strong> =E2=80=93 like a resizable array.</p></li>
<li>
<p><strong>LinkedList</strong> =E2=80=93 good for frequent insertions/delet=
ions.</p></li>
<li>
<p><strong>HashSet</strong> =E2=80=93 stores unique items.</p></li>
<li>
<p><strong>HashMap</strong> =E2=80=93 stores key-value pairs.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=84ArrayvsArrayListExample">=F0=9F=94=84 =
Array vs ArrayList Example</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">// Arra=
y (fixed size)
int[] numbers =3D new int[3];
numbers[0] =3D 10;
numbers[1] =3D 20;
numbers[2] =3D 30;
// Can't add more than 3 elements

// ArrayList (dynamic size)
import java.util.ArrayList;
ArrayList&lt;Integer&gt; list =3D new ArrayList&lt;&gt;();
list.add(10);
list.add(20);
list.add(30);
list.add(40); // No problem!
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=85WhyCollectionsAreBetterforManyUseCases">=
=E2=9C=85 Why Collections Are Better for Many Use Cases</h3>
<ul>
<li>
<p><strong>Dynamic size</strong>: Grows or shrinks as needed.</p></li>
<li>
<p><strong>Built-in methods</strong>: Easy to sort, search, add, remove, et=
c.</p></li>
<li>
<p><strong>Memory efficient</strong>: Uses only as much memory as needed.</=
p></li>
</ul>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BAImagineanArrayLikeanEggCarton">=F0=9F=
=A7=BA Imagine an Array Like an Egg Carton</h3>
<p>Think of an <strong>array</strong> like an <strong>egg carton</strong>. =
An egg carton has a fixed number of slots, and each slot can hold one egg. =
Similarly:</p>
<ul>
<li>
<p>An <strong>array</strong> is a container that holds a <strong>fixed numb=
er of items</strong>.</p></li>
<li>
<p>Each item is stored in a <strong>specific position</strong>, starting fr=
om position <strong>0</strong> (not 1!).</p></li>
<li>
<p>All the items in the array must be of the <strong>same type</strong> (li=
ke all eggs, or all apples).</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0InJavaTerms">=F0=9F=A7=A0 In Java Term=
s</h3>
<p>Here=E2=80=99s how that looks in Java:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D new int[5];
</pre>
</div>
</div>
<p>This means:</p>
<ul>
<li>
<p>You're creating an array called <code>numbers</code>.</p></li>
<li>
<p>It can hold <strong>5 integers</strong>.</p></li>
<li>
<p>All the values are initially set to <code>0</code>.</p></li>
</ul>
<p>You can then put values in it like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">numbers=
[0] =3D 10;
numbers[1] =3D 20;
numbers[2] =3D 30;
</pre>
</div>
</div>
<p>And get values like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(numbers[1]); // prints 20
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=91KeyPointstoRemember">=F0=9F=94=91 Key =
Points to Remember</h3>
<ul>
<li>
<p>Arrays are <strong>fixed in size</strong> once created.</p></li>
<li>
<p>Indexing starts at <strong>0</strong>.</p></li>
<li>
<p>All elements must be of the <strong>same type</strong> (e.g., all <code>=
int</code>, all <code>String</code>, etc.).</p></li>
<li>
<p>You can <strong>loop through</strong> arrays to access or modify each it=
em.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-ArrayDeclaration">Array Declaration</h2>
<p>Here=E2=80=99s how you can <strong>declare arrays</strong> in Java for <=
strong>one-dimensional (1D)</strong>, <strong>two-dimensional (2D)</strong>=
, and <strong>three-dimensional (3D)</strong> arrays:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8F1.One-DimensionalArray(1D)">=F0=9F=93=
=8F 1. One-Dimensional Array (1D)</h3>
<p>A 1D array is like a simple list of values.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] o=
neD =3D new int[5]; // Declaration with size
int[] oneDValues =3D {10, 20, 30, 40, 50}; // Declaration with values
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AE2.Two-DimensionalArray(2D)">=F0=9F=A7=
=AE 2. Two-Dimensional Array (2D)</h3>
<p>A 2D array is like a table or matrix (rows and columns).</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 twoD =3D new int[3][4]; // 3 rows, 4 columns
int[][] twoDValues =3D {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};
</pre>
</div>
</div>
<p></p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=8A3.Three-DimensionalArray(3D)">=F0=9F=
=A7=8A 3. Three-Dimensional Array (3D)</h3>
<p>A 3D array is like a cube or a collection of 2D arrays.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
[] threeD =3D new int[2][3][4]; // 2 blocks, 3 rows, 4 columns
int[][][] threeDValues =3D {
    {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12}
    },
    {
        {13, 14, 15, 16},
        {17, 18, 19, 20},
        {21, 22, 23, 24}
    }
};
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0SummaryTable">=F0=9F=A7=A0 Summary Tab=
le</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"82=
2a50ea-500e-4fe9-97aa-57cf5de0e0ba" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Syntax</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>1D</p></td>
<td class=3D"confluenceTd">
<p><code>int[] arr =3D new int[5];</code></p></td>
<td class=3D"confluenceTd">
<p>A single row of 5 elements</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>2D</p></td>
<td class=3D"confluenceTd">
<p><code>int[][] arr =3D new int[3][4];</code></p></td>
<td class=3D"confluenceTd">
<p>3 rows and 4 columns</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>3D</p></td>
<td class=3D"confluenceTd">
<p><code>int[][][] arr =3D new int[2][3][4];</code></p></td>
<td class=3D"confluenceTd">
<p>2 blocks of 3x4 matrices</p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8F1.AccessingElementsina1DArray">=F0=9F=
=93=8F 1. Accessing Elements in a 1D Array</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] o=
neD =3D {10, 20, 30, 40, 50};

// Access the first element
System.out.println(oneD[0]); // Output: 10

// Access the third element
System.out.println(oneD[2]); // Output: 30
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AE2.AccessingElementsina2DArray">=F0=9F=
=A7=AE 2. Accessing Elements in a 2D Array</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 twoD =3D {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

// Access element at row 0, column 1
System.out.println(twoD[0][1]); // Output: 2

// Access element at row 2, column 2
System.out.println(twoD[2][2]); // Output: 9
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=8A3.AccessingElementsina3DArray">=F0=9F=
=A7=8A 3. Accessing Elements in a 3D Array</h3>
<p></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
[] threeD =3D {
    {
        {1, 2},
        {3, 4}
    },
    {
        {5, 6},
        {7, 8}
    }
};

// Access element in block 0, row 1, column 1
System.out.println(threeD[0][1][1]); // Output: 4

// Access element in block 1, row 0, column 0
System.out.println(threeD[1][0][0]); // Output: 5
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Tip:">=F0=9F=A7=A0 Tip:</h3>
<ul>
<li>
<p>Indexing always starts from <strong>0</strong>.</p></li>
<li>
<p>For 2D: <code>array[row][column]</code></p></li>
<li>
<p>For 3D: <code>array[block][row][column]</code></p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-ArrayConstruction">Array Construction</h2>
<p>Every Array in java is an object, hence we can create an Array using new=
 operator</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D new int[5];</pre>
</div>
</div>
<p>For every Array type corresponding classes are available but these class=
es are not applicable for programmer level.</p>
<p></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Java <strong>automatically creates a special class</strong> behind the s=
cenes to represent that array type. For example:</p>
<ul>
<li>
<p><code>int[]</code> is actually an object of a class that Java internally=
 creates.</p></li>
<li>
<p>Similarly, <code>String[]</code> is also an object of a special class.</=
p></li>
</ul>
<p>These classes are <strong>not visible or accessible</strong> to you as a=
 programmer. You <strong>can=E2=80=99t import them</strong>, extend them, o=
r create them manually. They are <strong>generated by the Java compiler</st=
rong> and are used internally by the JVM (Java Virtual Machine) to manage a=
rray behavior.</p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExample:">=F0=9F=94=8D Example:</h3>
<p>You can see that arrays are objects by doing this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D new int[3];
System.out.println(arr.getClass().getName()); // Output: [I
</pre>
</div>
</div>
</div>
</div>
<ul>
<li>
<p><code>[I</code> means it's an array of integers.</p></li>
<li>
<p><code>[Ljava.lang.String;</code> would mean an array of <code>String</co=
de>.</p></li>
</ul>
<p>These are <strong>internal class names</strong> used by the JVM.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=9A=ABWhyNotforProgrammers?">=F0=9F=9A=AB Wh=
y Not for Programmers?</h3>
<ul>
<li>
<p>These classes are <strong>not documented</strong> or designed for direct=
 use.</p></li>
<li>
<p>You <strong>can=E2=80=99t create</strong> or <strong>extend</strong> the=
m like regular classes.</p></li>
<li>
<p>You just use the array syntax (<code>[]</code>) and Java handles the res=
t.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Summary:.1">=E2=9C=85 Summary:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"eb=
8e573e-cd85-4d0e-86e8-9cb3816e0bf1" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Concept</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Explanation</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Array types</p></td>
<td class=3D"confluenceTd">
<p>Internally represented as special classes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Who creates them?</p></td>
<td class=3D"confluenceTd">
<p>The Java compiler</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Can programmers use them directly?</p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C No</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Are arrays objects?</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes, they inherit from <code>Object</code></p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CArraySizeRulesinJava(RephrasedwithExam=
ples)">=F0=9F=93=8C Array Size Rules in Java (Rephrased with Examples)</h3>
<ol start=3D"1">
<li>
<p><strong>Array Size Must Be Specified at Creation</strong></p>
<p>When you create an array in Java, you <strong>must specify its size</str=
ong>. If you don=E2=80=99t, the compiler will throw an error.</p>
<p>=E2=9C=85 Valid:</p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D new int[5]; // Size is specified
</pre>
</div>
</div>
<p></p>
<p>=E2=9D=8C Invalid:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D new int[]; // =E2=9D=8C Compile-time error: size not specified
</pre>
</div>
</div>
<p></p>
<ol start=3D"2">
<li>
<p><strong>Zero-Length Arrays Are Allowed</strong></p>
<p>Java allows you to create an array with size <code>0</code>. This is per=
fectly legal and sometimes useful.</p>
<p>=E2=9C=85 Example:</p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] e=
mptyArr =3D new int[0];
System.out.println(emptyArr.length); // Output: 0
</pre>
</div>
</div>
<p></p>
<ol start=3D"3">
<li>
<p><strong>Negative Array Size Causes Runtime Exception</strong></p>
<p>If you try to create an array with a <strong>negative size</strong>, Jav=
a will compile the code, but throw a <code>NegativeArraySizeException</code=
> at runtime.</p>
<p>=E2=9D=8C Example:</p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D new int[-3]; // Compiles fine, but throws NegativeArraySizeException=
 at runtime
</pre>
</div>
</div>
<p></p>
<ol start=3D"4">
<li>
<p><strong>Allowed Data Types for Array Size</strong></p>
<p>You can use the following data types to specify array size:</p>
<ul>
<li>
<p><code>byte</code></p></li>
<li>
<p><code>short</code></p></li>
<li>
<p><code>int</code></p></li>
<li>
<p><code>char</code></p></li>
</ul>
<p>=E2=9C=85 Valid:</p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char si=
ze =3D 4;
int[] arr =3D new int[size]; // Works fine
</pre>
</div>
</div>
<p></p>
<p>=E2=9D=8C Invalid:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">long si=
ze =3D 5;
int[] arr =3D new int[size]; // =E2=9D=8C Compile-time error: incompatible =
types
</pre>
</div>
</div>
<p><strong>=E2=9C=85 Allowed Data Types for Array Size</strong></p>
<p>You can use <code>byte</code>, <code>short</code>, <code>int</code>, or =
<code>char</code> to specify array size. Using other types like <code>long<=
/code>, <code>float</code>, or <code>double</code> causes a compile-time er=
ror.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char si=
ze =3D 4;
int[] arr =3D new int[size]; // =E2=9C=85 Valid

long sizeLong =3D 5;
int[] arr2 =3D new int[sizeLong]; // =E2=9D=8C Compile-time error
</pre>
</div>
</div>
<ol start=3D"5">
<li>
<p><strong>=E2=9A=A0=EF=B8=8F Maximum Array Size</strong></p>
<p>The maximum size of an array in Java depends on the <strong>JVM and avai=
lable memory</strong>, but technically:</p>
<ul>
<li>
<p>The maximum index is <code>Integer.MAX_VALUE</code><strong> (2,147,483,6=
47)</strong>.</p></li>
<li>
<p>So the maximum array size is <strong>a little less than 2^31 elements</s=
trong>.</p></li>
<li>
<p>In practice, the actual limit is <strong>lower</strong> due to memory ov=
erhead and JVM limitations.</p></li>
</ul></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] h=
ugeArray =3D new int[Integer.MAX_VALUE]; // =E2=9A=A0=EF=B8=8F May throw Ou=
tOfMemoryError
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85SummaryTable">=E2=9C=85 Summary Table</h3=
>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"f1=
78a814-a7a6-4c7d-9d97-e58e66c24c96" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Rule</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Valid?</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Size must be specified</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Required</p></td>
<td class=3D"confluenceTd">
<p><code>new int[5]</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Zero size</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Allowed</p></td>
<td class=3D"confluenceTd">
<p><code>new int[0]</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Negative size</p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C Runtime error</p></td>
<td class=3D"confluenceTd">
<p><code>new int[-1]</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Allowed types: byte, short, int, char</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Valid</p></td>
<td class=3D"confluenceTd">
<p><code>new int['A']</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Other types (long, float, etc.)</p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C Compile-time error</p></td>
<td class=3D"confluenceTd">
<p><code>new int[5L]</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Max size</p></td>
<td class=3D"confluenceTd">
<p>=E2=9A=A0=EF=B8=8F Limited by memory</p></td>
<td class=3D"confluenceTd">
<p><code>new int[Integer.MAX_VALUE]</code></p></td>
</tr>
</tbody>
</table>
</div>
<h2 id=3D"CheatSheetJava-Creationof2DArrays">Creation of 2D Arrays</h2>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:HowJavaImplementsMultidimensio=
nalArrays">=F0=9F=A7=A0 Concept: How Java Implements Multidimensional Array=
s</h3>
<p>In Java, <strong>multidimensional arrays are not implemented as true mat=
rices</strong> (like in languages such as C or Fortran). Instead, Java uses=
 the concept of <strong>"arrays of arrays."</strong></p><span class=3D"conf=
luence-embedded-file-wrapper image-center-wrapper confluence-embedded-manua=
l-size"><img class=3D"confluence-embedded-image image-center" alt=3D"image-=
20250619-153300.png" width=3D"468" loading=3D"lazy" src=3D"a230f21414f0a9a4=
cb5e23291530ac56a34abbc023a196e593ed66d2bcb29d01" data-image-src=3D"https:/=
/rahul-ritesh.atlassian.net/wiki/download/attachments/27525121/image-202506=
19-153300.png?version=3D1&amp;modificationDate=3D1750347184633&amp;cacheVer=
sion=3D1&amp;api=3Dv2" data-height=3D"314" data-width=3D"782" data-unresolv=
ed-comment-count=3D"0" data-linked-resource-id=3D"28377123" data-linked-res=
ource-version=3D"1" data-linked-resource-type=3D"attachment" data-linked-re=
source-default-alias=3D"image-20250619-153300.png" data-base-url=3D"https:/=
/rahul-ritesh.atlassian.net/wiki" data-linked-resource-content-type=3D"imag=
e/png" data-linked-resource-container-id=3D"27525121" data-linked-resource-=
container-version=3D"15" data-media-id=3D"73f50baa-efff-4107-b9b2-fd75b2c99=
103" data-media-type=3D"file" height=3D"187"></span>
<p></p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=A6WhatDoes&quot;ArrayofArrays&quot;Mean?=
">=F0=9F=93=A6 What Does "Array of Arrays" Mean?</h3>
<p>Think of a <strong>2D array</strong> in Java like a <strong>bookshelf</s=
trong>:</p>
<ul>
<li>
<p>The bookshelf (<code>int[][]</code>) holds <strong>rows</strong>.</p></l=
i>
<li>
<p>Each row is itself a <strong>1D array</strong> (<code>int[]</code>).</p>=
</li>
<li>
<p>These rows can be of <strong>different lengths</strong> =E2=80=94 they d=
on=E2=80=99t have to be uniform.</p></li>
</ul>
<p>=E2=9C=85 Example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 jaggedArray =3D {
    {1, 2, 3},
    {4, 5},
    {6}
};
</pre>
</div>
</div>
<p></p>
<p>This is called a <strong>jagged array</strong> =E2=80=94 each row can ha=
ve a different number of columns.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Advantage:BetterMemoryUtilization">=E2=9C=
=85 Advantage: Better Memory Utilization</h3>
<p>Because Java allows each row to be a separate array:</p>
<ul>
<li>
<p>You <strong>only allocate memory</strong> for what you need.</p></li>
<li>
<p>You <strong>don=E2=80=99t waste space</strong> on unused columns in rows=
.</p></li>
<li>
<p>This is especially useful when dealing with <strong>sparse data</strong>=
 (lots of empty or unused cells).</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DBehindtheScenes">=F0=9F=94=8D Behind t=
he Scenes</h3>
<p>When you write:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 matrix =3D new int[3][4];
</pre>
</div>
</div>
<p></p>
<p>Java actually creates:</p>
<ul>
<li>
<p>An array of 3 elements (<code>int[][]</code>)</p></li>
<li>
<p>Each element is a reference to a separate <code>int[4]</code> array</p><=
/li>
</ul>
<p>So it's like:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">matrix[=
0] =E2=86=92 int[4]
matrix[1] =E2=86=92 int[4]
matrix[2] =E2=86=92 int[4]</pre>
</div>
</div>
<p>But you could also do:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 jagged =3D new int[3][];
jagged[0] =3D new int[2];
jagged[1] =3D new int[4];
jagged[2] =3D new int[1];
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Summary">=F0=9F=A7=A0 Summary</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"c9=
8a7e89-69d7-414b-ab7f-a7a4367de5ee" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Java's Approach</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Implementation</p></td>
<td class=3D"confluenceTd">
<p>Array of arrays</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Flexibility</p></td>
<td class=3D"confluenceTd">
<p>Rows can have different lengths</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Memory usage</p></td>
<td class=3D"confluenceTd">
<p>More efficient, especially for sparse data</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Matrix-like behavior</p></td>
<td class=3D"confluenceTd">
<p>Can be simulated, but not enforced</p></td>
</tr>
</tbody>
</table>
</div>
<h2 id=3D"CheatSheetJava-Creationof1DArray">Creation of 1D Array</h2>
<p>Here's how you can <strong>create a 1D array</strong> in Java, step by s=
tep:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=851.Declarationofa1DArray">=E2=9C=85 1. <st=
rong>Declaration of a 1D Array</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers;
</pre>
</div>
</div>
<p></p>
<p>This declares a variable <code>numbers</code> that can hold a 1D array o=
f integers.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=852.InitializationwithSize">=E2=9C=85 2. <s=
trong>Initialization with Size</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">numbers=
 =3D new int[5];
</pre>
</div>
</div>
<p></p>
<p></p>
<p>Array</p>
<p>Here's how you can <strong>create a 1D array</strong> in Java, step by s=
tep:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=851.Declarationofa1DArray.1">=E2=9C=85 1. <=
strong>Declaration of a 1D Array</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers;
</pre>
</div>
</div>
<p></p>
<p>This declares a variable <code>numbers</code> that can hold a 1D array o=
f integers.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=852.InitializationwithSize.1">=E2=9C=85 2. =
<strong>Initialization with Size</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">numbers=
 =3D new int[5];
</pre>
</div>
</div>
<p></p>
<p>This creates an array of size 5. All elements are automatically initiali=
zed to <code>0</code>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=853.Declaration+InitializationinOneLine">=
=E2=9C=85 3. <strong>Declaration + Initialization in One Line</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D new int[5];
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=854.InitializationwithValues">=E2=9C=85 4. =
<strong>Initialization with Values</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D {10, 20, 30, 40, 50};
</pre>
</div>
</div>
<p></p>
<p>This creates an array with 5 elements and assigns values directly.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=855.AccessingElements">=E2=9C=85 5. <strong=
>Accessing Elements</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(numbers[2]); // Output: 30
</pre>
</div>
</div>
<p></p>
<p>This accesses the element at index 2 (third element).</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=856.LoopingThrougha1DArray">=E2=9C=85 6. <s=
trong>Looping Through a 1D Array</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">for (in=
t i =3D 0; i &lt; numbers.length; i++) {
    System.out.println("Element at index " + i + ": " + numbers[i]);
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Summary.1">=F0=9F=A7=A0 Summary</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"40=
f40190-2779-4761-8e4b-ea3c0fb8b204" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Operation</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Syntax</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Declare</p></td>
<td class=3D"confluenceTd">
<p><code>int[] arr;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Initialize</p></td>
<td class=3D"confluenceTd">
<p><code>arr =3D new int[5];</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>With values</p></td>
<td class=3D"confluenceTd">
<p><code>int[] arr =3D {1, 2, 3};</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Access</p></td>
<td class=3D"confluenceTd">
<p><code>arr[0]</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Length</p></td>
<td class=3D"confluenceTd">
<p><code>arr.length</code></p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<h2 id=3D"CheatSheetJava-Creationof2DArray">Creation of 2D Array</h2>
<p>Here's how you can <strong>create a 2D array in Java</strong>, step by s=
tep:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=851.Declarationofa2DArray">=E2=9C=85 1. <st=
rong>Declaration of a 2D Array</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 matrix;
</pre>
</div>
</div>
<p>This declares a variable <code>matrix</code> that can hold a 2D array of=
 integers.</p>
<h3 id=3D"CheatSheetJava-=E2=9C=852.InitializationwithSize.2">=E2=9C=85 2. =
<strong>Initialization with Size</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">matrix =
=3D new int[3][4];
</pre>
</div>
</div>
<p></p>
<p>This creates a 2D array with:</p>
<ul>
<li>
<p><strong>3 rows</strong></p></li>
<li>
<p><strong>4 columns</strong></p></li>
</ul>
<p>Each element is automatically initialized to <code>0</code>.</p>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=853.Declaration+InitializationinOneLine.1">=
=E2=9C=85 3. <strong>Declaration + Initialization in One Line</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 matrix =3D new int[3][4];
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=E2=9C=854.InitializationwithValues.1">=E2=9C=85 4=
. <strong>Initialization with Values</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
 matrix =3D {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};
</pre>
</div>
</div>
<p>This creates a 3x4 matrix with predefined values.</p>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=855.AccessingElements.1">=E2=9C=85 5. <stro=
ng>Accessing Elements</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(matrix[1][2]); // Output: 7
</pre>
</div>
</div>
<p></p>
<p>This accesses the element in <strong>row 1, column 2</strong> (remember,=
 indexing starts at 0).</p>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=856.LoopingThrougha2DArray">=E2=9C=85 6. <s=
trong>Looping Through a 2D Array</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">for (in=
t i =3D 0; i &lt; matrix.length; i++) {
    for (int j =3D 0; j &lt; matrix[i].length; j++) {
        System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
}
</pre>
</div>
</div>
<p></p>
<p>This prints all elements in a matrix format.</p>
<p></p>
<h2 id=3D"CheatSheetJava-Creationof3DArray">Creation of 3D Array</h2>
<p>Creating a <strong>3D array in Java</strong> is like creating a cube of =
data =E2=80=94 an array of arrays of arrays. Here's how you can <strong>dec=
lare, initialize, and access</strong> a 3D array:</p><span class=3D"conflue=
nce-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-s=
ize"><img class=3D"confluence-embedded-image image-center" alt=3D"image-202=
50619-160642.png" width=3D"468" loading=3D"lazy" src=3D"e4626df387c2f1c095d=
6ba9e80b8fcb6a96ab8d88503ad3106062dd3553be1bd" data-image-src=3D"https://ra=
hul-ritesh.atlassian.net/wiki/download/attachments/27525121/image-20250619-=
160642.png?version=3D1&amp;modificationDate=3D1750349209230&amp;cacheVersio=
n=3D1&amp;api=3Dv2" data-height=3D"327" data-width=3D"1169" data-unresolved=
-comment-count=3D"0" data-linked-resource-id=3D"28311605" data-linked-resou=
rce-version=3D"1" data-linked-resource-type=3D"attachment" data-linked-reso=
urce-default-alias=3D"image-20250619-160642.png" data-base-url=3D"https://r=
ahul-ritesh.atlassian.net/wiki" data-linked-resource-content-type=3D"image/=
png" data-linked-resource-container-id=3D"27525121" data-linked-resource-co=
ntainer-version=3D"15" data-media-id=3D"43d1b13a-0b72-4109-8827-9dbbc242b22=
8" data-media-type=3D"file" height=3D"130"></span>
<p></p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=851.Declarationofa3DArray">=E2=9C=85 1. Dec=
laration of a 3D Array</h3>
<p></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
[] threeDArray;
</pre>
</div>
</div>
<p>This declares a 3D array variable but doesn't allocate memory yet.</p>
<h3 id=3D"CheatSheetJava-=E2=9C=852.InitializationwithSize.3">=E2=9C=85 2. =
Initialization with Size</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">threeDA=
rray =3D new int[2][3][4];
</pre>
</div>
</div>
<p></p>
<p>This creates a 3D array with:</p>
<ul>
<li>
<p>2 blocks (depth)</p></li>
<li>
<p>3 rows per block</p></li>
<li>
<p>4 columns per row</p></li>
</ul>
<h3 id=3D"CheatSheetJava-=E2=9C=853.Declaration+InitializationinOneLine.2">=
=E2=9C=85 3. Declaration + Initialization in One Line</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
[] threeDArray =3D new int[2][3][4];
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=854.InitializationwithValues.2">=E2=9C=85 4=
. Initialization with Values</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[][]=
[] threeDArray =3D {
    {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12}
    },
    {
        {13, 14, 15, 16},
        {17, 18, 19, 20},
        {21, 22, 23, 24}
    }
};
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=855.AccessingElements.2">=E2=9C=85 5. Acces=
sing Elements</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(threeDArray[1][2][3]); // Output: 24
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=856.LoopingThrougha3DArray">=E2=9C=85 6. <s=
trong>Looping Through a 3D Array</strong></h3>
<p>Looping through a <strong>3D array</strong> in Java involves using <stro=
ng>three nested </strong><code>for</code><strong> loops</strong> =E2=80=94 =
one for each dimension: blocks, rows, and columns.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class ThreeDArrayLoop {
    public static void main(String[] args) {
        int[][][] threeDArray =3D {
            {
                {1, 2},
                {3, 4}
            },
            {
                {5, 6},
                {7, 8}
            }
        };

        for (int i =3D 0; i &lt; threeDArray.length; i++) { // Block level
            for (int j =3D 0; j &lt; threeDArray[i].length; j++) { // Row l=
evel
                for (int k =3D 0; k &lt; threeDArray[i][j].length; k++) { /=
/ Column level
                    System.out.println("Element at [" + i + "][" + j + "]["=
 + k + "] =3D " + threeDArray[i][j][k]);
                }
            }
        }
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0OutputExplanation">=F0=9F=A7=A0 Output=
 Explanation</h3>
<p>This will print each element along with its position in the 3D array, li=
ke:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Element=
 at [0][0][0] =3D 1
Element at [0][0][1] =3D 2
Element at [0][1][0] =3D 3
Element at [0][1][1] =3D 4
Element at [1][0][0] =3D 5
Element at [1][0][1] =3D 6
Element at [1][1][0] =3D 7
Element at [1][1][1] =3D 8</pre>
</div>
</div>
<p></p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"08=
31e49b-6bb7-441c-a110-a1c0882f83ea" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Operation</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Syntax</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Declare</p></td>
<td class=3D"confluenceTd">
<p><code>int[][][] arr;</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Initialize</p></td>
<td class=3D"confluenceTd">
<p><code>arr =3D new int[2][3][4];</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Access element</p></td>
<td class=3D"confluenceTd">
<p><code>arr[block][row][column]</code></p></td>
</tr>
</tbody>
</table>
</div>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;=
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt=
;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&g=
t;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&=
gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;=
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p>
<p>Great question!</p>
<h3 id=3D"CheatSheetJava-=F0=9F=91=87IsArrayaClassinJava?">=F0=9F=91=87 Is =
Array a Class in Java?</h3>
<p>Technically speaking, <strong>arrays in Java are not classes that you de=
fine</strong>, but they <strong>are objects</strong> and are treated as <st=
rong>instances of special classes</strong> created by the Java compiler.</p=
>
<p>Here=E2=80=99s what that means:</p>
<ul>
<li>
<p>When you create an array like this:</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D new int[5];
</pre>
</div>
</div>
<ul>
<li>
<p>Java internally creates an <strong>object</strong> of a special array cl=
ass (e.g., <code>int[]</code> is a class type).</p></li>
<li>
<p>So yes, <strong>every array in Java is an object</strong>, and it <stron=
g>inherits from the </strong><code>Object</code><strong> class</strong>, ju=
st like any other class.</p></li>
<li>
<p>You can even do things like:</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(numbers.getClass().getName()); // prints [I for int[]
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85Summary">=E2=9C=85 Summary</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"9c=
83c3e0-f913-4c0d-8ea2-a4478a106220" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Array</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Is it a class?</p></td>
<td class=3D"confluenceTd">
<p>Not a user-defined class, but <strong>internally treated as a class</str=
ong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Is it an object?</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Inherits from <code>Object</code>?</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Can you use methods like <code>.length</code>?</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes, but <code>length</code> is a <strong>field</strong>, not =
a method</p></td>
</tr>
</tbody>
</table>
</div>
<p>In Java, <strong>arrays themselves do not have built-in methods</strong>=
 like objects from the Collections Framework (e.g., <code>ArrayList</code>)=
. However, Java provides a utility class called <code>java.util.Arrays</cod=
e> that offers many useful <strong>static methods</strong> to work with arr=
ays.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=A7CommonlyUsedMethodsfromjava.util.Array=
s">=F0=9F=94=A7 Commonly Used Methods from <code>java.util.Arrays</code></h=
3>
<p>Here are some of the most useful ones:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"78=
c1a3b1-dd0e-4e72-935e-f0b035a77a91" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Method</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.toString(array)</code></p></td>
<td class=3D"confluenceTd">
<p>Converts the array to a readable string format.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.sort(array)</code></p></td>
<td class=3D"confluenceTd">
<p>Sorts the array in ascending order.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.copyOf(array, newLength)</code></p></td>
<td class=3D"confluenceTd">
<p>Copies the array to a new array with the specified length.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.equals(array1, array2)</code></p></td>
<td class=3D"confluenceTd">
<p>Checks if two arrays are equal (same elements in same order).</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.fill(array, value)</code></p></td>
<td class=3D"confluenceTd">
<p>Fills the entire array with the specified value.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.binarySearch(array, key)</code></p></td>
<td class=3D"confluenceTd">
<p>Searches for a value in a <strong>sorted</strong> array using binary sea=
rch.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.asList(array)</code></p></td>
<td class=3D"confluenceTd">
<p>Converts an array to a <code>List</code> (for object arrays only, not pr=
imitives).</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>Arrays.stream(array)</code></p></td>
<td class=3D"confluenceTd">
<p>Converts the array into a stream for functional operations (Java 8+).</p=
></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AAExample">=F0=9F=A7=AA Example</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">import =
java.util.Arrays;

public class ArrayExample {
    public static void main(String[] args) {
        int[] numbers =3D {5, 2, 8, 1};

        Arrays.sort(numbers); // Sort the array
        System.out.println(Arrays.toString(numbers)); // [1, 2, 5, 8]

        int index =3D Arrays.binarySearch(numbers, 5); // Search for 5
        System.out.println("Index of 5: " + index);
    }
}
</pre>
</div>
</div>
<p></p>
<p>Here's a simple <strong>Java cheat sheet program</strong> that demonstra=
tes the most commonly used methods from the <code>Arrays</code> class:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaProgram:ArraysUtilityMethodsDemo">=E2=
=9C=85 Java Program: Arrays Utility Methods Demo</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">import =
java.util.Arrays;

public class ArraysCheatSheet {
    public static void main(String[] args) {
        int[] numbers =3D {5, 2, 8, 1};

        // 1. Print original array
        System.out.println("Original array: " + Arrays.toString(numbers));

        // 2. Sort the array
        Arrays.sort(numbers);
        System.out.println("Sorted array: " + Arrays.toString(numbers));

        // 3. Search for an element (binary search)
        int index =3D Arrays.binarySearch(numbers, 5);
        System.out.println("Index of 5: " + index);

        // 4. Fill the array with a single value
        Arrays.fill(numbers, 9);
        System.out.println("Array after fill: " + Arrays.toString(numbers))=
;

        // 5. Copy the array to a new array with more space
        int[] newArray =3D Arrays.copyOf(numbers, 6);
        System.out.println("Copied array with new size: " + Arrays.toString=
(newArray));

        // 6. Check equality of arrays
        int[] anotherArray =3D {9, 9, 9, 9, 9, 0};
        boolean isEqual =3D Arrays.equals(newArray, anotherArray);
        System.out.println("Are arrays equal? " + isEqual);
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0WhatThisProgramShows:">=F0=9F=A7=A0 Wh=
at This Program Shows:</h3>
<ul>
<li>
<p>How to <strong>print</strong> an array nicely.</p></li>
<li>
<p>How to <strong>sort</strong> an array.</p></li>
<li>
<p>How to <strong>search</strong> for a value.</p></li>
<li>
<p>How to <strong>fill</strong> an array with a value.</p></li>
<li>
<p>How to <strong>copy</strong> an array to a new size.</p></li>
<li>
<p>How to <strong>compare</strong> two arrays.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-length()Vslength">length() Vs length</h2>
<p>In Java, <code>length()</code> and <code>length</code> are used to deter=
mine the size of different types of data structures, but they apply to diff=
erent types and are used differently:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9length(withoutparentheses)">=F0=9F=94=
=B9 <code>length</code> (without parentheses)</h3>
<ul>
<li>
<p><strong>Used with arrays</strong></p></li>
<li>
<p>It is a <strong>field</strong> (not a method), so you <strong>don=E2=80=
=99t use parentheses</strong>.</p></li>
<li>
<p>Returns the number of elements in the array.</p></li>
</ul>
<p><strong>Example:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D {1, 2, 3, 4};
System.out.println(numbers.length); // Output: 4
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9length(forarrays)">=F0=9F=94=B9 <code>=
length</code> (for arrays)</h3>
<ul>
<li>
<p><strong>Access Modifier:</strong> <code>public final</code></p></li>
<li>
<p>It is a <strong>public final field</strong> of an array object.</p></li>
<li>
<p>You can access it directly from any class, but you <strong>cannot modify=
</strong> it.</p></li>
</ul>
<p><strong>Example:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D new int[5];
System.out.println(arr.length); // Accessible because it's public
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p>You <strong>cannot</strong> do something like <code>arr.length =3D 10;</=
code> =E2=80=94 it's <strong>final</strong>.</p></li>
</ul>
<p></p>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9length()(withparentheses)">=F0=9F=94=
=B9 <code>length()</code> (with parentheses)</h3>
<ul>
<li>
<p><strong>Used with Strings</strong></p></li>
<li>
<p>It is a <strong>method</strong>, so you <strong>must use parentheses</st=
rong>.</p></li>
<li>
<p>Returns the number of characters in the string.</p></li>
</ul>
<p></p>
<p><strong>Example:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
text =3D "Hello";
System.out.println(text.length()); // Output: 5
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9length()(forStrings)">=F0=9F=94=B9 <co=
de>length()</code> (for Strings)</h3>
<ul>
<li>
<p><strong>Access Modifier:</strong> <code>public</code></p></li>
<li>
<p>It is a <strong>public method</strong> of the <code>String</code> class.=
</p></li>
<li>
<p>Defined in the <code>java.lang.String</code> class as:</p>
<p>public int length()</p></li>
</ul>
<p><strong>Example</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
s =3D "Java";
System.out.println(s.length()); // Accessible because it's public
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-SummaryTable:">Summary Table:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"fc=
de9e79-d2ea-489e-af92-8111faad982b" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Syntax</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Applies To</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Returns</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>length</code></p></td>
<td class=3D"confluenceTd">
<p><code>array.length</code></p></td>
<td class=3D"confluenceTd">
<p>Arrays</p></td>
<td class=3D"confluenceTd">
<p>Number of elements</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>length()</code></p></td>
<td class=3D"confluenceTd">
<p><code>string.length()</code></p></td>
<td class=3D"confluenceTd">
<p>Strings</p></td>
<td class=3D"confluenceTd">
<p>Number of characters</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"CheatSheetJava-SummaryTable:.1">Summary Table:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"9d=
54fa5d-097e-4e5f-8bd0-d650b0da405b" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Applies To</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Access Modifier</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Modifiable</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>length</code></p></td>
<td class=3D"confluenceTd">
<p>Arrays</p></td>
<td class=3D"confluenceTd">
<p>Field</p></td>
<td class=3D"confluenceTd">
<p><code>public final</code></p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C No</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>length()</code></p></td>
<td class=3D"confluenceTd">
<p>Strings</p></td>
<td class=3D"confluenceTd">
<p>Method</p></td>
<td class=3D"confluenceTd">
<p><code>public</code></p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 N/A (method)</p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<h2 id=3D"CheatSheetJava-AnonymousArrays">Anonymous Arrays</h2>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Imaginethis:">=F0=9F=A7=A0 Imagine thi=
s:</h3>
<p>You=E2=80=99re ordering food, but you don=E2=80=99t want to <strong>save=
 the restaurant=E2=80=99s number</strong> in your contacts =E2=80=94 you ju=
st want to <strong>place the order and be done</strong>.</p>
<p>That=E2=80=99s exactly what an <strong>anonymous array</strong> is in Ja=
va.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Whatisit?">=F0=9F=92=A1 What is it?</h=
3>
<p>An <strong>anonymous array</strong> is an array <strong>without a name</=
strong>. You create it and use it <strong>on the spot</strong>, usually whe=
n you don=E2=80=99t need to reuse it later.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">new int=
[] {1, 2, 3, 4}
</pre>
</div>
</div>
<p></p>
<p>This creates an array of integers with 4 elements =E2=80=94 but <strong>=
no variable name</strong> is assigned to it.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=9B=A0=EF=B8=8FWhereisitused?">=F0=9F=9B=A0=
=EF=B8=8F Where is it used?</h3>
<p>Often used when:</p>
<ul>
<li>
<p>You want to <strong>pass an array directly to a method</strong></p></li>
<li>
<p>You don=E2=80=99t need to <strong>reuse</strong> the array later</p></li=
>
</ul>
<p><strong>Example in a method call:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">printAr=
ray(new int[] {10, 20, 30});
</pre>
</div>
</div>
<p></p>
<p>Here, the array is created and passed to the method <code>printArray()</=
code> =E2=80=94 no need to store it in a variable.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=A6Whyuseanonymousarrays?">=F0=9F=93=A6 W=
hy use anonymous arrays?</h3>
<ul>
<li>
<p>Saves memory (no extra variable)</p></li>
<li>
<p>Cleaner code for one-time use</p></li>
<li>
<p>Useful in quick operations or testing</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BESummary:">=F0=9F=A7=BE Summary:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"4e=
fc6789-fb66-4e4b-914c-cc5b5aa874ff" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Feature</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Named Array</p></td>
<td class=3D"confluenceTd">
<p>Stored in a variable for reuse</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Anonymous Array</p></td>
<td class=3D"confluenceTd">
<p>Created and used immediately</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Syntax</p></td>
<td class=3D"confluenceTd">
<p><code>new type[] {elements}</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Common Use Case</p></td>
<td class=3D"confluenceTd">
<p>Passing to methods directly</p></td>
</tr>
</tbody>
</table>
</div>
<p>Here=E2=80=99s a simple Java code demo that compares a <strong>regular (=
named) array</strong> with an <strong>anonymous array</strong>, so you can =
see how both are used:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85FullCodeExample:">=E2=9C=85 Full Code Exa=
mple:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class ArrayDemo {

    // Method that takes an array and prints its elements
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {

        // =F0=9F=8C=9F Named Array
        int[] namedArray =3D {1, 2, 3, 4, 5};
        System.out.print("Named Array: ");
        printArray(namedArray); // Passing named array

        // =F0=9F=8C=9F Anonymous Array
        System.out.print("Anonymous Array: ");
        printArray(new int[] {10, 20, 30, 40}); // Passing anonymous array =
directly
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Named A=
rray: 1 2 3 4 5=20
Anonymous Array: 10 20 30 40=20
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DKeyTakeaways:">=F0=9F=94=8D Key Takeaw=
ays:</h3>
<ul>
<li>
<p><code>namedArray</code> is declared and can be reused.</p></li>
<li>
<p><code>new int[] {10, 20, 30, 40}</code> is an <strong>anonymous array</s=
trong> =E2=80=94 created and used immediately in the method call.</p></li>
</ul>
<p>Great question! Let's clarify <strong>why you get a compile-time error</=
strong> when you try to specify the <strong>size</strong> of an <strong>ano=
nymous array</strong> in Java.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B4InvalidAnonymousArraySyntax:">=F0=9F=
=94=B4 Invalid Anonymous Array Syntax:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">printAr=
ray(new int[4]{1, 2, 3, 4}); // =E2=9D=8C Compile-time error
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85ValidAnonymousArraySyntax:">=E2=9C=85 Val=
id Anonymous Array Syntax:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">printAr=
ray(new int[]{1, 2, 3, 4}); // =E2=9C=94=EF=B8=8F Correct
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0WhytheErrorHappens:">=F0=9F=A7=A0 Why =
the Error Happens:</h3>
<p>In Java, when you use the <code>new</code> keyword to create an <strong>=
anonymous array</strong>, you must <strong>either</strong>:</p>
<ol start=3D"1">
<li>
<p><strong>Specify the size only</strong> (and initialize later), <strong>o=
r</strong></p></li>
<li>
<p><strong>Provide the values directly</strong> (and let Java infer the siz=
e)</p></li>
</ol>
<p>But you <strong>cannot do both at the same time</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DThinkofitlikethis:">=F0=9F=94=8D Think=
 of it like this:</h3>
<p>You're telling Java:</p>
<blockquote>
<p>"Hey, I want an array of size 4, and here are 4 values."</p>
</blockquote>
<p>Java replies:</p>
<blockquote>
<p>"Wait! If you're giving me the values, I can figure out the size myself.=
 Don't tell me both!"</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85CorrectWays:">=E2=9C=85 Correct Ways:</h3=
>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"cb=
b7589e-2cfa-4721-8b24-842fba981d48" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Syntax</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>new int[4]</code></p></td>
<td class=3D"confluenceTd">
<p>Creates an array of size 4 with default values (0s)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>new int[]{1, 2, 3, 4}</code></p></td>
<td class=3D"confluenceTd">
<p>Creates an array with 4 values (size inferred)</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CIncorrect:">=E2=9D=8C Incorrect:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">new int=
[4]{1, 2, 3, 4} // =E2=9D=8C Not allowed in Java
</pre>
</div>
</div>
<p>This syntax is allowed in <strong>C/C++</strong>, but <strong>not in Jav=
a</strong>.</p>
<p></p>
<h2 id=3D"CheatSheetJava-ArrayElementAssignments">Array Element Assignments=
</h2>
<p><strong>Case 1 </strong></p>
<p><strong><u>For primitive type Arrays as array elements we can provide an=
y type which can be promoted to declared type.</u></strong></p>
<p><strong><u>For int type Arrays the allowed element types are byte, short=
, char, int. If we are providing any other type then we will get compile ti=
me error. </u></strong></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85RephrasedExplanation:">=E2=9C=85 Rephrase=
d Explanation:</h3>
<p>In Java, when initializing a <strong>primitive type array</strong>, you =
can include elements of any type that can be <strong>implicitly promoted</s=
trong> to the array's declared type. This is known as <strong>type promotio=
n</strong>.</p>
<p>For example, in an <code>int[]</code> array, you can include values of t=
ypes:</p>
<ul>
<li>
<p><code>byte</code></p></li>
<li>
<p><code>short</code></p></li>
<li>
<p><code>char</code></p></li>
<li>
<p><code>int</code></p></li>
</ul>
<p>These types are automatically promoted to <code>int</code> without requi=
ring explicit casting.</p>
<p>However, if you try to include values of types like <code>long</code>, <=
code>float</code>, <code>double</code>, or <code>boolean</code>, the compil=
er will throw an error because these types <strong>cannot be implicitly con=
verted</strong> to <code>int</code>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Example:">=F0=9F=92=A1 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class TypePromotionDemo {
    public static void main(String[] args) {
        int[] validArray =3D {10, 'A', (byte)5, (short)20}; // =E2=9C=85 Al=
l valid due to implicit promotion

        // int[] invalidArray =3D {10, 20L};     // =E2=9D=8C Compile-time =
error: long to int
        // int[] invalidArray =3D {10, 3.14f};   // =E2=9D=8C Compile-time =
error: float to int
        // int[] invalidArray =3D {true, false}; // =E2=9D=8C Compile-time =
error: boolean to int
    }
}
</pre>
</div>
</div>
<p>in Java, when you're initializing a <strong>primitive type array</strong=
>, the <strong>element types must be compatible</strong> with the declared =
array type. Let's break this down clearly:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9Concept:TypePromotioninArrays">=F0=9F=
=94=B9 Concept: Type Promotion in Arrays</h3>
<p>Java allows <strong>automatic type promotion</strong> when assigning val=
ues to an array of a <strong>larger primitive type</strong> =E2=80=94 but o=
nly if the promotion is <strong>safe and implicit</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Forint[]arrays,allowedelementtypesare:">=
=E2=9C=85 For <code>int[]</code> arrays, allowed element types are:</h3>
<ul>
<li>
<p><code>byte</code></p></li>
<li>
<p><code>short</code></p></li>
<li>
<p><code>char</code></p></li>
<li>
<p><code>int</code></p></li>
</ul>
<p>These types can be <strong>safely promoted</strong> to <code>int</code> =
without explicit casting.</p>
<p><strong>Example:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D {10, 'A', (byte)5, (short)20}; // =E2=9C=85 All valid
</pre>
</div>
</div>
<ul>
<li>
<p><code>'A'</code> is a <code>char</code> =E2=86=92 promoted to its ASCII =
value (65)</p></li>
<li>
<p><code>(byte)5</code> and <code>(short)20</code> are promoted to <code>in=
t</code></p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CNotAllowed:">=E2=9D=8C Not Allowed:</h3>
<ul>
<li>
<p><code>long</code></p></li>
<li>
<p><code>float</code></p></li>
<li>
<p><code>double</code></p></li>
<li>
<p><code>boolean</code></p></li>
</ul>
<p>These <strong>cannot</strong> be implicitly converted to <code>int</code=
>, so using them in an <code>int[]</code> will cause a <strong>compile-time=
 error</strong>.</p>
<p><strong>Example:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
rr =3D {10, 20L};     // =E2=9D=8C Compile-time error: long to int
int[] arr =3D {10, 3.14f};   // =E2=9D=8C Compile-time error: float to int
int[] arr =3D {true, false}; // =E2=9D=8C Compile-time error: boolean to in=
t
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisMatters:">=F0=9F=94=8D Why This=
 Matters:</h3>
<p>Java is <strong>strongly typed</strong>, and it enforces <strong>type sa=
fety</strong> at compile time. This prevents accidental data loss or unexpe=
cted behavior due to narrowing conversions.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BESummaryTable:">=F0=9F=A7=BE Summary Ta=
ble:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"6c=
93b247-a4ef-4a75-95b7-0aa7c0c31a75" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Array Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Allowed Element Types</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Not Allowed Element Types</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int[]</code></p></td>
<td class=3D"confluenceTd">
<p><code>byte</code>, <code>short</code>, <code>char</code>, <code>int</cod=
e></p></td>
<td class=3D"confluenceTd">
<p><code>long</code>, <code>float</code>, <code>double</code>, <code>boolea=
n</code></p></td>
</tr>
</tbody>
</table>
</div>
<p>Certainly! Here's a clear explanation for <code>float[]</code><strong> a=
rrays</strong> in Java, similar to the one we did for <code>int[]</code> ar=
rays:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85RephrasedExplanationforfloat[]Arrays:">=
=E2=9C=85 Rephrased Explanation for <code>float[]</code> Arrays:</h3>
<p>In Java, when initializing a <code>float[]</code> array, you can include=
 elements of any primitive type that can be <strong>implicitly promoted</st=
rong> to <code>float</code>. This includes:</p>
<ul>
<li>
<p><code>byte</code></p></li>
<li>
<p><code>short</code></p></li>
<li>
<p><code>char</code></p></li>
<li>
<p><code>int</code></p></li>
<li>
<p><code>long</code></p></li>
<li>
<p><code>float</code></p></li>
</ul>
<p>These types can be safely converted to <code>float</code> without requir=
ing explicit casting.</p>
<p>However, if you try to include values of type <code>double</code> or <co=
de>boolean</code>, you'll get a <strong>compile-time error</strong>, becaus=
e:</p>
<ul>
<li>
<p><code>double</code> is a <strong>wider type</strong> than <code>float</c=
ode>, and narrowing conversion is not allowed implicitly.</p></li>
<li>
<p><code>boolean</code> is <strong>not numerically compatible</strong> with=
 any numeric type.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Example:.1">=F0=9F=92=A1 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class FloatArrayDemo {
    public static void main(String[] args) {
        float[] validArray =3D {10, 20L, 'A', (byte)5, (short)15, 3.14f}; /=
/ =E2=9C=85 All valid

        // float[] invalidArray =3D {10.5};     // =E2=9D=8C Compile-time e=
rror: double to float
        // float[] invalidArray =3D {true};     // =E2=9D=8C Compile-time e=
rror: boolean to float
    }
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>10</code>, <code>20L</code>, <code>'A'</code>, <code>(byte)5</code=
>, and <code>(short)15</code> are all promoted to <code>float</code></p></l=
i>
<li>
<p><code>3.14f</code> is already a <code>float</code></p></li>
<li>
<p><code>10.5</code> is a <code>double</code> =E2=86=92 =E2=9D=8C not allow=
ed without casting</p></li>
<li>
<p><code>true</code> is a <code>boolean</code> =E2=86=92 =E2=9D=8C not allo=
wed at all</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BESummaryTableforfloat[]:">=F0=9F=A7=BE =
Summary Table for <code>float[]</code>:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"74=
5389ff-e8d5-4ac7-af92-20c41f14a206" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Allowed Element Types</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Not Allowed Element Types</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>byte</code>, <code>short</code>, <code>char</code>, <code>int</cod=
e>, <code>long</code>, <code>float</code></p></td>
<td class=3D"confluenceTd">
<p><code>double</code>, <code>boolean</code></p></td>
</tr>
</tbody>
</table>
</div><span class=3D"confluence-embedded-file-wrapper image-center-wrapper =
confluence-embedded-manual-size"><img class=3D"confluence-embedded-image im=
age-center" alt=3D"image-20250620-084957.png" width=3D"468" loading=3D"lazy=
" src=3D"88523f142a792a8d2762bc585fc4533c6b4b51e0b4178ca64a4675fc42bf9f19" =
data-image-src=3D"https://rahul-ritesh.atlassian.net/wiki/download/attachme=
nts/27525121/image-20250620-084957.png?version=3D1&amp;modificationDate=3D1=
750409405680&amp;cacheVersion=3D1&amp;api=3Dv2" data-height=3D"225" data-wi=
dth=3D"602" data-unresolved-comment-count=3D"0" data-linked-resource-id=3D"=
28704787" data-linked-resource-version=3D"1" data-linked-resource-type=3D"a=
ttachment" data-linked-resource-default-alias=3D"image-20250620-084957.png"=
 data-base-url=3D"https://rahul-ritesh.atlassian.net/wiki" data-linked-reso=
urce-content-type=3D"image/png" data-linked-resource-container-id=3D"275251=
21" data-linked-resource-container-version=3D"15" data-media-id=3D"73e71654=
-f87c-424e-b0c2-13b73232baf6" data-media-type=3D"file" height=3D"174"></spa=
n>
<p><strong><u>Case 2</u></strong></p>
<p><strong><u>In the case of Object type Arrays, as array elements we can p=
rovide either declared type or its child class objects.</u></strong></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85Explanation:ObjectTypeArraysinJava">=E2=
=9C=85 Explanation: Object Type Arrays in Java</h3>
<p>When you create an array of a <strong>reference type</strong> (like a cl=
ass or interface), Java allows you to store:</p>
<ul>
<li>
<p><strong>Objects of the declared type</strong></p></li>
<li>
<p><strong>Objects of any subclass (child class)</strong> of the declared t=
ype</p></li>
</ul>
<p>This is possible because of <strong>polymorphism</strong> =E2=80=94 a co=
re concept in object-oriented programming that allows a parent class refere=
nce to point to a child class object.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Example:.2">=F0=9F=92=A1 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class A=
nimal {
    void sound() {
        System.out.println("Animal sound");
    }
}

class Dog extends Animal {
    void sound() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    void sound() {
        System.out.println("Cat meows");
    }
}

public class ObjectArrayDemo {
    public static void main(String[] args) {
        Animal[] animals =3D new Animal[3];

        animals[0] =3D new Animal(); // =E2=9C=85 Same type
        animals[1] =3D new Dog();    // =E2=9C=85 Subclass
        animals[2] =3D new Cat();    // =E2=9C=85 Subclass

        for (Animal a : animals) {
            a.sound(); // Polymorphic behavior
        }
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.1">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Animal =
sound
Dog barks
Cat meows
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisWorks:">=F0=9F=94=8D Why This W=
orks:</h3>
<ul>
<li>
<p><code>Animal[]</code> can hold any object that <strong>is-a</strong> <co=
de>Animal</code>.</p></li>
<li>
<p>This includes <code>Animal</code> itself and any of its subclasses like =
<code>Dog</code> and <code>Cat</code>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CNotAllowed:.1">=E2=9D=8C Not Allowed:</h3=
>
<p>You <strong>cannot</strong> store an object that is <strong>not related<=
/strong> to the declared type.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String[=
] strings =3D new String[2];
strings[0] =3D new String("Hello"); // =E2=9C=85
strings[1] =3D new Object();        // =E2=9D=8C Compile-time error: Object=
 is not a String
</pre>
</div>
</div>
<p></p>
<p>Sure! Here's a simple example that demonstrates how to create an array o=
f type <code>Object</code> and store instances of the <code>Number</code> c=
lass and its wrapper subclasses like <code>Integer</code>, <code>Double</co=
de>, and <code>Float</code>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1JavaExample:UsingObject[]withNumberand=
WrapperClasses">=F0=9F=92=A1 Java Example: Using <code>Object[]</code> with=
 Number and Wrapper Classes</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class ObjectArrayExample {
    public static void main(String[] args) {
        // Creating an Object array
        Object[] objArray =3D new Object[4];

        // Storing Number and wrapper class objects
        objArray[0] =3D new Integer(10);   // Integer is a subclass of Numb=
er
        objArray[1] =3D new Double(3.14);  // Double is a subclass of Numbe=
r
        objArray[2] =3D new Float(5.5f);   // Float is a subclass of Number
        objArray[3] =3D new Number() {     // Anonymous subclass of Number
            @Override
            public int intValue() {
                return 0;
            }

            @Override
            public long longValue() {
                return 0L;
            }

            @Override
            public float floatValue() {
                return 0.0f;
            }

            @Override
            public double doubleValue() {
                return 0.0;
            }
        };

        // Printing the class names of stored objects
        for (Object obj : objArray) {
            System.out.println("Stored object of type: " + obj.getClass().g=
etSimpleName());
        }
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.2">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Stored =
object of type: Integer
Stored object of type: Double
Stored object of type: Float
Stored object of type: 1 (anonymous class)
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:.1">=F0=9F=94=8D Explanati=
on:</h3>
<ul>
<li>
<p><code>Object[]</code> can hold <strong>any type of object</strong>, incl=
uding instances of <code>Number</code> and its subclasses.</p></li>
<li>
<p>This is useful when you want to store <strong>heterogeneous objects</str=
ong> in a single array.</p></li>
<li>
<p>The last element is an <strong>anonymous subclass</strong> of <code>Numb=
er</code>, showing that even custom implementations can be stored.</p></li>
</ul>
<p><code>Object =E2=86=92 Number =E2=86=92 Wrapper Classes</code></p>
<p></p>
<p><strong><u>Case 3</u></strong></p>
<p><strong><u>In the case of abstract class type arrays, as array elements =
we can provide its child class objects.</u></strong></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85Explanation:ArraysofAbstractClassType">=
=E2=9C=85 Explanation: Arrays of Abstract Class Type</h3>
<p>In Java, you <strong>cannot create an object</strong> of an <strong>abst=
ract class</strong>, but you <strong>can create an array</strong> of an abs=
tract class type.</p>
<p>Why? Because the array is just a container =E2=80=94 it doesn't create t=
he objects inside it. You can then store <strong>objects of any concrete su=
bclass</strong> of that abstract class in the array.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Thinkofitlikethis:">=F0=9F=92=A1 Think=
 of it like this:</h3>
<p>An abstract class is like a <strong>blueprint</strong>. You can't build =
the blueprint itself, but you can build <strong>houses</strong> (subclasses=
) based on it. The array is like a <strong>parking lot</strong> that can ho=
ld any vehicle built from that blueprint.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AAExample:.1">=F0=9F=A7=AA Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">abstrac=
t class Shape {
    abstract void draw();
}

class Circle extends Shape {
    void draw() {
        System.out.println("Drawing Circle");
    }
}

class Square extends Shape {
    void draw() {
        System.out.println("Drawing Square");
    }
}

public class AbstractArrayDemo {
    public static void main(String[] args) {
        // Creating an array of abstract class type
        Shape[] shapes =3D new Shape[2];

        // Storing subclass objects
        shapes[0] =3D new Circle(); // =E2=9C=85 Circle is a subclass of Sh=
ape
        shapes[1] =3D new Square(); // =E2=9C=85 Square is a subclass of Sh=
ape

        // Calling methods polymorphically
        for (Shape s : shapes) {
            s.draw();
        }
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.3">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Drawing=
 Circle
Drawing Square
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisWorks:.1">=F0=9F=94=8D Why This=
 Works:</h3>
<ul>
<li>
<p>The array is of type <code>Shape[]</code>, which is abstract.</p></li>
<li>
<p>You store <code>Circle</code> and <code>Square</code> objects =E2=80=94 =
both are concrete subclasses of <code>Shape</code>.</p></li>
<li>
<p>At runtime, Java uses <strong>polymorphism</strong> to call the correct =
<code>draw()</code> method.</p></li>
</ul>
<p>Absolutely! Let's look at an example involving an <strong>abstract class=
</strong> and its <strong>wrapper class subclasses</strong> from the <code>=
Number</code> hierarchy.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Scenario:AbstractClassNumberandWrapperCla=
sses">=E2=9C=85 Scenario: Abstract Class <code>Number</code> and Wrapper Cl=
asses</h3>
<p>In Java, <code>Number</code> is an <strong>abstract class</strong> in th=
e <code>java.lang</code> package. Its common <strong>concrete subclasses</s=
trong> include:</p>
<ul>
<li>
<p><code>Integer</code></p></li>
<li>
<p><code>Double</code></p></li>
<li>
<p><code>Float</code></p></li>
<li>
<p><code>Long</code></p></li>
<li>
<p><code>Short</code></p></li>
<li>
<p><code>Byte</code></p></li>
</ul>
<p>You <strong>cannot instantiate </strong><code>Number</code><strong> dire=
ctly</strong>, but you <strong>can create an array of type </strong><code>N=
umber[]</code> and store objects of its subclasses.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1ExampleCode:">=F0=9F=92=A1 Example Cod=
e:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class NumberArrayDemo {
    public static void main(String[] args) {
        // Creating an array of abstract class type Number
        Number[] numbers =3D new Number[4];

        // Storing wrapper class objects (subclasses of Number)
        numbers[0] =3D new Integer(100);
        numbers[1] =3D new Double(3.1415);
        numbers[2] =3D new Float(2.5f);
        numbers[3] =3D new Long(999999L);

        // Printing values and their types
        for (Number num : numbers) {
            System.out.println("Value: " + num + ", Type: " + num.getClass(=
).getSimpleName());
        }
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.4">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Value: =
100, Type: Integer
Value: 3.1415, Type: Double
Value: 2.5, Type: Float
Value: 999999, Type: Long
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisWorks:.2">=F0=9F=94=8D Why This=
 Works:</h3>
<ul>
<li>
<p><code>Number[]</code> is an array of an <strong>abstract class</strong>.=
</p></li>
<li>
<p>You store instances of its <strong>concrete subclasses</strong> (<code>I=
nteger</code>, <code>Double</code>, <code>Float</code>, <code>Long</code>).=
</p></li>
<li>
<p>This demonstrates <strong>polymorphism</strong> =E2=80=94 the array hold=
s different types of <code>Number</code> objects, and Java handles them cor=
rectly at runtime.</p></li>
</ul>
<p></p>
<p><strong><u>Case 4</u></strong></p>
<p><strong><u>In the case of Interface type Array, as Array elements we can=
 provide its implementation class objects.</u></strong></p>
<p>Great! Let's explore how <strong>interface type arrays</strong> work in =
Java.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Explanation:ArraysofInterfaceType">=E2=9C=
=85 Explanation: Arrays of Interface Type</h3>
<p>In Java, you can create an array whose type is an <strong>interface</str=
ong>. Since interfaces cannot be instantiated directly, the array can only =
hold <strong>objects of classes that implement that interface</strong>.</p>
<p>This is a powerful feature of <strong>polymorphism</strong> =E2=80=94 it=
 allows you to treat different objects uniformly as long as they implement =
the same interface.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Thinkofitlikethis:.1">=F0=9F=92=A1 Thi=
nk of it like this:</h3>
<p>An interface is like a <strong>contract</strong>. Any class that signs t=
he contract (implements the interface) can be stored in the array. The arra=
y doesn=E2=80=99t care about the specific class =E2=80=94 it only cares tha=
t the object follows the contract.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AAExample:.2">=F0=9F=A7=AA Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">interfa=
ce Vehicle {
    void start();
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car started");
    }
}

class Bike implements Vehicle {
    public void start() {
        System.out.println("Bike started");
    }
}

public class InterfaceArrayDemo {
    public static void main(String[] args) {
        // Creating an array of interface type
        Vehicle[] vehicles =3D new Vehicle[2];

        // Storing implementation class objects
        vehicles[0] =3D new Car();  // =E2=9C=85 Car implements Vehicle
        vehicles[1] =3D new Bike(); // =E2=9C=85 Bike implements Vehicle

        // Calling interface methods polymorphically
        for (Vehicle v : vehicles) {
            v.start();
        }
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.5">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Car sta=
rted
Bike started
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisWorks:.3">=F0=9F=94=8D Why This=
 Works:</h3>
<ul>
<li>
<p><code>Vehicle[]</code> is an array of interface type.</p></li>
<li>
<p><code>Car</code> and <code>Bike</code> are concrete classes that impleme=
nt <code>Vehicle</code>.</p></li>
<li>
<p>The array holds different types of objects, but all are guaranteed to ha=
ve the <code>start()</code> method.</p></li>
</ul>
<p></p>
<p>Absolutely! Here's a simple and clear example using the <code>Runnable</=
code><strong> interface</strong>, which is a common interface in Java used =
for multithreading.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:ArrayofRunnableInterfaceType">=E2=
=9C=85 Example: Array of <code>Runnable</code> Interface Type</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class RunnableArrayDemo {
    public static void main(String[] args) {
        // Creating an array of Runnable interface type
        Runnable[] tasks =3D new Runnable[2];

        // Storing implementation class objects
        tasks[0] =3D new TaskOne(); // =E2=9C=85 TaskOne implements Runnabl=
e
        tasks[1] =3D new TaskTwo(); // =E2=9C=85 TaskTwo implements Runnabl=
e

        // Running each task
        for (Runnable task : tasks) {
            task.run(); // Polymorphic call
        }
    }
}

// Implementation class 1
class TaskOne implements Runnable {
    public void run() {
        System.out.println("Task One is running");
    }
}

// Implementation class 2
class TaskTwo implements Runnable {
    public void run() {
        System.out.println("Task Two is running");
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.6">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Task On=
e is running
Task Two is running
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:.2">=F0=9F=94=8D Explanati=
on:</h3>
<ul>
<li>
<p><code>Runnable</code> is an <strong>interface</strong>.</p></li>
<li>
<p><code>TaskOne</code> and <code>TaskTwo</code> are <strong>concrete class=
es</strong> that implement <code>Runnable</code>.</p></li>
<li>
<p>The array <code>Runnable[]</code> holds objects of these classes.</p></l=
i>
<li>
<p>When <code>run()</code> is called, Java uses <strong>polymorphism</stron=
g> to invoke the correct implementation.</p></li>
</ul>
<h3 id=3D"CheatSheetJava-=E2=9C=85SummaryTable:ArrayElementAssignmentRules"=
>=E2=9C=85 Summary Table: Array Element Assignment Rules</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"91=
49ef2a-5791-4c5d-aaba-092e732a5d5c" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Condition</strong></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Allowed Element Types</strong></p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Primitive Type Arrays</strong> (e.g., <code>int[]</code>)</p></t=
d>
<td class=3D"confluenceTd">
<p>Types that can be <strong>implicitly promoted</strong> to the declared t=
ype (e.g., <code>byte</code>, <code>short</code>, <code>char</code> for <co=
de>int[]</code>)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Object Type Arrays</strong> (e.g., <code>Object[]</code>)</p></t=
d>
<td class=3D"confluenceTd">
<p>The declared class type and <strong>any of its subclasses</strong> (e.g.=
, <code>Integer</code>, <code>Double</code> for <code>Object[]</code>)</p><=
/td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Abstract Class Type Arrays</strong></p></td>
<td class=3D"confluenceTd">
<p><strong>Any concrete subclass</strong> of the abstract class (e.g., <cod=
e>Integer</code>, <code>Double</code> for <code>Number[]</code>)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Interface Type Arrays</strong></p></td>
<td class=3D"confluenceTd">
<p><strong>Any class that implements</strong> the interface (e.g., <code>Th=
read</code>, <code>Runnable</code> implementations for <code>Runnable[]</co=
de>)</p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<h2 id=3D"CheatSheetJava-ArrayVariableAssignment">Array Variable Assignment=
</h2>
<p></p>
<p><strong><u>Case 1 </u></strong></p>
<p><strong><u>Element level promotions are not applicable at Array level. E=
x- A char value can be promoted to int type but char array (char[] c) can=
=E2=80=99t be promoted to int array (int[] i).</u></strong></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85Concept:Element-LevelPromotionvs.Array-Le=
velPromotion">=E2=9C=85 Concept: <strong>Element-Level Promotion vs. Array-=
Level Promotion</strong></h3>
<p>In Java, <strong>element-level promotion</strong> (also called <strong>t=
ype promotion</strong>) allows <strong>individual values</strong> to be aut=
omatically converted to a compatible larger type. However, this <strong>doe=
s not apply to entire arrays</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9ExampleofElement-LevelPromotion:">=F0=
=9F=94=B9 Example of Element-Level Promotion:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char ch=
 =3D 'A';
int i =3D ch; // =E2=9C=85 char is promoted to int
</pre>
</div>
</div>
<p>This works because Java allows <strong>implicit promotion</strong> from =
<code>char</code> to <code>int</code>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B4ButthisdoesNOTworkatthearraylevel:">=
=F0=9F=94=B4 But this does NOT work at the array level:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">char[] =
charArray =3D {'A', 'B', 'C'};
int[] intArray =3D charArray; // =E2=9D=8C Compile-time error
</pre>
</div>
</div>
<p></p>
<p>Even though each <code>char</code> can be promoted to <code>int</code>, =
<code>char[]</code><strong> is not compatible with </strong><code>int[]</co=
de>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisHappens:">=F0=9F=94=8D Why This=
 Happens:</h3>
<ul>
<li>
<p>Arrays in Java are <strong>objects</strong>, and their types are <strong=
>strictly enforced</strong>.</p></li>
<li>
<p><code>char[]</code> and <code>int[]</code> are <strong>completely differ=
ent types</strong> in the type system.</p></li>
<li>
<p>Java does <strong>not perform automatic conversion</strong> between arra=
y types, even if their elements are compatible.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BESummary:.1">=F0=9F=A7=BE Summary:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"26=
6fd7ed-61e9-4b3b-b012-40df993b6ffa" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Level</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Promotion Allowed?</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Example</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Element Level</strong></p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
<td class=3D"confluenceTd">
<p><code>char =E2=86=92 int</code>, <code>byte =E2=86=92 int</code></p></td=
>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Array Level</strong></p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C No</p></td>
<td class=3D"confluenceTd">
<p><code>char[] =E2=86=92 int[]</code> is not allowed</p></td>
</tr>
</tbody>
</table>
</div>
<p>Great! Let's explore the concept of assigning a <strong>child type array=
</strong> to a <strong>parent type reference</strong> in Java.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Concept:ChildTypeArrayAssignedtoParentTyp=
eVariable">=E2=9C=85 Concept: <strong>Child Type Array Assigned to Parent T=
ype Variable</strong></h3>
<p>In Java, arrays are <strong>objects</strong>, and they follow the same <=
strong>inheritance rules</strong> as other objects. This means:</p>
<blockquote>
<p>An array of a <strong>subclass type</strong> can be assigned to a <stron=
g>reference variable of a superclass type</strong>.</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1Example:.3">=F0=9F=92=A1 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class A=
nimal {
    void speak() {
        System.out.println("Animal speaks");
    }
}

class Dog extends Animal {
    void speak() {
        System.out.println("Dog barks");
    }
}

public class ArrayAssignmentDemo {
    public static void main(String[] args) {
        Dog[] dogs =3D new Dog[2];
        dogs[0] =3D new Dog();
        dogs[1] =3D new Dog();

        // Assigning child type array to parent type reference
        Animal[] animals =3D dogs;

        for (Animal a : animals) {
            a.speak(); // Polymorphic call
        }
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.7">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Dog bar=
ks
Dog barks
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisWorks:.4">=F0=9F=94=8D Why This=
 Works:</h3>
<ul>
<li>
<p><code>Dog[]</code> is an array of a subclass.</p></li>
<li>
<p><code>Animal[]</code> is a reference to the superclass.</p></li>
<li>
<p>Since <code>Dog</code> <strong>is-a</strong> <code>Animal</code>, <code>=
Dog[]</code> <strong>is-a</strong> <code>Animal[]</code>.</p></li>
<li>
<p>This allows <strong>polymorphic behavior</strong> =E2=80=94 the <code>An=
imal[]</code> reference can call overridden methods on <code>Dog</code> obj=
ects.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9A=A0=EF=B8=8FImportantNote:">=E2=9A=A0=EF=B8=
=8F Important Note:</h3>
<p>While this assignment is allowed, <strong>type safety is still enforced =
at runtime</strong>. For example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">animals=
[0] =3D new Animal(); // =E2=9D=8C ArrayStoreException at runtime
</pre>
</div>
</div>
<p>This will compile, but fail at runtime because you're trying to store a =
<code>Animal</code> object in an array that was originally created as a <co=
de>Dog[]</code>.</p>
<p></p>
<p><strong><u>Case 2</u></strong></p>
<p><strong><u>Whenever we are assigning one array to another array only ref=
erence variables will be reassign but not the underlying elements hence typ=
e must be matched not the size. explain this with example in layman terms</=
u></strong></p>
<p>Great! Let's break this down in <strong>layman terms</strong> with a sim=
ple <strong>real-life analogy</strong> and a <strong>Java example</strong>.=
</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Concept:ArrayAssignmentinJava">=E2=9C=85 =
Concept: Array Assignment in Java</h3>
<blockquote>
<p><strong>When you assign one array to another, you're only copying the re=
ference (the address), not the actual elements.</strong></p>
</blockquote>
<p>This means:</p>
<ul>
<li>
<p>Both variables now point to the <strong>same array in memory</strong>.</=
p></li>
<li>
<p>The <strong>type of the array must match</strong>, but the <strong>size =
doesn't matter</strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Real-LifeAnalogy:">=F0=9F=A7=A0 Real-L=
ife Analogy:</h3>
<p>Imagine you have a <strong>TV remote</strong> (reference variable) that =
controls a <strong>TV</strong> (array). If you give the same remote to some=
one else, they can also control the same TV =E2=80=94 but you didn=E2=80=99=
t give them a new TV, just access to the same one.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1JavaExample:">=F0=9F=92=A1 Java Exampl=
e:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class ArrayReferenceDemo {
    public static void main(String[] args) {
        int[] original =3D {10, 20, 30};  // Original array
        int[] copy;                     // Another reference

        copy =3D original; // =E2=9C=85 Only the reference is copied

        copy[0] =3D 99;    // Modifying through 'copy'

        // Both arrays reflect the change
        System.out.println("Original[0]: " + original[0]); // Output: 99
        System.out.println("Copy[0]: " + copy[0]);         // Output: 99
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DKeyPoints:">=F0=9F=94=8D Key Points:</=
h3>
<ul>
<li>
<p><code>copy =3D original;</code> does <strong>not create a new array</str=
ong>.</p></li>
<li>
<p>Both <code>copy</code> and <code>original</code> point to the <strong>sa=
me array in memory</strong>.</p></li>
<li>
<p>Changing one affects the other.</p></li>
<li>
<p><strong>Type must match</strong> (<code>int[]</code> to <code>int[]</cod=
e>), but <strong>size doesn=E2=80=99t matter</strong> because you're not co=
pying elements.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CInvalidExample(Typemismatch):">=E2=9D=8C =
Invalid Example (Type mismatch):</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D {1, 2, 3};
double[] decimals =3D numbers; // =E2=9D=8C Compile-time error: incompatibl=
e types
</pre>
</div>
</div>
<p></p>
<p>Even though <code>int</code> can be promoted to <code>double</code> at t=
he element level, <code>int[]</code><strong> cannot be assigned to </strong=
><code>double[]</code>.</p>
<p>Sure! Here's a simple Java example where <strong>two arrays have the sam=
e type (</strong><code>int[]</code><strong>) but different sizes</strong>, =
and one is assigned to the other. This demonstrates that <strong>only the r=
eference is reassigned</strong>, and <strong>size doesn't need to match</st=
rong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=A1JavaExample:SameType,DifferentSizes">=
=F0=9F=92=A1 Java Example: Same Type, Different Sizes</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class ArraySizeDemo {
    public static void main(String[] args) {
        int[] smallArray =3D {1, 2};           // Array of size 2
        int[] largeArray =3D {10, 20, 30, 40}; // Array of size 4

        // Assigning largeArray to smallArray reference
        smallArray =3D largeArray;

        // Now both refer to the same array (largeArray)
        System.out.println("smallArray length: " + smallArray.length); // O=
utput: 4

        // Modifying through smallArray reference
        smallArray[0] =3D 99;

        // Reflects in largeArray too
        System.out.println("largeArray[0]: " + largeArray[0]); // Output: 9=
9
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.8">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">smallAr=
ray length: 4
largeArray[0]: 99
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:.3">=F0=9F=94=8D Explanati=
on:</h3>
<ul>
<li>
<p>Initially, <code>smallArray</code> points to an array of size 2.</p></li=
>
<li>
<p>After <code>smallArray =3D largeArray;</code>, it now points to the same=
 array as <code>largeArray</code> (size 4).</p></li>
<li>
<p>The <strong>size of the array doesn't matter</strong> during assignment =
=E2=80=94 only the <strong>type (</strong><code>int[]</code><strong>) must =
match</strong>.</p></li>
<li>
<p>Both references now point to the <strong>same memory location</strong>, =
so changes via one are visible through the other.</p></li>
</ul>
<p></p>
<p><strong><u>Case 3</u></strong></p>
<p><strong><u>Whenever we are performing array assignments array dimensions=
 must be matched i.e. in the place of single dimension int[] array we shoul=
d assign only single dimension int[] by any chance if we assign other dimen=
sion array then we will get compile time error.</u></strong></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85Concept:ArrayDimensionMatchinginAssignmen=
ts">=E2=9C=85 Concept: <strong>Array Dimension Matching in Assignments</str=
ong></h3>
<p>When assigning one array to another, <strong>the number of dimensions mu=
st be the same</strong>. Even if the element types match, <strong>mismatche=
d dimensions will cause a compile-time error</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B4InvalidExample:">=F0=9F=94=B4 Invalid =
Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] o=
neD =3D {1, 2, 3};
int[][] twoD =3D {{1, 2}, {3, 4}};

oneD =3D twoD; // =E2=9D=8C Compile-time error: incompatible types
</pre>
</div>
</div>
<p></p>
<ul>
<li>
<p><code>int[]</code> is a <strong>1D array</strong></p></li>
<li>
<p><code>int[][]</code> is a <strong>2D array</strong></p></li>
<li>
<p>Even though both are arrays of <code>int</code>, their <strong>dimension=
s differ</strong>, so the assignment is <strong>not allowed</strong></p></l=
i>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85ValidExample:">=E2=9C=85 Valid Example:</=
h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] a=
 =3D {1, 2, 3};
int[] b =3D {4, 5, 6};

a =3D b; // =E2=9C=85 Same type and same dimension
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BESummary:.2">=F0=9F=A7=BE Summary:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"bd=
96519b-3238-460b-b593-714d7e809d99" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Array Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Can Be Assigned To</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Result</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int[]</code></p></td>
<td class=3D"confluenceTd">
<p><code>int[]</code></p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Allowed</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int[][]</code></p></td>
<td class=3D"confluenceTd">
<p><code>int[][]</code></p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Allowed</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int[]</code></p></td>
<td class=3D"confluenceTd">
<p><code>int[][]</code></p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C Error</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int[][]</code></p></td>
<td class=3D"confluenceTd">
<p><code>int[]</code></p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C Error</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0WhyThisRuleExists:">=F0=9F=A7=A0 Why T=
his Rule Exists:</h3>
<p>Java enforces <strong>strict type safety</strong>. Even though arrays ar=
e objects, their <strong>structure (dimensions)</strong> is part of their t=
ype. Allowing mismatched dimensions would lead to runtime errors and unpred=
ictable behavior.</p>
<p></p>
<h2 id=3D"CheatSheetJava-TypesofVariables">Types of Variables</h2>
<p><strong><u>Based on the type of value represented by a variable, all var=
iables are divided into two types</u></strong></p>
<ol start=3D"1">
<li>
<p>Primitive variables</p></li>
<li>
<p>Reference Variables</p></li>
</ol>
<p>Absolutely! Let's explain the difference between <strong>primitive varia=
bles</strong> and <strong>reference variables</strong> in <strong>layman te=
rms</strong>, using simple language and relatable examples.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=B11.PrimitiveVariables=E2=80=93LikeStori=
ngaValueDirectly">=F0=9F=A7=B1 1. <strong>Primitive Variables</strong> =E2=
=80=93 Like Storing a Value Directly</h3>
<p>Think of a <strong>primitive variable</strong> like a <strong>locker tha=
t holds a value directly</strong>.</p>
<ul>
<li>
<p>It stores the actual data =E2=80=94 like a number, a character, or a tru=
e/false value.</p></li>
<li>
<p>It=E2=80=99s simple and lightweight.</p></li>
</ul>
<p><strong>Examples in Java:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int age=
 =3D 25;
char grade =3D 'A';
boolean isPassed =3D true;
</pre>
</div>
</div>
<p></p>
<p>Here:</p>
<ul>
<li>
<p><code>age</code> holds the number <code>25</code></p></li>
<li>
<p><code>grade</code> holds the character <code>'A'</code></p></li>
<li>
<p><code>isPassed</code> holds the boolean value <code>true</code></p></li>
</ul>
<p>These are <strong>primitive types</strong> =E2=80=94 they store the valu=
e <strong>directly in memory</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=A62.ReferenceVariables=E2=80=93LikeaLabe=
lonaBox">=F0=9F=93=A6 2. <strong>Reference Variables</strong> =E2=80=93 Lik=
e a Label on a Box</h3>
<p>Now imagine a <strong>reference variable</strong> as a <strong>label tha=
t points to a box</strong>. The label doesn=E2=80=99t hold the item itself =
=E2=80=94 it just tells you <strong>where to find it</strong>.</p>
<ul>
<li>
<p>It stores the <strong>address (reference)</strong> of an object in memor=
y.</p></li>
<li>
<p>The actual data lives <strong>somewhere else</strong> (on the heap).</p>=
</li>
</ul>
<p><strong>Examples in Java:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String =
name =3D "Alice";
int[] numbers =3D {1, 2, 3};
Person person =3D new Person();
</pre>
</div>
</div>
<p></p>
<p>Here:</p>
<ul>
<li>
<p><code>name</code> points to a <code>String</code> object</p></li>
<li>
<p><code>numbers</code> points to an array</p></li>
<li>
<p><code>person</code> points to an instance of the <code>Person</code> cla=
ss</p></li>
</ul>
<p>These are <strong>reference types</strong> =E2=80=94 the variable holds =
a <strong>reference to the object</strong>, not the object itself.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BESummaryTable:.1">=F0=9F=A7=BE Summary =
Table:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"43=
69ad0e-f0a9-4384-bfbd-66ff152bc15a" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Type</strong></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>What It Stores</strong></p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p><strong>Examples</strong></p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Primitive Variable</strong></p></td>
<td class=3D"confluenceTd">
<p>Actual value</p></td>
<td class=3D"confluenceTd">
<p><code>int</code>, <code>char</code>, <code>boolean</code>, <code>float</=
code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><strong>Reference Variable</strong></p></td>
<td class=3D"confluenceTd">
<p>Memory address (reference) to an object</p></td>
<td class=3D"confluenceTd">
<p><code>String</code>, <code>Array</code>, <code>Class objects</code></p><=
/td>
</tr>
</tbody>
</table>
</div>
<p></p>
<p><strong><u>Based on the purpose and position of declaration all variable=
s are divided into three types</u></strong></p>
<ol start=3D"1">
<li>
<p>instance variable</p></li>
<li>
<p>static variable</p></li>
<li>
<p>local variable</p></li>
</ol>
<p>In Java (and many other object-oriented programming languages), variable=
s are categorized based on their <strong>scope</strong>, <strong>lifetime</=
strong>, and <strong>how they are declared</strong>. Here's a breakdown of =
the three main types:</p>
<hr>
<h3 id=3D"CheatSheetJava-1.InstanceVariables">1. <strong>Instance Variables=
</strong></h3>
<ul>
<li>
<p><strong>Definition</strong>: Variables that are declared inside a class =
but <strong>outside any method, constructor, or block</strong>.</p></li>
<li>
<p><strong>Purpose</strong>: They represent the <strong>state or properties=
</strong> of an object.</p></li>
<li>
<p><strong>Scope</strong>: Belongs to a specific instance of a class.</p></=
li>
<li>
<p><strong>Lifetime</strong>: Exists as long as the object exists.</p></li>
<li>
<p><strong>Access</strong>: Accessed through object references.</p></li>
</ul>
<p><strong>Example</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class C=
ar {
    String color; // instance variable
    int speed;    // instance variable
}
</pre>
</div>
</div>
<p></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Note-</p>
<p>If the value of a variable is varied from object to object such type of =
variable is called instance variable.</p>
<p>For every object a separate copy of instance variable will be created.</=
p>
<p>Scope of instance variable =3D scope of the object (instance variables w=
ill be created at the time of object creation and destroyed at the time of =
object destruction)</p>
<p>Instance variables will be stored as part of the objects</p>
<p>Instance variables should be declared within the class directly but outs=
ide any method, block, or constructor.</p>
<p>For Instance variables its not mandatory to perform initialization expli=
citly, jvm will provide the default value. These are also known as object l=
evel variables or attributes.</p>
<p>Instance variables can=E2=80=99t be accessed from static context or area=
 directly we can access by using object reference but from instance or non-=
static area we can access instance members directly</p>
<h3 id=3D"CheatSheetJava-=F0=9F=8E=ADImagineaTheaterPlay">=F0=9F=8E=AD Imag=
ine a Theater Play</h3>
<ul>
<li>
<p><strong>Instance Variables</strong> are like <strong>props</strong> that=
 belong to each <strong>actor</strong> (object).</p></li>
<li>
<p><strong>Static Methods</strong> are like <strong>instructions written on=
 the wall backstage</strong> =E2=80=94 they are shared and visible to every=
one, but they don=E2=80=99t belong to any one actor.</p></li>
<li>
<p><strong>Instance Methods</strong> are like <strong>scripts</strong> that=
 each actor carries =E2=80=94 they know their own props and can use them fr=
eely.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=8D=E2=80=8D=E2=99=82=EF=B8=8FInstanceAre=
a(Non-StaticContext)">=F0=9F=A7=8D=E2=80=8D=E2=99=82=EF=B8=8F Instance Area=
 (Non-Static Context)</h3>
<p>When you're <strong>inside the actor's script (instance method)</strong>=
, you can easily use your own props (instance variables) because:</p>
<ul>
<li>
<p>You are the actor.</p></li>
<li>
<p>You know what props you have.</p></li>
<li>
<p>You don=E2=80=99t need to ask anyone =E2=80=94 they=E2=80=99re yours.</p=
></li>
</ul>
<p>=E2=9C=85 So, <strong>instance methods can access instance variables dir=
ectly</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=B1StaticArea(StaticContext)">=F0=9F=A7=
=B1 Static Area (Static Context)</h3>
<p>Now imagine you're reading the <strong>instructions on the wall (static =
method)</strong>:</p>
<ul>
<li>
<p>These instructions are not written for any specific actor.</p></li>
<li>
<p>They don=E2=80=99t know which actor is on stage.</p></li>
<li>
<p>So, they <strong>can=E2=80=99t use any actor=E2=80=99s props directly</s=
trong>.</p></li>
</ul>
<p>=E2=9D=8C That=E2=80=99s why <strong>static methods can=E2=80=99t access=
 instance variables directly</strong> =E2=80=94 they don=E2=80=99t belong t=
o any one object.</p>
<p>=E2=9C=85 But if you <strong>create an actor (object)</strong> and ask t=
hem, you can access their props:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Car myC=
ar =3D new Car();
System.out.println(myCar.color); // Accessing instance variable via object
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-SummaryinLaymanTerms">Summary in Layman Terms</h3>
<ul>
<li>
<p><strong>Instance variables</strong> are like personal belongings of each=
 object.</p></li>
<li>
<p><strong>Static methods</strong> are like general instructions =E2=80=94 =
they don=E2=80=99t know who owns what.</p></li>
<li>
<p>To use someone=E2=80=99s belongings (instance variables) from a static m=
ethod, you need to <strong>first find the person (create an object)</strong=
>.</p></li>
</ul>
<p>Here's a simple Java code example that demonstrates the difference betwe=
en accessing <strong>instance variables</strong> from a <strong>static</str=
ong> and <strong>non-static</strong> context:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaCodeExample">=E2=9C=85 Java Code Exam=
ple</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Car {
    // Instance variable
    String color =3D "Red";

    // Static method (static context)
    public static void showColorStatic() {
        // System.out.println(color); // =E2=9D=8C This will cause an error

        // =E2=9C=85 Correct way: create an object to access instance varia=
ble
        Car myCar =3D new Car();
        System.out.println("Color from static method: " + myCar.color);
    }

    // Instance method (non-static context)
    public void showColorInstance() {
        // =E2=9C=85 Direct access to instance variable
        System.out.println("Color from instance method: " + color);
    }

    public static void main(String[] args) {
        // Calling static method
        showColorStatic();

        // Creating object to call instance method
        Car anotherCar =3D new Car();
        anotherCar.showColorInstance();
    }
}

</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0WhatThisCodeShows">=F0=9F=A7=A0 What T=
his Code Shows</h3>
<ul>
<li>
<p><code>color</code> is an <strong>instance variable</strong>.</p></li>
<li>
<p><code>showColorStatic()</code> is a <strong>static method</strong> =E2=
=80=94 it <strong>cannot access </strong><code>color</code><strong> directl=
y</strong>, so it creates an object (<code>myCar</code>) to access it.</p><=
/li>
<li>
<p><code>showColorInstance()</code> is an <strong>instance method</strong> =
=E2=80=94 it can <strong>access </strong><code>color</code><strong> directl=
y</strong> because it's part of the same object.</p></li>
</ul>
</div>
</div>
<p></p>
<p></p>
<p></p>
<p></p>
<hr>
<h3 id=3D"CheatSheetJava-2.StaticVariables(ClassVariables)">2. <strong>Stat=
ic Variables (Class Variables)</strong></h3>
<ul>
<li>
<p><strong>Definition</strong>: Variables declared with the <code>static</c=
ode> keyword inside a class but <strong>outside any method</strong>.</p></l=
i>
<li>
<p><strong>Purpose</strong>: Used to represent <strong>class-level data</st=
rong> shared among all instances.</p></li>
<li>
<p><strong>Scope</strong>: Belongs to the class, not to any specific object=
.</p></li>
<li>
<p><strong>Lifetime</strong>: Exists for the duration of the program.</p></=
li>
<li>
<p><strong>Access</strong>: Accessed using the class name or object referen=
ce.</p></li>
</ul>
<p><strong>Example</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class C=
ar {
    static int numberOfCars; // static variable
}
</pre>
</div>
</div>
<p></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>If the value of a variable is not varied from object to object then its =
never recommended to declare that variable at object level, we have to decl=
are such type of variables at class level by using static modifier.</p>
<p>In case of instance variable for every object a separate copy will be cr=
eated but in case of static variable single copy will be created at the cla=
ss level and the same copy will be shared among all the objects of that cla=
ss.</p>
<p>static variables will be created at the time of class loading and gets d=
estroyed at the time of class unloading, hence the scope of static variable=
 is exactly same as the scope of the class.</p>
<p>steps-</p>
<ol start=3D"1">
<li>
<p>start JVM</p></li>
<li>
<p>create main thread</p></li>
<li>
<p>locate Test.class</p></li>
<li>
<p>Load Test.class - static variable creation</p></li>
<li>
<p>execute main() method of Test.class</p></li>
<li>
<p>unload Test.class - static variable destruction</p></li>
<li>
<p>destroy main thread</p></li>
<li>
<p>shutdown JVM</p></li>
</ol>
<p><strong>Static variables must be declared directly within a class, but o=
utside of any method, constructor, or block. They must be marked with the <=
/strong><code>static</code><strong> keyword.</strong></p>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.1">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Example {
    static int count =3D 0; // Static variable

    public static void main(String[] args) {
        System.out.println("Count: " + count);
    }
}
</pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li>
<p><code>count</code> is a <strong>static variable</strong>.</p></li>
<li>
<p>It is declared <strong>inside the class</strong> but <strong>outside any=
 method</strong>.</p></li>
<li>
<p>It is marked with the <code>static</code> keyword, making it a <strong>c=
lass-level variable</strong>.</p></li>
</ul>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9AccessingStaticVariablesinJava">=F0=9F=
=94=B9 Accessing Static Variables in Java</h3>
<ol start=3D"1">
<li>
<p><strong>Access via Class Name</strong> (=E2=9C=85 Recommended):</p>
<ul>
<li>
<p>Static variables are associated with the class itself, not with any spec=
ific object.</p></li>
<li>
<p>Therefore, the preferred way to access them is using the <strong>class n=
ame</strong>.</p></li>
</ul></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(MyClass.staticVariable);
</pre>
</div>
</div>
<ol start=3D"2">
<li>
<p><strong>Access via Object Reference</strong> (=E2=9C=85 Allowed, but =E2=
=9D=8C Not Recommended):</p></li>
</ol>
<ul>
<li>
<p>You can also access static variables using an object reference, but this=
 can be misleading because it looks like the variable belongs to the object=
.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">MyClass=
 obj =3D new MyClass();
System.out.println(obj.staticVariable); // Works, but not recommended
</pre>
</div>
</div>
<ol start=3D"3">
<li>
<p><strong>Access Within the Same Class</strong>:</p>
<ul>
<li>
<p>If you're accessing the static variable <strong>from within the same cla=
ss</strong>, you can use it <strong>directly by name</strong>, without the =
class name.</p></li>
</ul></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">static =
int count =3D 0;

public static void display() {
    System.out.println(count); // Direct access
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9CreationandAccessibilityofStaticVariab=
les">=F0=9F=94=B9 Creation and Accessibility of Static Variables</h3>
<ol start=3D"1">
<li>
<p><strong>Creation Timing</strong>:</p>
<ul>
<li>
<p>Static variables are created <strong>when the class is loaded into memor=
y</strong>, which happens <strong>at the start of the program</strong> (bef=
ore any objects are created).</p></li>
</ul></li>
<li>
<p><strong>Memory Location</strong>:</p>
<ul>
<li>
<p>They are stored in the <strong>Method Area</strong> of the JVM memory, a=
nd only <strong>one copy</strong> exists for the entire class.</p></li>
</ul></li>
<li>
<p><strong>Accessibility</strong>:</p>
<ul>
<li>
<p>Because static variables are loaded with the class itself, they can be a=
ccessed from:</p>
<ul>
<li>
<p><strong>Static methods</strong> (since both exist at the class level).</=
p></li>
<li>
<p><strong>Instance methods</strong> (since instance methods belong to obje=
cts of the class, which already have access to class-level members).</p></l=
i>
</ul></li>
</ul></li>
<li>
<p><strong>No Object Required</strong>:</p>
<ul>
<li>
<p>You <strong>do not need to create an object</strong> to access a static =
variable =E2=80=94 it can be accessed directly using the class name or dire=
ctly within the same class.</p></li>
</ul></li>
</ol>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.2">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Example {
    static int count =3D 10; // Static variable

    public static void staticMethod() {
        System.out.println("From static method: " + count); // Direct acces=
s
    }

    public void instanceMethod() {
        System.out.println("From instance method: " + count); // Also direc=
t access
    }

    public static void main(String[] args) {
        staticMethod(); // Access from static context

        Example obj =3D new Example();
        obj.instanceMethod(); // Access from instance context
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9InitializationofStaticVariables">=F0=
=9F=94=B9 Initialization of Static Variables</h3>
<ul>
<li>
<p>In Java, <strong>explicit initialization of static variables is not mand=
atory</strong>.</p></li>
<li>
<p>If you don=E2=80=99t assign a value to a static variable, the <strong>JV=
M automatically assigns a default value</strong> based on the variable=E2=
=80=99s data type.</p></li>
</ul>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.3">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Example {
    static int number;         // default: 0
    static boolean flag;       // default: false
    static String message;     // default: null

    public static void main(String[] args) {
        System.out.println("number =3D " + number);
        System.out.println("flag =3D " + flag);
        System.out.println("message =3D " + message);
    }
}

Output:

number =3D 0
flag =3D false
message =3D null</pre>
</div>
</div>
<p></p>
<p></p>
<p><strong>When we modify an instance variable, the change affects only tha=
t specific object because each object has its own separate copy of instance=
 variables. However, when we modify a static variable, the change is reflec=
ted across all objects of the class, since static variables are shared and =
maintained as a single copy at the class level.</strong></p>
</div>
</div>
<h3 id=3D"CheatSheetJava-DefaultValuesProvidedbyJVM">Default Values Provide=
d by JVM</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"7b=
ee9d99-9f70-4b88-af58-ce3db135e6fe" class=3D"confluenceTable">
<tbody>
<tr>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Data Type</p></th>
<th data-highlight-colour=3D"#f5f5f5" class=3D"confluenceTh">
<p>Default Value</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int</code>, <code>byte</code>, <code>short</code>, <code>long</cod=
e></p></td>
<td class=3D"confluenceTd">
<p><code>0</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>float</code>, <code>double</code></p></td>
<td class=3D"confluenceTd">
<p><code>0.0</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>char</code></p></td>
<td class=3D"confluenceTd">
<p><code>'\u0000'</code> (null character)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>boolean</code></p></td>
<td class=3D"confluenceTd">
<p><code>false</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Object references</p></td>
<td class=3D"confluenceTd">
<p><code>null</code></p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-3.LocalVariables">3. <strong>Local Variables</stro=
ng></h3>
<ul>
<li>
<p><strong>Definition</strong>: Variables declared <strong>inside a method,=
 constructor, or block</strong>.</p></li>
<li>
<p><strong>Purpose</strong>: Used for <strong>temporary storage</strong> du=
ring method execution.</p></li>
<li>
<p><strong>Scope</strong>: Limited to the block in which they are declared.=
</p></li>
<li>
<p><strong>Lifetime</strong>: Created when the block is entered and destroy=
ed when it exits.</p></li>
<li>
<p><strong>Access</strong>: Cannot be accessed outside the method/block.</p=
></li>
</ul>
<p><strong>Example</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">void dr=
ive() {
    int speed =3D 60; // local variable
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Imaginethis:.1">=F0=9F=A7=A0 Imagine t=
his:</h3>
<p>You're working in a kitchen, and you're following a recipe. While cookin=
g, you might take out a <strong>cutting board</strong>, <strong>knife</stro=
ng>, and <strong>some spices</strong> just for that particular dish. Once y=
ou're done cooking, you clean up and put everything away.</p>
<p>These temporary tools and ingredients you used <strong>only while cookin=
g that dish</strong> are like <strong>local variables</strong> in programmi=
ng.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=BBInprogrammingterms:">=F0=9F=92=BB In p=
rogramming terms:</h3>
<ul>
<li>
<p>A <strong>method</strong>, <strong>block</strong>, or <strong>constructo=
r</strong> is like a <strong>recipe</strong> or a <strong>task</strong>.</p=
></li>
<li>
<p>A <strong>local variable</strong> is like a <strong>tool or ingredient</=
strong> you use <strong>only while doing that task</strong>.</p></li>
<li>
<p>Once the task is done, you <strong>don=E2=80=99t need those tools anymor=
e</strong>, so they=E2=80=99re <strong>automatically cleaned up</strong>.</=
p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DKeypointsinsimplewords:">=F0=9F=94=8D =
Key points in simple words:</h3>
<ul>
<li>
<p><strong>Local variables</strong> are created <strong>only when needed</s=
trong> (when the method or block runs).</p></li>
<li>
<p>They are <strong>stored in a special area called the stack</strong> (lik=
e a temporary shelf).</p></li>
<li>
<p>They <strong>disappear automatically</strong> when the task is done (lik=
e cleaning up after cooking).</p></li>
<li>
<p>You <strong>can=E2=80=99t use them outside</strong> the method or block =
where they were created (just like you can=E2=80=99t use the cutting board =
from one dish in another unless you take it out again).</p></li>
</ul>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Imaginethis:.2">=F0=9F=A7=A0 Imagine t=
his:</h3>
<p>You're writing a note on a piece of paper. Before you can use a pen, you=
 need to <strong>make sure it has ink</strong>. If you try to write with an=
 empty pen, nothing will happen =E2=80=94 it just won=E2=80=99t work.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=BBInprogramming:">=F0=9F=92=BB In progra=
mming:</h3>
<p>A <strong>local variable</strong> is like that pen. Before you use it, y=
ou need to <strong>"fill it with ink"</strong> =E2=80=94 in other words, <s=
trong>give it a value</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=A5Whyisthisimportant?">=F0=9F=94=A5 Why =
is this important?</h3>
<p>In Java, the <strong>JVM (Java Virtual Machine)</strong> does <strong>no=
t automatically assign a value</strong> to local variables. That means:</p>
<ul>
<li>
<p>If you try to use a local variable <strong>without giving it a value fir=
st</strong>, the program will <strong>not compile</strong>.</p></li>
<li>
<p>Java does this to <strong>prevent mistakes</strong>, like using a variab=
le that doesn=E2=80=99t have a meaningful value yet.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.4">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Example {
    public static void main(String[] args) {
        int number; // declared but not initialized
        System.out.println(number); // =E2=9D=8C Error! Variable 'number' m=
ight not have been initialized
    }
}
</pre>
</div>
</div>
<hr>
<p>To fix it:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Example {
    public static void main(String[] args) {
        int number =3D 10; // initialized
        System.out.println(number); // =E2=9C=85 Works fine
    }
}
</pre>
</div>
</div>
<p></p>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:">=F0=9F=93=9D Summary:</h3>
<ul>
<li>
<p>Local variables are like tools you use temporarily.</p></li>
<li>
<p>Java <strong>won=E2=80=99t give them a starting value</strong> =E2=80=94=
 you must do it yourself.</p></li>
<li>
<p>If you forget, Java will stop you with a <strong>compile-time error</str=
ong> to keep your code safe and predictable.</p></li>
</ul>
<p></p>
<p>Note-</p>
<p><strong>It's not advisable to initialize local variables inside conditio=
nal or logical blocks, as there's no guarantee those blocks will execute at=
 runtime.</strong></p>
<p><strong>It=E2=80=99s strongly recommended to initialize local variables =
at the time of declaration, even if it's just with a default value."</stron=
g></p>
<p><strong>The only modifier allowed for local variables is </strong><code>=
final</code><strong>. Using any other modifier will result in a compile-tim=
e error.</strong> <strong>"In Java, </strong><code>final</code><strong> is =
the only valid modifier for local variables. Applying any other modifier, s=
uch as </strong><code>public</code><strong>, </strong><code>private</code><=
strong>, or </strong><code>static</code><strong>, will lead to a compile-ti=
me error."</strong></p>
<h3 id=3D"CheatSheetJava-SummaryTable">Summary Table</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"b4=
9021db-58eb-4980-8757-013d6f506ebd" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Type</p></th>
<th class=3D"confluenceTh">
<p>Declared In</p></th>
<th class=3D"confluenceTh">
<p>Scope</p></th>
<th class=3D"confluenceTh">
<p>Lifetime</p></th>
<th class=3D"confluenceTh">
<p>Accessed By</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Instance Variable</p></td>
<td class=3D"confluenceTd">
<p>Inside class, outside methods</p></td>
<td class=3D"confluenceTd">
<p>Object instance</p></td>
<td class=3D"confluenceTd">
<p>As long as object exists</p></td>
<td class=3D"confluenceTd">
<p>Object reference</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Static Variable</p></td>
<td class=3D"confluenceTd">
<p>Inside class, with <code>static</code></p></td>
<td class=3D"confluenceTd">
<p>Class-wide</p></td>
<td class=3D"confluenceTd">
<p>Entire program</p></td>
<td class=3D"confluenceTd">
<p>Class name or object</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Local Variable</p></td>
<td class=3D"confluenceTd">
<p>Inside methods/blocks</p></td>
<td class=3D"confluenceTd">
<p>Method/block</p></td>
<td class=3D"confluenceTd">
<p>During method/block</p></td>
<td class=3D"confluenceTd">
<p>Only within method/block</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<p><span style=3D"background-color: rgb(254,222,200);">Un-initialized Array=
s - </span></p>
<h3 id=3D"CheatSheetJava-Sure!Let'sbreakdowntheconceptofuninitializedarrays=
inasimpleandclearway:">Sure! Let's break down the concept of <strong>uninit=
ialized arrays</strong> in a simple and clear way:</h3>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Whatisanuninitializedarray?">=F0=9F=A7=
=A0 What is an uninitialized array?</h3>
<p>An <strong>uninitialized array</strong> is an array that has been <stron=
g>declared</strong> but <strong>not yet assigned memory or values</strong>.=
</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=BBInJava,thiscanhappenintwoways:">=F0=9F=
=92=BB In Java, this can happen in two ways:</h3>
<h4 id=3D"CheatSheetJava-1.Declaredbutnotinitialized:">1. <strong>Declared =
but not initialized:</strong></h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers; // declared, but not initialized
</pre>
</div>
</div>
<ul>
<li>
<p>Here, <code>numbers</code> is just a reference.</p></li>
<li>
<p>It doesn=E2=80=99t point to any actual array in memory yet.</p></li>
<li>
<p>If you try to use it (like accessing <code>numbers[0]</code>), you'll ge=
t a <strong>NullPointerException</strong>.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-2.Declaredandinitialized,butelementsarenotexplicit=
lyset:">2. <strong>Declared and initialized, but elements are not explicitl=
y set:</strong></h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
umbers =3D new int[5]; // initialized with default values
</pre>
</div>
</div>
<ul>
<li>
<p>Java automatically fills the array with <strong>default values</strong>:=
</p>
<ul>
<li>
<p><code>0</code> for <code>int</code></p></li>
<li>
<p><code>false</code> for <code>boolean</code></p></li>
<li>
<p><code>null</code> for objects like <code>String</code></p></li>
</ul></li>
<li>
<p>So technically, it's initialized =E2=80=94 but the elements are not <str=
ong>explicitly</strong> set by the programmer.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=97Whydoesthismatter?">=E2=9D=97 Why does th=
is matter?</h3>
<ul>
<li>
<p>If you <strong>only declare</strong> an array and forget to initialize i=
t, your program will crash when you try to use it.</p></li>
<li>
<p>Always make sure to <strong>initialize</strong> your array before access=
ing or modifying its elements.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.5">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">String[=
] names; // uninitialized
names =3D new String[3]; // now initialized with default value null
names[0] =3D "Alice"; // now explicitly initialized
</pre>
</div>
</div>
<hr>
<p>Great! Let's break this down with a clear explanation and example.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:">=F0=9F=A7=A0 Concept:</h3>
<p>In Java, <strong>whenever you create an array</strong>, all its elements=
 are <strong>automatically initialized with default values</strong>, <stron=
g>regardless of where the array is declared</strong> =E2=80=94 whether it's=
:</p>
<ul>
<li>
<p>A <strong>static array</strong> (belongs to the class),</p></li>
<li>
<p>An <strong>instance array</strong> (belongs to an object), or</p></li>
<li>
<p>A <strong>local array</strong> (declared inside a method).</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEDefaultvaluesdependonthedatatype:">=F0=
=9F=A7=BE Default values depend on the data type:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"4f=
da9780-e969-4e2b-9390-839ce4fb1011" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Data Type</p></th>
<th class=3D"confluenceTh">
<p>Default Value</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>int</code>, <code>byte</code>, <code>short</code>, <code>long</cod=
e></p></td>
<td class=3D"confluenceTd">
<p><code>0</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>float</code>, <code>double</code></p></td>
<td class=3D"confluenceTd">
<p><code>0.0</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>char</code></p></td>
<td class=3D"confluenceTd">
<p><code>'\u0000'</code> (null character)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>boolean</code></p></td>
<td class=3D"confluenceTd">
<p><code>false</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Object references (e.g., <code>String</code>)</p></td>
<td class=3D"confluenceTd">
<p><code>null</code></p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.6">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class ArrayDefaults {

    static int[] staticArray =3D new int[3]; // static array

    int[] instanceArray =3D new int[3]; // instance array

    public void showLocalArray() {
        int[] localArray =3D new int[3]; // local array

        System.out.println("Local Array:");
        for (int i : localArray) {
            System.out.println(i); // prints 0
        }
    }

    public static void main(String[] args) {
        // Static array
        System.out.println("Static Array:");
        for (int i : staticArray) {
            System.out.println(i); // prints 0
        }

        // Instance array
        ArrayDefaults obj =3D new ArrayDefaults();
        System.out.println("Instance Array:");
        for (int i : obj.instanceArray) {
            System.out.println(i); // prints 0
        }

        // Local array
        obj.showLocalArray();
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A9Output:">=F0=9F=A7=A9 Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Static =
Array:
0
0
0
Instance Array:
0
0
0
Local Array:
0
0
0
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DSummary:">=F0=9F=94=8D Summary:</h3>
<ul>
<li>
<p>Arrays in Java are <strong>always initialized</strong> with default valu=
es when created.</p></li>
<li>
<p>This behavior ensures that you don=E2=80=99t accidentally use garbage or=
 undefined values.</p></li>
<li>
<p>This applies <strong>no matter where</strong> the array is declared =E2=
=80=94 static, instance, or local.</p></li>
</ul>
<p></p>
<h2 id=3D"CheatSheetJava-Var-argmethods">Var-arg methods</h2>
<p>Sure! Let=E2=80=99s understand <strong>var-arg methods</strong> (short f=
or <em>variable-length argument methods</em>) in <strong>layman terms</stro=
ng>:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Imaginethis:.3">=F0=9F=A7=A0 Imagine t=
his:</h3>
<p>You're hosting a party, and you tell your friends:</p>
<blockquote>
<p>"Bring as many snacks as you want =E2=80=94 1, 2, or even 10!"</p>
</blockquote>
<p>You don=E2=80=99t know how many snacks each person will bring, but you=
=E2=80=99re okay with <strong>any number</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=92=BBInJava:">=F0=9F=92=BB In Java:</h3>
<p>A <strong>var-arg method</strong> is like that =E2=80=94 it allows you t=
o <strong>pass any number of arguments</strong> to a method, including <str=
ong>none at all</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.7">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void printNames(String... names) {
    for (String name : names) {
        System.out.println(name);
    }
}
</pre>
</div>
</div>
<p>You can call this method in many ways:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">printNa=
mes(); // no names
printNames("Alice");
printNames("Alice", "Bob", "Charlie");
</pre>
</div>
</div>
<p>Java will automatically treat the <code>names</code> parameter as an <st=
rong>array</strong> behind the scenes.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=91KeyPoints:">=F0=9F=94=91 Key Points:</=
h3>
<ul>
<li>
<p>You can pass <strong>0 or more values</strong>.</p></li>
<li>
<p>Inside the method, the var-arg behaves like an <strong>array</strong>.</=
p></li>
<li>
<p>You can only have <strong>one var-arg</strong> in a method, and it must =
be the <strong>last parameter</strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.1">=F0=9F=93=9D Summary:</h3>
<blockquote>
<p>A var-arg method is like saying, =E2=80=9CGive me as many items as you w=
ant =E2=80=94 I=E2=80=99ll handle them all!=E2=80=9D</p>
</blockquote>
<p></p>
<p>Absolutely! Let=E2=80=99s break this down in <strong>simple, clear langu=
age</strong> and explain how <strong>var-arg methods</strong> (variable arg=
ument methods) were introduced in Java 1.5 to solve a real problem.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=95=B0=EF=B8=8FBeforeJava1.5(uptoversion1.4)=
:">=F0=9F=95=B0=EF=B8=8F <strong>Before Java 1.5 (up to version 1.4):</stro=
ng></h3>
<p>If you wanted to write a method that could accept different numbers of a=
rguments, you had to <strong>create multiple versions</strong> of the same =
method:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">void pr=
int(int a) { }
void print(int a, int b) { }
void print(int a, int b, int c) { }
</pre>
</div>
</div>
<p>This approach:</p>
<ul>
<li>
<p>Made the code <strong>longer</strong> and <strong>harder to read</strong=
>.</p></li>
<li>
<p>Was <strong>not flexible</strong> =E2=80=94 you had to guess how many ar=
guments might be needed.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=9A=80FromJava1.5onwards:">=F0=9F=9A=80 <str=
ong>From Java 1.5 onwards:</strong></h3>
<p>Java introduced <strong>var-arg methods</strong> to solve this problem.<=
/p>
<p>Now you can write <strong>one method</strong> that accepts <strong>any n=
umber of arguments</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">void pr=
int(int... numbers) {
    for (int num : numbers) {
        System.out.println(num);
    }
}
</pre>
</div>
</div>
<p>You can now call it like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">print()=
; // no arguments
print(10); // one argument
print(10, 20, 30); // multiple arguments
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=A7Howdoesitworkinternally?">=F0=9F=94=A7=
 <strong>How does it work internally?</strong></h3>
<ul>
<li>
<p>Java treats the <code>int... numbers</code> as a <strong>single-dimensio=
nal array</strong> (<code>int[] numbers</code>).</p></li>
<li>
<p>So inside the method, you can access elements using <strong>indexing</st=
rong>:</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println(numbers[0]); // first number
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0SummaryinLaymanTerms:">=F0=9F=A7=A0 Su=
mmary in Layman Terms:</h3>
<blockquote>
<p>Before Java 1.5, if you wanted to allow different numbers of inputs, you=
 had to write many versions of the same method. This was messy and repetiti=
ve.</p>
<p>From Java 1.5, Java introduced <strong>var-arg methods</strong>, which l=
et you write <strong>one method</strong> that can handle <strong>any number=
 of inputs</strong> =E2=80=94 just like a shopping bag that can hold 0, 1, =
or many items.</p>
<p>Internally, Java treats these inputs as an <strong>array</strong>, so yo=
u can loop through them or access them by index.</p>
</blockquote>
<p></p>
<p>Great! Let's explore <strong>Case 2</strong>: mixing <strong>var-arg par=
ameters</strong> with <strong>normal parameters</strong> in Java.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.1">=F0=9F=A7=A0 Concept:</h3>
<p>Yes, in Java, you <strong>can mix</strong> a variable-length argument (v=
ar-arg) with regular parameters in a method. But there=E2=80=99s <strong>on=
e important rule</strong>:</p>
<blockquote>
<p><strong>The var-arg must always be the last parameter</strong> in the me=
thod declaration.</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.8">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class VarArgExample {

    // Method with one normal parameter and one var-arg parameter
    public static void m1(String message, int... numbers) {
        System.out.println("Message: " + message);
        System.out.println("Numbers:");
        for (int num : numbers) {
            System.out.println(num);
        }
    }

    public static void main(String[] args) {
        m1("Here are the numbers:", 10, 20, 30);
        m1("No numbers passed");
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.9">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Message=
: Here are the numbers:
Numbers:
10
20
30

Message: No numbers passed
Numbers:
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CInvalidExample(Var-argnotlast):">=E2=9D=
=8C Invalid Example (Var-arg not last):</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">// This=
 will cause a compile-time error
public void m1(int... numbers, String message) {
    // Not allowed: var-arg must be the last parameter
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.2">=F0=9F=93=9D Summary:</h3>
<ul>
<li>
<p>You <strong>can</strong> mix var-args with normal parameters.</p></li>
<li>
<p>The <strong>var-arg must be the last</strong> in the parameter list.</p>=
</li>
<li>
<p>This allows you to pass <strong>fixed values</strong> along with a <stro=
ng>flexible number of arguments</strong>.</p></li>
</ul>
<p></p>
<p>Great question! Let's break it down in simple terms.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.2">=F0=9F=A7=A0 Concept:</h3>
<p>In Java, a method can have <strong>only one variable-length argument (va=
r-arg) parameter</strong>. This is because Java needs to know <strong>where=
 the variable arguments start</strong>, and if there were more than one, it=
 would get <strong>confused</strong> about how to split the arguments.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CInvalidExample(Twovar-args=E2=80=93NotAll=
owed):">=E2=9D=8C Invalid Example (Two var-args =E2=80=93 Not Allowed):</h3=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">// This=
 will cause a compile-time error
public void m1(int... a, String... b) {
    // Not allowed: only one var-arg parameter is permitted
}
</pre>
</div>
</div>
<p>Java doesn=E2=80=99t know how many arguments belong to <code>a</code> an=
d how many to <code>b</code>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85ValidExample(Onevar-arg+othernormalparame=
ters):">=E2=9C=85 Valid Example (One var-arg + other normal parameters):</h=
3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void m1(String name, int... scores) {
    System.out.println("Name: " + name);
    for (int score : scores) {
        System.out.println("Score: " + score);
    }
}
</pre>
</div>
</div>
<p>You can call it like:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">m1("Ali=
ce", 90, 85, 88);
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.3">=F0=9F=93=9D Summary:</h3>
<blockquote>
<p>In any method, you can use <strong>only one var-arg parameter</strong>, =
and it must be the <strong>last</strong> in the parameter list.<br>
This rule ensures Java can correctly group the variable arguments into an a=
rray.</p>
</blockquote>
<p></p>
<p>Great! Let=E2=80=99s break this down in <strong>simple terms</strong> wi=
th a clear <strong>example</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.3">=F0=9F=A7=A0 Concept:</h3>
<p>In Java, when you have <strong>multiple overloaded methods</strong>, and=
 one of them is a <strong>var-arg method</strong>, Java will <strong>only c=
hoose the var-arg method if no better match is found</strong>.</p>
<p>This is similar to the <code>default</code><strong> case in a </strong><=
code>switch</code><strong> statement</strong> =E2=80=94 it only runs if <st=
rong>none of the specific cases match</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.9">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class VarArgPriority {

    // Exact match method
    public void m1(int a) {
        System.out.println("Single int method");
    }

    // Var-arg method
    public void m1(int... a) {
        System.out.println("Var-arg method");
    }

    public static void main(String[] args) {
        VarArgPriority obj =3D new VarArgPriority();

        obj.m1(10);         // Calls the exact match method
        obj.m1(10, 20);     // No exact match, so calls var-arg method
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.10">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Single =
int method
Var-arg method
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:.4">=F0=9F=94=8D Explanati=
on:</h3>
<ul>
<li>
<p>When you call <code>m1(10)</code>, Java finds an <strong>exact match</st=
rong> (<code>m1(int a)</code>), so it uses that.</p></li>
<li>
<p>When you call <code>m1(10, 20)</code>, there=E2=80=99s <strong>no method=
</strong> that takes exactly two <code>int</code>s, so Java falls back to t=
he <strong>var-arg method</strong> (<code>m1(int... a)</code>).</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.4">=F0=9F=93=9D Summary:</h3>
<blockquote>
<p>A var-arg method acts like a <strong>backup option</strong>. Java will o=
nly use it if <strong>no better match</strong> is found among the overloade=
d methods =E2=80=94 just like the <code>default</code> case in a <code>swit=
ch</code> statement.</p>
</blockquote>
<p></p>
<h2 id=3D"CheatSheetJava-Var-argVsSingleDimensionalArrays">Var-arg Vs Singl=
e Dimensional Arrays</h2>
<p>Great question! Let's break it down clearly.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.4">=F0=9F=A7=A0 Concept:</h3>
<p>Yes, in Java, <strong>wherever you use a single-dimensional array as a m=
ethod parameter</strong>, you can <strong>replace it with a var-arg paramet=
er</strong> =E2=80=94 and it will work the same way.</p>
<p>This is because <strong>var-args are internally treated as single-dimens=
ional arrays</strong> by the Java compiler.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85ExamplewithSingle-DimensionalArray:">=E2=
=9C=85 Example with Single-Dimensional Array:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void display(int[] numbers) {
    for (int num : numbers) {
        System.out.println(num);
    }
}
</pre>
</div>
</div>
<p>You call it like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int[] n=
ums =3D {10, 20, 30};
display(nums);
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85SameExamplewithVar-Arg:">=E2=9C=85 Same E=
xample with Var-Arg:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void display(int... numbers) {
    for (int num : numbers) {
        System.out.println(num);
    }
}
</pre>
</div>
</div>
<p>Now you can call it in <strong>two ways</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">display=
(10, 20, 30); // direct values
display(new int[]{10, 20, 30}); // still works like an array
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DSummary:.1">=F0=9F=94=8D Summary:</h3>
<blockquote>
<p>Wherever you use a single-dimensional array as a method parameter, you c=
an replace it with a <strong>var-arg</strong> for more flexibility.<br>
It makes the method easier to use, especially when the number of inputs can=
 vary.</p>
</blockquote>
<p></p>
<p>Great question! Let's clarify this with a simple explanation and example=
.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.5">=F0=9F=A7=A0 Concept:</h3>
<p>While a <strong>var-arg parameter</strong> can be replaced with a <stron=
g>single-dimensional array</strong> in some cases, the <strong>reverse is n=
ot always true</strong>.</p>
<blockquote>
<p>You <strong>cannot always replace a var-arg parameter with a single-dime=
nsional array</strong>, especially when the method is <strong>called with i=
ndividual arguments</strong> instead of an array.</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85ExamplewithVar-Arg(Flexible):">=E2=9C=85 =
Example with Var-Arg (Flexible):</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void show(int... numbers) {
    for (int num : numbers) {
        System.out.println(num);
    }
}
</pre>
</div>
</div>
<p>You can call it like:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">show(10=
, 20, 30); // =E2=9C=85 Works
show(new int[]{10, 20, 30}); // =E2=9C=85 Also works
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CNowtryreplacingwithasingle-dimensionalarr=
ay:">=E2=9D=8C Now try replacing with a single-dimensional array:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void show(int[] numbers) {
    for (int num : numbers) {
        System.out.println(num);
    }
}
</pre>
</div>
</div>
<p>Now try calling it like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">show(10=
, 20, 30); // =E2=9D=8C Compile-time error!
</pre>
</div>
</div>
<p>You <strong>must</strong> call it like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">show(ne=
w int[]{10, 20, 30}); // =E2=9C=85 Works
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhy?">=F0=9F=94=8D Why?</h3>
<ul>
<li>
<p>A <strong>var-arg</strong> method allows you to pass <strong>individual =
values</strong> or an <strong>array</strong>.</p></li>
<li>
<p>A <strong>single-dimensional array</strong> method <strong>only accepts =
an array</strong> =E2=80=94 not individual values.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.5">=F0=9F=93=9D Summary:</h3>
<blockquote>
<p>You can replace a single-dimensional array with a var-arg for more flexi=
bility.<br>
But you <strong>cannot always replace a var-arg with an array</strong>, bec=
ause the method call might pass <strong>individual values</strong>, which a=
n array parameter <strong>cannot accept directly</strong>.</p>
</blockquote>
<p></p>
<p></p>
<h2 id=3D"CheatSheetJava-main()method"><code>main()</code><strong> method</=
strong></h2>
<p></p>
<p>Sure! Let=E2=80=99s understand the <code>main()</code><strong> method</s=
trong> in Java in <strong>layman terms</strong> with a simple example.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Whatismain()?">=F0=9F=A7=A0 What is <c=
ode>main()</code>?</h3>
<p>Think of a Java program like a <strong>movie script</strong>. The <code>=
main()</code> method is like the <strong>starting scene</strong> =E2=80=94 =
it tells the computer <strong>where to begin</strong> reading and executing=
 your code.</p>
<p>Without a <code>main()</code> method, Java doesn=E2=80=99t know <strong>=
where to start</strong>, so the program won=E2=80=99t run.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEBasicStructure:">=F0=9F=A7=BE Basic St=
ructure:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DBreakingitdowninsimpleterms:">=F0=9F=
=94=8D Breaking it down in simple terms:</h3>
<ul>
<li>
<p><code>public</code>: This means <strong>anyone can access</strong> this =
method (Java needs to access it to start your program).</p></li>
<li>
<p><code>static</code>: This means you <strong>don=E2=80=99t need to create=
 an object</strong> to run this method =E2=80=94 Java can run it directly.<=
/p></li>
<li>
<p><code>void</code>: This means the method <strong>doesn=E2=80=99t return =
anything</strong>.</p></li>
<li>
<p><code>main</code>: This is the <strong>name</strong> Java looks for to s=
tart your program.</p></li>
<li>
<p><code>String[] args</code>: This is a way to <strong>pass information</s=
trong> to your program from the command line (you can ignore it for now if =
you're just starting out).</p></li>
<li>
<p>If we are changing anything to the main method signature <strong>public =
static void main(String[] args) then we will get runtime exception saying -=
 NoSuchMethodError:main</strong></p></li>
</ul>
<p></p>
<p>Only these following changes are applicable</p>
<ol start=3D"1">
<li>
<p>We can change the order of modifiers i.e. instead of public static we ca=
n write as static public.</p></li>
<li>
<p>We can declare String array in any valid form - String[] args, String []=
args, String args[].</p></li>
<li>
<p>Instead of args we can take any valid java identifier.</p></li>
<li>
<p>Instead of String[] we can take var-arg String parameter is String=E2=80=
=A6</p></li>
<li>
<p>main(String[] args) =3D main(String=E2=80=A6 args)</p></li>
<li>
<p>main() method can be declared with the following modifiers like final, s=
ynchronized and strictfp.</p></li>
</ol>
<p></p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AAExample:.3">=F0=9F=A7=AA Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Calculator {
    public static void main(String[] args) {
        int a =3D 5;
        int b =3D 3;
        int sum =3D a + b;
        System.out.println("Sum is: " + sum);
    }
}
</pre>
</div>
</div>
<p>=F0=9F=96=A5=EF=B8=8F When you run this program, Java starts from the <c=
ode>main()</code> method and prints:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Sum is:=
 8
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.6">=F0=9F=93=9D Summary:</h3>
<blockquote>
<p>The <code>main()</code> method is the <strong>entry point</strong> of an=
y Java program. It=E2=80=99s where the program <strong>starts running</stro=
ng>. Without it, your code is like a book with no first page =E2=80=94 Java=
 won=E2=80=99t know where to begin.</p>
</blockquote>
<p></p>
<p>Great question! Let=E2=80=99s break this down in <strong>simple, layman =
terms</strong> so it=E2=80=99s easy to understand.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Whatyou'reasking:">=F0=9F=A7=A0 What y=
ou're asking:</h3>
<p>You're talking about <strong>how Java checks for the </strong><code>main=
()</code><strong> method</strong>, and <strong>when</strong> it does that =
=E2=80=94 during <strong>compilation</strong> or <strong>runtime</strong>.<=
/p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85KeyIdea:">=E2=9C=85 Key Idea:</h3>
<blockquote>
<p><strong>The Java compiler does NOT check whether the </strong><code>main=
()</code><strong> method exists or is correctly declared.</strong><br>
That check is done <strong>at runtime</strong> by the <strong>JVM (Java Vir=
tual Machine)</strong>.</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyisthat?">=F0=9F=94=8D Why is that?<=
/h3>
<p>When you compile a Java program, the compiler only checks for <strong>sy=
ntax errors</strong> =E2=80=94 like missing semicolons, wrong keywords, etc=
.</p>
<p>But it <strong>doesn=E2=80=99t care</strong> whether your class has a <c=
ode>main()</code> method or not.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=AAWhathappensatruntime?">=F0=9F=A7=AA Wh=
at happens at runtime?</h3>
<p>When you run a Java program, the <strong>JVM looks for this exact method=
</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
static void main(String[] args)
</pre>
</div>
</div>
<p>If it <strong>can=E2=80=99t find it</strong>, you=E2=80=99ll get a <stro=
ng>runtime error</strong> like:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Error: =
Main method not found in class MyClass, please define the main method as:
   public static void main(String[] args)
</pre>
</div>
</div>
<p>Or:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Excepti=
on in thread "main" java.lang.NoSuchMethodError: main
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.10">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Test {
    // No main method here!
    public void sayHello() {
        System.out.println("Hello!");
    }
}
</pre>
</div>
</div>
<p>This will <strong>compile successfully</strong>, but when you try to run=
 it:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">java Te=
st
</pre>
</div>
</div>
<p>You=E2=80=99ll get a <strong>runtime error</strong> because the JVM can=
=E2=80=99t find the <code>main()</code> method.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.7">=F0=9F=93=9D Summary:</h3>
<ul>
<li>
<p>=E2=9C=85 <strong>Compiler</strong>: Doesn=E2=80=99t check for <code>mai=
n()</code> method.</p></li>
<li>
<p>=E2=9C=85 <strong>JVM (at runtime)</strong>: Looks for <code>public stat=
ic void main(String[] args)</code>.</p></li>
<li>
<p>=E2=9D=8C If not found: You get a <strong>runtime error</strong> like <c=
ode>NoSuchMethodError: main</code>.</p></li>
</ul>
<p></p>
<p>Great! Let's break this down in <strong>simple terms</strong> and then l=
ook at a <strong>code example</strong> to make it crystal clear.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.6">=F0=9F=A7=A0 Concept:</h3>
<p>In Java, <strong>static methods (including </strong><code>main</code><st=
rong>) can be inherited</strong> by child classes. This means:</p>
<blockquote>
<p>If a <strong>child class does not have its own </strong><code>main()</co=
de><strong> method</strong>, and you try to run that child class, Java will=
 <strong>look up the inheritance chain</strong> and execute the <strong>par=
ent class=E2=80=99s </strong><code>main()</code><strong> method</strong>.</=
p>
</blockquote>
<p>This is because <code>main()</code> is just a <strong>static method</str=
ong>, and static methods <strong>can be inherited</strong>, even though the=
y <strong>cannot be overridden</strong> in the traditional sense.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:.11">=E2=9C=85 Example:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class P=
arent {
    public static void main(String[] args) {
        System.out.println("Main method in Parent class");
    }
}

class Child extends Parent {
    // No main method here
}
</pre>
</div>
</div>
<p>Now, if you <strong>run the </strong><code>Child</code><strong> class</s=
trong> like this:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">java Ch=
ild
</pre>
</div>
</div>
<p>=F0=9F=91=89 Java will <strong>not find a </strong><code>main()</code><s=
trong> method in </strong><code>Child</code>, so it will <strong>use the in=
herited one from </strong><code>Parent</code>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutput:.11">=F0=9F=A7=BE Output:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Main me=
thod in Parent class
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhydoesthishappen?">=F0=9F=94=8D Why d=
oes this happen?</h3>
<ul>
<li>
<p>Java treats <code>main()</code> like any other <code>static</code> metho=
d.</p></li>
<li>
<p>Static methods are <strong>inherited</strong>, but <strong>not overridde=
n</strong>.</p></li>
<li>
<p>So if the child class doesn=E2=80=99t define its own <code>main()</code>=
, the JVM will use the one from the parent.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.8">=F0=9F=93=9D Summary:</h3>
<blockquote>
<p>If a child class doesn=E2=80=99t have a <code>main()</code> method, but =
its parent does, Java will execute the <strong>parent=E2=80=99s </strong><c=
ode>main()</code><strong> method</strong> when you run the child class.<br>
This works because <code>main()</code> is a static method, and static metho=
ds are <strong>inherited</strong>.</p>
</blockquote>
<p></p>
<p>Excellent question! Let's clarify the difference between <strong>method =
overriding</strong> and <strong>method hiding</strong>, especially in the c=
ontext of <strong>static methods</strong> in Java.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0KeyConcept:">=F0=9F=A7=A0 Key Concept:=
</h3>
<ul>
<li>
<p><strong>Overriding</strong> happens with <strong>instance methods</stron=
g> (non-static).</p></li>
<li>
<p><strong>Hiding</strong> happens with <strong>static methods</strong>.</p=
></li>
</ul>
<blockquote>
<p>Static methods <strong>cannot be overridden</strong>, but they <strong>c=
an be hidden</strong> by declaring a method with the same signature in the =
child class.</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:MethodHidingwithStaticMethods">=
=E2=9C=85 Example: Method Hiding with Static Methods</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class P=
arent {
    static void display() {
        System.out.println("Static method in Parent");
    }
}

class Child extends Parent {
    static void display() {
        System.out.println("Static method in Child");
    }
}

public class Test {
    public static void main(String[] args) {
        Parent p =3D new Child();
        p.display(); // Output: Static method in Parent
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:.5">=F0=9F=94=8D Explanati=
on:</h3>
<ul>
<li>
<p>Even though <code>p</code> is referring to a <code>Child</code> object, =
the method call <code>p.display()</code> uses the <strong>type of the refer=
ence</strong> (<code>Parent</code>), not the object.</p></li>
<li>
<p>This is because <strong>static methods are resolved at compile time</str=
ong>, not at runtime.</p></li>
<li>
<p>So, the method in <code>Parent</code> is called =E2=80=94 this is called=
 <strong>method hiding</strong>, not overriding.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=81ComparewithOverriding(InstanceMethod):=
">=F0=9F=94=81 Compare with Overriding (Instance Method):</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class P=
arent {
    void show() {
        System.out.println("Instance method in Parent");
    }
}

class Child extends Parent {
    void show() {
        System.out.println("Instance method in Child");
    }
}

public class Test {
    public static void main(String[] args) {
        Parent p =3D new Child();
        p.show(); // Output: Instance method in Child
    }
}
</pre>
</div>
</div>
<p>Here, the method is <strong>overridden</strong>, and the version in <cod=
e>Child</code> is called at <strong>runtime</strong>.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.9">=F0=9F=93=9D Summary:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"e6=
61dc66-2c04-4574-a739-60c5d09dfd10" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Feature</p></th>
<th class=3D"confluenceTh">
<p>Static Method (Hiding)</p></th>
<th class=3D"confluenceTh">
<p>Instance Method (Overriding)</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Resolved at</p></td>
<td class=3D"confluenceTd">
<p>Compile time</p></td>
<td class=3D"confluenceTd">
<p>Runtime</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Based on</p></td>
<td class=3D"confluenceTd">
<p>Reference type</p></td>
<td class=3D"confluenceTd">
<p>Object type</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Can be overridden?</p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C No (only hidden)</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Polymorphism support</p></td>
<td class=3D"confluenceTd">
<p>=E2=9D=8C No</p></td>
<td class=3D"confluenceTd">
<p>=E2=9C=85 Yes</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Great question! Let's break this down in <strong>simple terms</strong> a=
nd then look at <strong>examples</strong> to make it clear.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Concept:.7">=F0=9F=A7=A0 Concept:</h3>
<p>Yes, the <code>main()</code><strong> method can be overloaded</strong> i=
n Java =E2=80=94 just like any other method. That means you can have <stron=
g>multiple versions</strong> of <code>main()</code> with different paramete=
r types.</p>
<p>However:</p>
<blockquote>
<p><strong>The JVM will always call only the standard </strong><code>main(S=
tring[] args)</code><strong> method</strong> when you run the program.</p>
</blockquote>
<p>If you want to run the other overloaded versions, you must <strong>call =
them explicitly</strong> from inside the standard <code>main()</code> metho=
d.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:Overloadingmain()">=E2=9C=85 Exam=
ple: Overloading <code>main()</code></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class MainOverload {

    // Standard main method - called by JVM
    public static void main(String[] args) {
        System.out.println("Main with String[] args");

        // Calling other overloaded main methods explicitly
        main(10);
        main("Hello");
    }

    public static void main(int x) {
        System.out.println("Main with int: " + x);
    }

    public static void main(String msg) {
        System.out.println("Main with String: " + msg);
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=BEOutputwhenyouruntheprogram:">=F0=9F=A7=
=BE Output when you run the program:</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Main wi=
th String[] args
Main with int: 10
Main with String: Hello
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExplanation:.6">=F0=9F=94=8D Explanati=
on:</h3>
<ul>
<li>
<p>The JVM <strong>only looks for</strong> <code>public static void main(St=
ring[] args)</code> to start the program.</p></li>
<li>
<p>Other versions like <code>main(int x)</code> or <code>main(String msg)</=
code> are <strong>just regular static methods</strong> with the same name.<=
/p></li>
<li>
<p>You must <strong>call them manually</strong> from the standard <code>mai=
n()</code> method.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.10">=F0=9F=93=9D Summary:</h3=
>
<blockquote>
<p>You <strong>can overload</strong> the <code>main()</code> method in Java=
, but only the version with <code>String[] args</code> is recognized and ca=
lled by the JVM when the program starts.<br>
Any other versions must be <strong>called explicitly</strong> like normal m=
ethods.</p>
</blockquote>
<p></p>
<p></p>
<p>Great question!</p>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Canweconfigureamethodotherthanmain()as=
theentrypointinJava?">=F0=9F=A7=A0 Can we configure a method other than <co=
de>main()</code> as the entry point in Java?</h3>
<blockquote>
<p><strong>No</strong>, in standard Java, you <strong>cannot configure any =
other method</strong> to act as the starting point of your program <strong>=
instead of</strong> <code>public static void main(String[] args)</code>.</p=
>
</blockquote>
<p>The <strong>JVM (Java Virtual Machine)</strong> is <strong>hardcoded</st=
rong> to look for this exact method signature to start execution:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
static void main(String[] args)
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=9B=A0=EF=B8=8FButarethereworkarounds?">=F0=
=9F=9B=A0=EF=B8=8F But are there workarounds?</h3>
<p>Yes, there are <strong>indirect ways</strong> to control what happens fi=
rst:</p>
<h4 id=3D"CheatSheetJava-=E2=9C=851.Callyourcustommethodfrommain()">=E2=9C=
=85 1. <strong>Call your custom method from </strong><code>main()</code></h=
4>
<p>You can define any method you want and call it from <code>main()</code>:=
</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class MyApp {
    public static void main(String[] args) {
        startApp(); // your custom method
    }

    public static void startApp() {
        System.out.println("Custom start method");
    }
}
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-=E2=9C=852.Useaframework(likeSpringBoot)">=E2=9C=
=85 2. <strong>Use a framework (like Spring Boot)</strong></h4>
<p>Frameworks like <strong>Spring Boot</strong> or <strong>JavaFX</strong> =
internally still use <code>main()</code>, but they let you define your own =
"starting logic" in other methods or classes.</p>
<h4 id=3D"CheatSheetJava-=E2=9C=853.Customlauncher(advanced)">=E2=9C=85 3. =
<strong>Custom launcher (advanced)</strong></h4>
<p>You could write a custom class loader or use a script to launch your pro=
gram differently, but <strong>even then</strong>, the JVM still needs a <co=
de>main()</code> method somewhere to begin.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.11">=F0=9F=93=9D Summary:</h3=
>
<blockquote>
<p>In standard Java, the <code>main(String[] args)</code><strong> method is=
 mandatory</strong> as the entry point.<br>
You can=E2=80=99t replace it, but you can <strong>delegate</strong> to any =
other method from within it.</p>
</blockquote>
<p></p>
<h2 id=3D"CheatSheetJava-printstatementinjava">print statement in java</h2>
<p>Absolutely! Let's break down the Java statement:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println("Hello, world!");
</pre>
</div>
</div>
<p>into <strong>simple, layman-friendly parts</strong> so you understand wh=
at each piece does.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A91.System">=F0=9F=A7=A9 1. <code>System=
</code></h3>
<ul>
<li>
<p>Think of <code>System</code> as a <strong>toolbox</strong> provided by J=
ava.</p></li>
<li>
<p>It contains useful tools and utilities that help you interact with the s=
ystem (like the computer screen, keyboard, etc.).</p></li>
<li>
<p>It's a <strong>class</strong> in Java's standard library.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A92.out">=F0=9F=A7=A9 2. <code>out</code=
></h3>
<ul>
<li>
<p>Inside the <code>System</code> toolbox, there's a tool called <code>out<=
/code>.</p></li>
<li>
<p><code>out</code> is a <strong>built-in object</strong> that represents t=
he <strong>standard output stream</strong> =E2=80=94 basically, your <stron=
g>computer screen</strong>.</p></li>
<li>
<p>It=E2=80=99s like saying: =E2=80=9CHey Java, I want to send something to=
 the screen.=E2=80=9D</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A93.println">=F0=9F=A7=A9 3. <code>print=
ln</code></h3>
<ul>
<li>
<p>This is a <strong>method</strong> (a set of instructions) that tells Jav=
a to <strong>print a line of text</strong>.</p></li>
<li>
<p><code>println</code> stands for <strong>"print line"</strong> =E2=80=94 =
it prints the message and then moves the cursor to the next line.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A94.&quot;Hello,world!&quot;">=F0=9F=A7=
=A9 4. <code>"Hello, world!"</code></h3>
<ul>
<li>
<p>This is the <strong>message</strong> you want to print.</p></li>
<li>
<p>It=E2=80=99s a <strong>String</strong> (text enclosed in double quotes).=
</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Puttingitalltogether:">=F0=9F=A7=A0 Pu=
tting it all together:</h3>
<blockquote>
<p><code>System.out.println("Hello, world!");</code><br>
Means:<br>
=E2=80=9CUse Java=E2=80=99s built-in toolbox (<code>System</code>), grab th=
e screen output tool (<code>out</code>), and print this message (<code>prin=
tln</code>) to the screen: <code>"Hello, world!"</code>.=E2=80=9D</p>
</blockquote>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.12">=F0=9F=93=9D Summary:</h3=
>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"b8=
f810c5-1b27-4608-8dc3-b10f504d4dd4" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Part</p></th>
<th class=3D"confluenceTh">
<p>Meaning in Simple Terms</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>System</code></p></td>
<td class=3D"confluenceTd">
<p>Java's toolbox</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>out</code></p></td>
<td class=3D"confluenceTd">
<p>The screen output tool inside the toolbox</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>println()</code></p></td>
<td class=3D"confluenceTd">
<p>A command to print a message and go to next line</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>"Hello, world!"</code></p></td>
<td class=3D"confluenceTd">
<p>The message you want to show</p></td>
</tr>
</tbody>
</table>
</div>
<p>Sure! Let's now explain the Java statement:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">System.=
out.println("Hello, world!");
</pre>
</div>
</div>
<p>in <strong>technical terms</strong>, breaking down each component precis=
ely:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DTechnicalBreakdown:">=F0=9F=94=8D Tech=
nical Breakdown:</h3>
<h4 id=3D"CheatSheetJava-1.System">1. <code>System</code></h4>
<ul>
<li>
<p><code>System</code> is a <strong>final class</strong> in the <code>java.=
lang</code> package.</p></li>
<li>
<p>It provides access to system-level resources and utilities.</p></li>
<li>
<p>Since <code>java.lang</code> is automatically imported, you can use <cod=
e>System</code> without an import statement.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-2.out">2. <code>out</code></h4>
<ul>
<li>
<p><code>out</code> is a <strong>public static final field</strong> of the =
<code>System</code> class.</p></li>
<li>
<p>It is an instance of <code>PrintStream</code>, which is a class in <code=
>java.io</code>.</p></li>
<li>
<p>Declaration:</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">  publi=
c static final PrintStream out;
</pre>
</div>
</div>
<ul>
<li>
<p>Being <code>static</code>, it can be accessed using the class name (<cod=
e>System.out</code>), without creating an object of <code>System</code>.</p=
></li>
</ul>
<h4 id=3D"CheatSheetJava-3.println()">3. <code>println()</code></h4>
<ul>
<li>
<p><code>println()</code> is a <strong>method</strong> of the <code>PrintSt=
ream</code> class.</p></li>
<li>
<p>It is <strong>overloaded</strong> to accept different data types: <code>=
String</code>, <code>int</code>, <code>boolean</code>, <code>char</code>, <=
code>double</code>, etc.</p></li>
<li>
<p>In this case, the version used is:</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">  publi=
c void println(String x)
</pre>
</div>
</div>
<ul>
<li>
<p>It prints the string to the standard output stream (typically the consol=
e) and then <strong>terminates the line</strong> by writing a newline chara=
cter.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-4.&quot;Hello,world!&quot;">4. <code>"Hello, world=
!"</code></h4>
<ul>
<li>
<p>This is a <strong>String literal</strong> =E2=80=94 a sequence of charac=
ters enclosed in double quotes.</p></li>
<li>
<p>It is passed as an argument to the <code>println()</code> method.</p></l=
i>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0ExecutionFlow:">=F0=9F=A7=A0 Execution=
 Flow:</h3>
<ol start=3D"1">
<li>
<p>The JVM encounters <code>System.out.println("Hello, world!");</code>.</p=
></li>
<li>
<p>It accesses the <code>System</code> class.</p></li>
<li>
<p>It uses the <code>out</code> field (a <code>PrintStream</code> object) t=
o access the <code>println()</code> method.</p></li>
<li>
<p>It calls <code>println()</code> with the string <code>"Hello, world!"</c=
ode>.</p></li>
<li>
<p>The message is printed to the <strong>standard output stream</strong> (u=
sually the console), followed by a newline.</p></li>
</ol>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=9DSummary:.13">=F0=9F=93=9D Summary:</h3=
>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"f9=
9899f5-5979-4734-b590-b9cb0167628a" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Component</p></th>
<th class=3D"confluenceTh">
<p>Type</p></th>
<th class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>System</code></p></td>
<td class=3D"confluenceTd">
<p>Class (<code>java.lang</code>)</p></td>
<td class=3D"confluenceTd">
<p>Provides access to system-level resources</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>out</code></p></td>
<td class=3D"confluenceTd">
<p>Static field</p></td>
<td class=3D"confluenceTd">
<p>A <code>PrintStream</code> object for standard output</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>println(String)</code></p></td>
<td class=3D"confluenceTd">
<p>Method</p></td>
<td class=3D"confluenceTd">
<p>Prints a string followed by a newline</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>"Hello, world!"</code></p></td>
<td class=3D"confluenceTd">
<p>String literal</p></td>
<td class=3D"confluenceTd">
<p>The message to be printed</p></td>
</tr>
</tbody>
</table>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">class T=
est {
static String =3D"Rahul"
}

Test.name.length();

Test is a class name
name - static variable of type String present in Test class
length() - method present in String class



class System {
static PrintStream out;
}

System.out.println();

System is a class present in java.lang package
out - static variable of type PrintStream present in System class
println() - its a method present in PrintStream class</pre>
</div>
</div>
<p></p>
<h2 id=3D"CheatSheetJava-CommandLineArguments">Command Line Arguments</h2>
<p>In Java, <strong>command line arguments</strong> are a way to pass infor=
mation into a program when it starts. These arguments are passed to the <co=
de>main</code> method as an array of <code>String</code> values.</p>
<h3 id=3D"CheatSheetJava-BasicSyntax">Basic Syntax</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class CommandLineExample {
    public static void main(String[] args) {
        for (int i =3D 0; i &lt; args.length; i++) {
            System.out.println("Argument " + i + ": " + args[i]);
        }
    }
}
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-HowtoRun">How to Run</h3>
<p>If you compile and run this program from the command line:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">javac C=
ommandLineExample.java
java CommandLineExample Hello World 123
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-Output">Output</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Argumen=
t 0: Hello
Argument 1: World
Argument 2: 123
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-Notes">Notes</h3>
<ul>
<li>
<p><code>args.length</code> gives the number of arguments.</p></li>
<li>
<p>All arguments are treated as <code>String</code>s, so you may need to pa=
rse them (e.g., <code>Integer.parseInt(args[0])</code>) if you expect numbe=
rs.</p></li>
</ul>
<p></p>
<p>You're absolutely right! The <strong>main objective of command line argu=
ments</strong> in Java is to <strong>customize the behavior of the </strong=
><code>main</code><strong> method</strong> at runtime without changing the =
code. This allows the same program to behave differently based on the input=
 provided when it's executed.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85ExplanationwithanExample">=E2=9C=85 <stro=
ng>Explanation with an Example</strong></h3>
<p>Let=E2=80=99s say you want to create a program that <strong>greets a use=
r</strong>. Instead of hardcoding the name, you can pass it as a command li=
ne argument.</p>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9JavaProgram:Greeting.java">=F0=9F=94=
=B9 Java Program: <code>Greeting.java</code></h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Greeting {
    public static void main(String[] args) {
        if (args.length &gt; 0) {
            String name =3D args[0];
            System.out.println("Hello, " + name + "! Welcome to Java.");
        } else {
            System.out.println("Hello! Please provide your name as a comman=
d line argument.");
        }
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9HowtoRunIt">=F0=9F=94=B9 How to Run It=
</h3>
<ol start=3D"1">
<li>
<p><strong>Compile the program:</strong></p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">javac G=
reeting.java
</pre>
</div>
</div>
<ol start=3D"2">
<li>
<p><strong>Run with a command line argument:</strong></p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">java Gr=
eeting Alice
</pre>
</div>
</div>
<ol start=3D"3">
<li>
<p><strong>Output:</strong></p></li>
</ol>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">Hello, =
Alice! Welcome to Java.
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhyThisIsUseful">=F0=9F=94=8D Why This=
 Is Useful</h3>
<ul>
<li>
<p>You can <strong>reuse the same code</strong> for different inputs.</p></=
li>
<li>
<p>It=E2=80=99s helpful in <strong>automation scripts</strong>, <strong>bat=
ch processing</strong>, or <strong>configurable tools</strong>.</p></li>
<li>
<p>You can pass <strong>file names</strong>, <strong>user preferences</stro=
ng>, <strong>modes (debug, verbose)</strong>, etc.</p></li>
</ul>
<p></p>
<p>Great point! In Java, <strong>command line arguments are always received=
 as strings</strong>, and <strong>spaces are used to separate them</strong>=
. So, if an argument itself contains spaces (like a full name or a sentence=
), you must <strong>enclose it in double quotes</strong> when passing it fr=
om the command line.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85Example:HandlingSpacesinCommandLineArgume=
nts">=E2=9C=85 <strong>Example: Handling Spaces in Command Line Arguments</=
strong></h3>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9JavaProgram:FullNameGreeting.java">=F0=
=9F=94=B9 Java Program: <code>FullNameGreeting.java</code></h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class FullNameGreeting {
    public static void main(String[] args) {
        if (args.length &gt; 0) {
            System.out.println("You entered:");
            for (int i =3D 0; i &lt; args.length; i++) {
                System.out.println("Argument " + i + ": " + args[i]);
            }
        } else {
            System.out.println("Please provide your full name as a command =
line argument.");
        }
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9CompileandRun">=F0=9F=94=B9 Compile an=
d Run</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">javac F=
ullNameGreeting.java
java FullNameGreeting "John Doe"
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9Output">=F0=9F=94=B9 Output</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">You ent=
ered:
Argument 0: John Doe
</pre>
</div>
</div>
<p>If you <strong>don=E2=80=99t use quotes</strong>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">java Fu=
llNameGreeting John Doe
</pre>
</div>
</div>
<h3 id=3D"CheatSheetJava-=F0=9F=94=B9Output.1">=F0=9F=94=B9 Output</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">You ent=
ered:
Argument 0: John
Argument 1: Doe
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DSummary">=F0=9F=94=8D Summary</h3>
<ul>
<li>
<p><strong>With quotes</strong>: <code>"John Doe"</code> =E2=86=92 one argu=
ment</p></li>
<li>
<p><strong>Without quotes</strong>: <code>John Doe</code> =E2=86=92 two arg=
uments</p></li>
</ul>
<p>This is especially useful when passing:</p>
<ul>
<li>
<p>Full names</p></li>
<li>
<p>File paths with spaces</p></li>
<li>
<p>Sentences or phrases</p></li>
</ul>
<p></p>
<p>In Java, the number of command line arguments you can pass to the <code>=
main</code> method is technically <strong>not limited by the Java language =
itself</strong>, but rather by the <strong>operating system and the command=
 line shell</strong> you're using.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85MinimumNumberofArguments">=E2=9C=85 <stro=
ng>Minimum Number of Arguments</strong></h3>
<ul>
<li>
<p><strong>Minimum</strong>: <code>0</code></p>
<ul>
<li>
<p>You can run a Java program without passing any command line arguments.</=
p></li>
<li>
<p>In this case, <code>args.length =3D=3D 0</code>.</p></li>
</ul></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85MaximumNumberofArguments">=E2=9C=85 <stro=
ng>Maximum Number of Arguments</strong></h3>
<ul>
<li>
<p><strong>Maximum</strong>: Depends on the <strong>maximum length of the c=
ommand line</strong> supported by your OS and shell.</p>
<ul>
<li>
<p>For example:</p></li>
<li>
<p><strong>Windows</strong>: Around <strong>32,768 characters</strong> (inc=
luding the command and all arguments).</p></li>
<li>
<p><strong>Linux/macOS</strong>: Typically <strong>128 KB to 256 KB</strong=
> of total command line length.</p></li>
</ul></li>
</ul>
<p>So, the <strong>maximum number of arguments</strong> depends on:</p>
<ul>
<li>
<p>The <strong>length of each argument</strong></p></li>
<li>
<p>The <strong>total command line length limit</strong></p></li>
</ul>
<p>If each argument is short (e.g., one character), you can pass <strong>th=
ousands</strong> of arguments. But if each argument is long, the number wil=
l be much smaller.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExample">=F0=9F=94=8D Example</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">java My=
Program arg1 arg2 arg3 ... argN
</pre>
</div>
</div>
<p>If the total length of this command exceeds the OS limit, you'll get an =
error like:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">The com=
mand line is too long.
</pre>
</div>
</div>
<hr>
<p></p>
<h2 id=3D"CheatSheetJava-JavaCodingStandards">Java Coding Standards</h2>
<p>Java coding standards are a set of guidelines and best practices that he=
lp developers write <strong>clean, readable, maintainable, and consistent c=
ode</strong>. Following these standards is especially important in team env=
ironments and large projects.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85KeyJavaCodingStandards">=E2=9C=85 <strong=
>Key Java Coding Standards</strong></h3>
<h4 id=3D"CheatSheetJava-1.ClassNaming">1. <strong>Class Naming</strong></h=
4>
<ul>
<li>
<p>Use <strong>PascalCase</strong> (each word starts with a capital letter)=
.</p></li>
<li>
<p>Class names should be <strong>nouns</strong>.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class StudentDetails { }
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-2.MethodNaming">2. <strong>Method Naming</strong><=
/h4>
<ul>
<li>
<p>Use <strong>camelCase</strong> (first word lowercase, subsequent words c=
apitalized).</p></li>
<li>
<p>Method names should be <strong>verbs</strong>.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void calculateTotalMarks() { }
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-3.VariableNaming">3. <strong>Variable Naming</stro=
ng></h4>
<ul>
<li>
<p>Use <strong>camelCase</strong>.</p></li>
<li>
<p>Names should be <strong>meaningful and descriptive</strong>.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">int tot=
alMarks;
String studentName;
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-4.ConstantNaming">4. <strong>Constant Naming</stro=
ng></h4>
<ul>
<li>
<p>Use <strong>ALL_UPPERCASE</strong> with words separated by underscores.<=
/p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
static final int MAX_STUDENTS =3D 100;
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-5.IndentationandBraces">5. <strong>Indentation and=
 Braces</strong></h4>
<ul>
<li>
<p>Use <strong>4 spaces</strong> for indentation (avoid tabs).</p></li>
<li>
<p>Always use <strong>curly braces </strong><code>{}</code> even for single=
-line blocks.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">if (isP=
assed) {
    System.out.println("Congratulations!");
}
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-6.Comments">6. <strong>Comments</strong></h4>
<ul>
<li>
<p>Use <code>//</code> for single-line comments and <code>/* */</code> for =
multi-line.</p></li>
<li>
<p>Write <strong>clear, concise, and meaningful</strong> comments.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">// Calc=
ulate average marks
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-7.PackageNaming">7. <strong>Package Naming</strong=
></h4>
<ul>
<li>
<p>Use <strong>lowercase</strong> letters.</p></li>
<li>
<p>Typically follows reverse domain name convention.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">package=
 com.example.studentapp;
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-8.AvoidMagicNumbers">8. <strong>Avoid Magic Number=
s</strong></h4>
<ul>
<li>
<p>Use named constants instead of hard-coded values.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">final i=
nt PASS_MARK =3D 35;
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-9.LimitLineLength">9. <strong>Limit Line Length</s=
trong></h4>
<ul>
<li>
<p>Keep lines under <strong>80=E2=80=93100 characters</strong> for better r=
eadability.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-10.UseProperAccessModifiers">10. <strong>Use Prope=
r Access Modifiers</strong></h4>
<ul>
<li>
<p>Use <code>private</code>, <code>protected</code>, and <code>public</code=
> appropriately to enforce encapsulation.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CExampleApplyingStandards">=F0=9F=93=8C=
 Example Applying Standards</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">package=
 com.school.management;

public class Student {
    private String studentName;
    private int totalMarks;
    private static final int PASS_MARK =3D 35;

    public Student(String name, int marks) {
        this.studentName =3D name;
        this.totalMarks =3D marks;
    }

    public boolean hasPassed() {
        return totalMarks &gt;=3D PASS_MARK;
    }

    public void displayResult() {
        if (hasPassed()) {
            System.out.println(studentName + " has passed.");
        } else {
            System.out.println(studentName + " has failed.");
        }
    }
}
</pre>
</div>
</div>
<hr>
<p>Would you like a downloadable checklist or template for Java coding stan=
dards?</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>Java Coding Standards Checklist</p>
<ol start=3D"1">
<li>
<p>Naming Conventions</p>
<ul>
<li>
<p>Class Names: Use PascalCase (e.g., StudentDetails)</p></li>
<li>
<p>Method Names: Use camelCase (e.g., calculateTotalMarks)</p></li>
<li>
<p>Variable Names: Use camelCase (e.g., totalMarks, studentName)</p></li>
<li>
<p>Constant Names: Use ALL_UPPERCASE with underscores (e.g., MAX_STUDENTS)<=
/p></li>
<li>
<p>Package Names: Use lowercase letters (e.g., com.example.studentapp)</p><=
/li>
</ul></li>
<li>
<p>Formatting</p>
<ul>
<li>
<p>Indentation: Use 4 spaces for indentation (avoid tabs)</p></li>
<li>
<p>Braces: Always use curly braces {} even for single-line blocks</p></li>
<li>
<p>Line Length: Keep lines under 80=E2=80=93100 characters</p></li>
</ul></li>
<li>
<p>Comments</p>
<ul>
<li>
<p>Single-line comments: Use // for single-line comments</p></li>
<li>
<p>Multi-line comments: Use /* */ for multi-line comments</p></li>
<li>
<p>Write clear, concise, and meaningful comments</p></li>
</ul></li>
<li>
<p>Constants</p>
<ul>
<li>
<p>Avoid Magic Numbers: Use named constants instead of hard-coded values</p=
></li>
</ul></li>
<li>
<p>Access Modifiers</p>
<ul>
<li>
<p>Use private, protected, and public appropriately to enforce encapsulatio=
n</p></li>
</ul></li>
<li>
<p>Best Practices</p>
<ul>
<li>
<p>Use meaningful and descriptive names for variables, methods, and classes=
</p></li>
<li>
<p>Limit the scope of variables as much as possible</p></li>
<li>
<p>Avoid deep nesting of code</p></li>
<li>
<p>Use proper exception handling</p></li>
<li>
<p>Write unit tests for your code</p></li>
<li>
<p>Follow the DRY (Don't Repeat Yourself) principle</p></li>
<li>
<p>Use design patterns where applicable</p></li>
</ul></li>
</ol>
</div>
</div>
<p></p>
<p>"When writing code, it is strongly recommended to follow established cod=
ing conventions. The names of classes and methods should clearly convey the=
ir purpose and functionality to enhance readability and maintainability."</=
p>
<p>Sure! Here's a simple example that demonstrates how <strong>naming conve=
ntions</strong> can reflect the <strong>purpose and functionality</strong> =
of a class and method:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=8CWithoutClearNaming(NotRecommended)">=E2=
=9D=8C <strong>Without Clear Naming (Not Recommended)</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class A {
    public void m1() {
        System.out.println("Hello!");
    }
}
</pre>
</div>
</div>
<p>It's unclear what this class or method does just by looking at the names=
.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85WithClearNaming(Recommended)">=E2=9C=85 <=
strong>With Clear Naming (Recommended)</strong></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Greeter {
    public void displayGreeting() {
        System.out.println("Hello!");
    }
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>Greeter</code> clearly indicates that the class is responsible for=
 greeting.</p></li>
<li>
<p><code>displayGreeting()</code> tells us exactly what the method does.</p=
></li>
</ul>
<hr>
<p>This small change makes the code <strong>self-explanatory</strong>, easi=
er to <strong>read</strong>, and <strong>maintain</strong>=E2=80=94especial=
ly in larger projects or when working in teams.</p>
<p><strong><u>Coding Standards for classes</u></strong></p>
<p>You're absolutely right! In Java, <strong>class names</strong> should fo=
llow a specific naming convention to improve readability and maintain consi=
stency.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaClassNamingConvention">=E2=9C=85 <str=
ong>Java Class Naming Convention</strong></h3>
<ul>
<li>
<p>Class names should be <strong>nouns</strong> because they often represen=
t objects or entities.</p></li>
<li>
<p>The name should start with an <strong>uppercase letter</strong>.</p></li=
>
<li>
<p>If the name contains <strong>multiple words</strong>, each inner word sh=
ould also start with an <strong>uppercase letter</strong> (this is called <=
strong>PascalCase</strong> or <strong>UpperCamelCase</strong>).</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExample.1">=F0=9F=94=8D <strong>Exampl=
e</strong></h3>
<h4 id=3D"CheatSheetJava-=E2=9D=8CNotRecommended">=E2=9D=8C Not Recommended=
</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class studentdetails {
    // code
}
</pre>
</div>
</div>
<ul>
<li>
<p>All lowercase</p></li>
<li>
<p>Hard to read</p></li>
<li>
<p>Doesn't follow naming conventions</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=E2=9C=85Recommended">=E2=9C=85 Recommended</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class StudentDetails {
    // code
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>StudentDetails</code> is a noun</p></li>
<li>
<p>Each word starts with an uppercase letter</p></li>
<li>
<p>Easy to read and understand</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CWhyItMatters">=F0=9F=93=8C Why It Matt=
ers</h3>
<p>Following this convention:</p>
<ul>
<li>
<p>Makes your code <strong>more readable</strong></p></li>
<li>
<p>Helps other developers <strong>understand your code quickly</strong></p>=
</li>
<li>
<p>Aligns with <strong>industry standards</strong> and tools like IDEs and =
linters</p></li>
</ul>
<p></p>
<p><strong><u>Coding Standards For Interfaces</u></strong></p>
<p>Great observation! Let's break this down clearly with an explanation and=
 example.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaInterfaceNamingConvention">=E2=9C=85 =
<strong>Java Interface Naming Convention</strong></h3>
<ul>
<li>
<p><strong>Interface names</strong> are usually <strong>adjectives</strong>=
 because they describe a <strong>capability or behavior</strong> that a cla=
ss can implement.</p></li>
<li>
<p>They should follow <strong>PascalCase</strong> (each word starts with an=
 uppercase letter).</p></li>
<li>
<p>Examples: <code>Runnable</code>, <code>Serializable</code>, <code>Clonea=
ble</code>, <code>Movable</code></p></li>
</ul>
<p>These names describe what a class <strong>can do</strong>:</p>
<ul>
<li>
<p>A class that implements <code>Runnable</code> <strong>can be run</strong=
>.</p></li>
<li>
<p>A class that implements <code>Serializable</code> <strong>can be seriali=
zed</strong>.</p></li>
<li>
<p>A class that implements <code>Cloneable</code> <strong>can be cloned</st=
rong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9D=97NoteonThrowable">=E2=9D=97 Note on <code>=
Throwable</code></h3>
<ul>
<li>
<p><code>Throwable</code> is <strong>not</strong> an interface=E2=80=94it's=
 a <strong>class</strong>.</p></li>
<li>
<p>It acts as the <strong>root class</strong> for all exceptions and errors=
 in Java.</p></li>
<li>
<p>All exceptions (<code>Exception</code>, <code>RuntimeException</code>) a=
nd errors (<code>Error</code>) extend <code>Throwable</code>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExample.2">=F0=9F=94=8D <strong>Exampl=
e</strong></h3>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Interface">=F0=9F=94=B9 Interface</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
interface Movable {
    void move();
}
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9ClassImplementingtheInterface">=F0=9F=
=94=B9 Class Implementing the Interface</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Car implements Movable {
    @Override
    public void move() {
        System.out.println("The car is moving.");
    }
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>Movable</code> is an adjective describing the capability.</p></li>
<li>
<p><code>Car</code> is a noun representing an object that <strong>can move<=
/strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CSummary">=F0=9F=93=8C Summary</h3>
<div class=3D"table-wrap">
<table data-layout=3D"default" data-local-id=3D"3a3cf960-7ad7-4bb6-b855-a2a=
371a13f72" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Type</p></th>
<th class=3D"confluenceTh">
<p>Naming Style</p></th>
<th class=3D"confluenceTh">
<p>Example</p></th>
<th class=3D"confluenceTh">
<p>Purpose</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Class</p></td>
<td class=3D"confluenceTd">
<p>Noun</p></td>
<td class=3D"confluenceTd">
<p><code>Car</code>, <code>StudentDetails</code></p></td>
<td class=3D"confluenceTd">
<p>Represents an object or entity</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Interface</p></td>
<td class=3D"confluenceTd">
<p>Adjective</p></td>
<td class=3D"confluenceTd">
<p><code>Runnable</code>, <code>Movable</code></p></td>
<td class=3D"confluenceTd">
<p>Describes a capability or behavior</p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<p>An <strong>adjective</strong> is a word that <strong>describes or modifi=
es a noun</strong>. It gives more information about a person, place, thing,=
 or idea by answering questions like:</p>
<ul>
<li>
<p><strong>What kind?</strong></p></li>
<li>
<p><strong>Which one?</strong></p></li>
<li>
<p><strong>How many?</strong></p></li>
<li>
<p><strong>How much?</strong></p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85ExamplesofAdjectives">=E2=9C=85 Examples =
of Adjectives</h3>
<div class=3D"table-wrap">
<table data-layout=3D"default" data-local-id=3D"2485036a-0ce0-4799-b339-7b7=
c126076e4" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Noun</p></th>
<th class=3D"confluenceTh">
<p>Adjective + Noun</p></th>
<th class=3D"confluenceTh">
<p>Meaning</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>car</p></td>
<td class=3D"confluenceTd">
<p>fast car</p></td>
<td class=3D"confluenceTd">
<p>Describes the speed of the car</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>student</p></td>
<td class=3D"confluenceTd">
<p>intelligent student</p></td>
<td class=3D"confluenceTd">
<p>Describes the student's quality</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>book</p></td>
<td class=3D"confluenceTd">
<p>interesting book</p></td>
<td class=3D"confluenceTd">
<p>Describes the nature of the book</p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DInJavaInterfaceNaming">=F0=9F=94=8D In=
 Java Interface Naming</h3>
<p>In programming, especially in Java, interface names are often <strong>ad=
jectives</strong> because they describe a <strong>capability</strong> or <s=
trong>behavior</strong> that a class can have.</p>
<p>For example:</p>
<ul>
<li>
<p><code>Runnable</code> =E2=86=92 describes something that <strong>can run=
</strong></p></li>
<li>
<p><code>Serializable</code> =E2=86=92 describes something that <strong>can=
 be serialized</strong></p></li>
<li>
<p><code>Movable</code> =E2=86=92 describes something that <strong>can move=
</strong></p></li>
</ul>
<p>These adjectives describe <strong>what the object is capable of doing</s=
trong>, not what it is.</p>
<hr>
<p><strong><u>Coding Standards For Methods</u></strong></p>
<p>You're absolutely right! In Java, <strong>method names</strong> follow a=
 specific naming convention to make code more readable and meaningful.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaMethodNamingConvention">=E2=9C=85 <st=
rong>Java Method Naming Convention</strong></h3>
<ul>
<li>
<p>Method names should be <strong>verbs</strong> or <strong>verb-noun combi=
nations</strong> because they represent <strong>actions or behaviors</stron=
g>.</p></li>
<li>
<p>They should start with a <strong>lowercase letter</strong>.</p></li>
<li>
<p>If the name has multiple words, use <strong>camelCase</strong>:</p>
<ul>
<li>
<p>First word: lowercase</p></li>
<li>
<p>Inner words: start with uppercase</p></li>
</ul></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExamples">=F0=9F=94=8D Examples</h3>
<div class=3D"table-wrap">
<table data-layout=3D"default" data-local-id=3D"c69949ec-5ca1-4b52-90b0-4b4=
6c8b409fb" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Type</p></th>
<th class=3D"confluenceTh">
<p>Examples</p></th>
<th class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Verb</p></td>
<td class=3D"confluenceTd">
<p><code>run()</code>, <code>sleep()</code>, <code>eat()</code></p></td>
<td class=3D"confluenceTd">
<p>Simple actions</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Verb + Noun</p></td>
<td class=3D"confluenceTd">
<p><code>getName()</code>, <code>setSalary()</code></p></td>
<td class=3D"confluenceTd">
<p>Action + object being acted upon</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Boolean-style Verb</p></td>
<td class=3D"confluenceTd">
<p><code>isAvailable()</code>, <code>hasAccess()</code></p></td>
<td class=3D"confluenceTd">
<p>Often used for methods returning <code>boolean</code></p></td>
</tr>
</tbody>
</table>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CExampleinCode">=F0=9F=93=8C Example in=
 Code</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Employee {
    private String name;
    private double salary;

    public void setName(String name) {
        this.name =3D name; // verb + noun
    }

    public String getName() {
        return name; // verb + noun
    }

    public void work() {
        System.out.println(name + " is working."); // verb
    }

    public void takeBreak() {
        System.out.println(name + " is taking a break."); // verb + noun
    }
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>setName()</code> and <code>getName()</code> are <strong>verb-noun<=
/strong> combinations.</p></li>
<li>
<p><code>work()</code> and <code>takeBreak()</code> are <strong>verbs</stro=
ng> or <strong>actions</strong>.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0WhyItMatters">=F0=9F=A7=A0 Why It Matt=
ers</h3>
<ul>
<li>
<p>Makes code <strong>self-explanatory</strong></p></li>
<li>
<p>Improves <strong>readability</strong> and <strong>maintainability</stron=
g></p></li>
<li>
<p>Helps developers understand what a method does at a glance</p></li>
</ul>
<p></p>
<p>Sure! Here's a brief and clear explanation of <strong>nouns</strong> and=
 <strong>verbs</strong>, especially in the context of both language and pro=
gramming:</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=9F=A6WhatisaNoun?">=F0=9F=9F=A6 <strong>Wha=
t is a Noun?</strong></h3>
<p>A <strong>noun</strong> is a word that <strong>names a person, place, th=
ing, or idea</strong>.</p>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9ExamplesinEnglish:">=F0=9F=94=B9 Examp=
les in English:</h4>
<ul>
<li>
<p><strong>Person</strong>: teacher, doctor</p></li>
<li>
<p><strong>Place</strong>: school, city</p></li>
<li>
<p><strong>Thing</strong>: book, computer</p></li>
<li>
<p><strong>Idea</strong>: happiness, freedom</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9InJava:">=F0=9F=94=B9 In Java:</h4>
<ul>
<li>
<p>Class names are usually <strong>nouns</strong> because they represent <s=
trong>objects or entities</strong>.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">  publi=
c class Student { }
  public class InvoiceGenerator { }
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=9F=A9WhatisaVerb?">=F0=9F=9F=A9 <strong>Wha=
t is a Verb?</strong></h3>
<p>A <strong>verb</strong> is a word that <strong>describes an action or a =
state</strong>.</p>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9ExamplesinEnglish:.1">=F0=9F=94=B9 Exa=
mples in English:</h4>
<ul>
<li>
<p>run, eat, sleep, think, jump</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9InJava:.1">=F0=9F=94=B9 In Java:</h4>
<ul>
<li>
<p>Method names are usually <strong>verbs</strong> or <strong>verb-noun com=
binations</strong> because they represent <strong>actions</strong>.</p></li=
>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">  publi=
c void run() { }
  public void calculateTotal() { }
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0QuickTiptoRemember:">=F0=9F=A7=A0 Quic=
k Tip to Remember:</h3>
<ul>
<li>
<p><strong>Noun =3D What it is</strong></p></li>
<li>
<p><strong>Verb =3D What it does</strong></p></li>
</ul>
<p></p>
<p><strong><u>Coding Standards For Variables</u></strong></p>
<p>You're absolutely right again! Let's break this down clearly and explain=
 it with a proper example.</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaVariableNamingConvention(CamelCase)">=
=E2=9C=85 <strong>Java Variable Naming Convention (Camel Case)</strong></h3=
>
<ul>
<li>
<p><strong>Variable names</strong> are usually <strong>nouns</strong> becau=
se they represent <strong>data or objects</strong>.</p></li>
<li>
<p>They should follow <strong>camelCase</strong>:</p>
<ul>
<li>
<p>Start with a <strong>lowercase letter</strong></p></li>
<li>
<p>If the name has multiple words, each <strong>inner word starts with an u=
ppercase letter</strong></p></li>
</ul></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DExamplesofVariableNames">=F0=9F=94=8D =
Examples of Variable Names</h3>
<div class=3D"table-wrap">
<table data-layout=3D"default" data-local-id=3D"0e4e54d8-f0b4-4cf8-8997-5c9=
b7ab8aa8d" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Variable Name</p></th>
<th class=3D"confluenceTh">
<p>Description</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>caseNumber</code></p></td>
<td class=3D"confluenceTd">
<p>A number assigned to a case</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>carrierName</code></p></td>
<td class=3D"confluenceTd">
<p>The name of a carrier</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p><code>caseCharacter</code></p></td>
<td class=3D"confluenceTd">
<p>A character related to a case</p></td>
</tr>
</tbody>
</table>
</div>
<p>These are all <strong>nouns</strong> and follow <strong>camelCase</stron=
g> formatting.</p>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CExampleinJavaCode">=F0=9F=93=8C Exampl=
e in Java Code</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class CaseInfo {
    String caseNumber;
    String carrierName;
    char caseCharacter;

    public void printCaseInfo() {
        System.out.println("Case Number: " + caseNumber);
        System.out.println("Carrier Name: " + carrierName);
        System.out.println("Case Character: " + caseCharacter);
    }
}
</pre>
</div>
</div>
<ul>
<li>
<p><code>caseNumber</code>, <code>carrierName</code>, and <code>caseCharact=
er</code> are <strong>descriptive nouns</strong>.</p></li>
<li>
<p>They follow <strong>camelCase</strong>: lowercase first word, uppercase =
for each inner word.</p></li>
<li>
<p>This makes the code <strong>clear</strong>, <strong>consistent</strong>,=
 and <strong>easy to understand</strong>.</p></li>
</ul>
<hr>
<p><strong><u>Coding Standards For Constants</u></strong></p>
<p>You're absolutely right! In Java, <strong>constants</strong> follow a sp=
ecific naming convention and are declared using the <code>static</code> and=
 <code>final</code> modifiers. Let's break this down clearly:</p>
<hr>
<h3 id=3D"CheatSheetJava-=E2=9C=85JavaConstantNamingConvention">=E2=9C=85 <=
strong>Java Constant Naming Convention</strong></h3>
<ul>
<li>
<p>Constants are usually <strong>nouns</strong> because they represent <str=
ong>fixed values</strong>.</p></li>
<li>
<p>Constant names should be written in <strong>ALL UPPERCASE</strong> lette=
rs.</p></li>
<li>
<p>If the name contains multiple words, they should be separated by <strong=
>underscores (</strong><code>_</code><strong>)</strong>.</p></li>
<li>
<p>Constants are declared using the <code>static final</code> keywords.</p>=
</li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=94=8DWhystaticfinal?">=F0=9F=94=8D Why <cod=
e>static final</code>?</h3>
<ul>
<li>
<p><code>static</code>: So the constant belongs to the class, not to instan=
ces.</p></li>
<li>
<p><code>final</code>: So the value cannot be changed once assigned.</p></l=
i>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=93=8CExampleinJavaCode.1">=F0=9F=93=8C Exam=
ple in Java Code</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Bank {
    public static final double INTEREST_RATE =3D 0.05;
    public static final int MAX_WITHDRAWAL_LIMIT =3D 50000;

    public void displayBankPolicy() {
        System.out.println("Interest Rate: " + INTEREST_RATE);
        System.out.println("Max Withdrawal Limit: " + MAX_WITHDRAWAL_LIMIT)=
;
    }
}
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-Explanation:">Explanation:</h4>
<ul>
<li>
<p><code>INTEREST_RATE</code> and <code>MAX_WITHDRAWAL_LIMIT</code> are <st=
rong>constants</strong>.</p></li>
<li>
<p>They are <strong>nouns</strong>, written in <strong>uppercase</strong>, =
and use <strong>underscores</strong> to separate words.</p></li>
<li>
<p>Their values are <strong>fixed</strong> and <strong>shared across all in=
stances</strong> of the class.</p></li>
</ul>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0WhyThisMatters">=F0=9F=A7=A0 Why This =
Matters</h3>
<ul>
<li>
<p>Makes constants <strong>easy to identify</strong> in code.</p></li>
<li>
<p>Prevents accidental modification of important values.</p></li>
<li>
<p>Improves <strong>readability</strong>, <strong>consistency</strong>, and=
 <strong>maintainability</strong>.</p></li>
</ul>
<p></p>
<p><strong><u>Java Bean Coding Standard</u></strong></p>
<p>Great! Let's go over the <strong>JavaBean coding standards</strong> step=
 by step, with clear explanations and examples for each point.</p>
<hr>
<h2 id=3D"CheatSheetJava-=F0=9F=9F=A9WhatisaJavaBean?">=F0=9F=9F=A9 What is=
 a JavaBean?</h2>
<p>A <strong>JavaBean</strong> is a simple Java class that follows specific=
 conventions:</p>
<ul>
<li>
<p>It has <strong>private properties</strong> (fields).</p></li>
<li>
<p>It provides <strong>public getter and setter methods</strong> to access =
and modify those properties.</p></li>
<li>
<p>It must have a <strong>public no-argument constructor</strong>.</p></li>
<li>
<p>It should be <strong>serializable</strong> (optional but common).</p></l=
i>
</ul>
<hr>
<h2 id=3D"CheatSheetJava-=E2=9C=85JavaBeanCodingStandardsExplainedwithExamp=
les">=E2=9C=85 JavaBean Coding Standards Explained with Examples</h2>
<h3 id=3D"CheatSheetJava-1.PrivateProperties">1. <strong>Private Properties=
</strong></h3>
<ul>
<li>
<p>All fields should be declared <code>private</code> to follow the princip=
le of <strong>encapsulation</strong>.</p></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">private=
 String name;
private int age;
private boolean active;
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-2.SetterMethod">2. <strong>Setter Method</strong><=
/h3>
<ul>
<li>
<p>Method name must start with <code>set</code>.</p></li>
<li>
<p>It must take <strong>one argument</strong> (the value to set).</p></li>
<li>
<p>Return type must be <code>void</code>.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Syntax:">=F0=9F=94=B9 Syntax:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void setPropertyName(Type value) {
    this.propertyName =3D value;
}
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Example:">=F0=9F=94=B9 Example:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void setName(String name) {
    this.name =3D name;
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-3.GetterMethod">3. <strong>Getter Method</strong><=
/h3>
<ul>
<li>
<p>Method name must start with <code>get</code>.</p></li>
<li>
<p>It must take <strong>no arguments</strong>.</p></li>
<li>
<p>Return type must <strong>not be void</strong>.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Syntax:.1">=F0=9F=94=B9 Syntax:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
Type getPropertyName() {
    return propertyName;
}
</pre>
</div>
</div>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Example:.1">=F0=9F=94=B9 Example:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
String getName() {
    return name;
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-4.BooleanPropertyGetter">4. <strong>Boolean Proper=
ty Getter</strong></h3>
<ul>
<li>
<p>For boolean fields, the getter can start with either <code>get</code> or=
 <code>is</code>.</p></li>
<li>
<p><strong>Recommended</strong>: use <code>is</code>.</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Example:.2">=F0=9F=94=B9 Example:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
boolean isActive() {
    return active;
}
</pre>
</div>
</div>
<hr>
<h2 id=3D"CheatSheetJava-=F0=9F=A7=A9FullExample:JavaBeanClass">=F0=9F=A7=
=A9 Full Example: JavaBean Class</h2>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
class Employee {
    private String name;
    private int age;
    private boolean active;

    // No-argument constructor
    public Employee() { }

    // Setter methods
    public void setName(String name) {
        this.name =3D name;
    }

    public void setAge(int age) {
        this.age =3D age;
    }

    public void setActive(boolean active) {
        this.active =3D active;
    }

    // Getter methods
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public boolean isActive() {
        return active;
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Summary.2">=F0=9F=A7=A0 Summary</h3>
<div class=3D"table-wrap">
<table data-layout=3D"default" data-local-id=3D"cd01c527-d1e7-4396-a784-447=
a59023cce" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Feature</p></th>
<th class=3D"confluenceTh">
<p>Rule</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Property</p></td>
<td class=3D"confluenceTd">
<p>Must be <code>private</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Setter Method</p></td>
<td class=3D"confluenceTd">
<p>Starts with <code>set</code>, takes one argument, returns <code>void</co=
de></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Getter Method</p></td>
<td class=3D"confluenceTd">
<p>Starts with <code>get</code>, no arguments, returns the property type</p=
></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Boolean Getter</p></td>
<td class=3D"confluenceTd">
<p>Can start with <code>is</code> (preferred) or <code>get</code></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Naming Convention</p></td>
<td class=3D"confluenceTd">
<p>Follows <strong>camelCase</strong> for method and variable names</p></td=
>
</tr>
</tbody>
</table>
</div>
<p></p>
<p><strong><u>Coding Standard For Listeners</u></strong></p>
<p>Great question! Let's go over the <strong>Java coding standards for list=
ener methods</strong>, especially how to <strong>register</strong> and <str=
ong>unregister</strong> listeners using standard naming conventions.</p>
<hr>
<h2 id=3D"CheatSheetJava-=E2=9C=85JavaListenerMethodNamingStandards">=E2=9C=
=85 Java Listener Method Naming Standards</h2>
<p>In Java, <strong>listeners</strong> are used to handle events (like butt=
on clicks, mouse movements, etc.). To manage listeners, we follow these nam=
ing conventions:</p>
<h3 id=3D"CheatSheetJava-1.RegisteringaListener">1. <strong>Registering a L=
istener</strong></h3>
<ul>
<li>
<p>Method name should start with <code>add</code></p></li>
<li>
<p>Followed by the <strong>type of listener</strong> (e.g., <code>ActionLis=
tener</code>, <code>MouseListener</code>)</p></li>
<li>
<p>The method should take an argument of the <strong>listener type</strong>=
</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Example:.3">=F0=9F=94=B9 Example:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void addActionListener(ActionListener listener) {
    // code to register the listener
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-2.UnregisteringaListener">2. <strong>Unregistering=
 a Listener</strong></h3>
<ul>
<li>
<p>Method name should start with <code>remove</code></p></li>
<li>
<p>Followed by the <strong>type of listener</strong></p></li>
<li>
<p>The method should take the <strong>same type of argument</strong> as the=
 <code>add</code> method</p></li>
</ul>
<h4 id=3D"CheatSheetJava-=F0=9F=94=B9Example:.4">=F0=9F=94=B9 Example:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">public =
void removeActionListener(ActionListener listener) {
    // code to unregister the listener
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A9FullExample">=F0=9F=A7=A9 Full Example=
</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">import =
java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class Button {
    private List&lt;ActionListener&gt; actionListeners =3D new ArrayList&lt=
;&gt;();

    // Register a listener
    public void addActionListener(ActionListener listener) {
        actionListeners.add(listener);
    }

    // Unregister a listener
    public void removeActionListener(ActionListener listener) {
        actionListeners.remove(listener);
    }

    // Simulate a button click
    public void click() {
        for (ActionListener listener : actionListeners) {
            listener.actionPerformed(null); // Normally an ActionEvent is p=
assed
        }
    }
}
</pre>
</div>
</div>
<hr>
<h3 id=3D"CheatSheetJava-=F0=9F=A7=A0Summary.3">=F0=9F=A7=A0 Summary</h3>
<div class=3D"table-wrap">
<table data-layout=3D"default" data-local-id=3D"7bfea734-bc2e-4d40-b5bf-00e=
854aa5046" class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh">
<p>Action</p></th>
<th class=3D"confluenceTh">
<p>Method Name Format</p></th>
<th class=3D"confluenceTh">
<p>Argument Type</p></th>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Register</p></td>
<td class=3D"confluenceTd">
<p><code>add</code> + ListenerType (e.g., <code>addActionListener</code>)</=
p></td>
<td class=3D"confluenceTd">
<p>Listener interface (e.g., <code>ActionListener</code>)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>Unregister</p></td>
<td class=3D"confluenceTd">
<p><code>remove</code> + ListenerType (e.g., <code>removeActionListener</co=
de>)</p></td>
<td class=3D"confluenceTd">
<p>Same as above</p></td>
</tr>
</tbody>
</table>
</div>
<p>This naming convention is part of the <strong>JavaBeans event model</str=
ong> and is widely used in GUI frameworks like <strong>Swing</strong> and <=
strong>JavaFX</strong>.</p>
<p></p>
    </div>
</body>
</html>
------=_Part_14_1195019268.1750505967557
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: file:///C:/e4626df387c2f1c095d6ba9e80b8fcb6a96ab8d88503ad3106062dd3553be1bd

iVBORw0KGgoAAAANSUhEUgAAA34AAAD6CAYAAAD+4JVHAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAg
AElEQVR4nOzdiZd8VXUv8LfyJzyzkryXrJWsDE9fEpVoFBVnRQUFUQERBGWQQXAGQURFRSGKzIgo
IJMgowyCjDIoKJMKMqMMMgkiDghqEj1vfc7r3Z5fUdW/7q7b3be693ets6rqVtW955577977u/c+
+/yPkkgkEone4D//8z/Lt771rXLZZZeVJ554om774x//uKDHjP3ffffd5dZbb13QYyUSiUQikVga
/I+l7kAikUgk/kS+DjvssPL+97+/7LTTTmX//fdftONec801ZY011igf+MAHFvyYiUQikUgkFh9J
/BKJRGKJEeTrkUceKe985zvr+5NPPrmstdZa5Re/+MUqv1ko3HnnneXQQw8tBxxwQI06JhKJRCKR
WF5I4pdIJBJLjCB1P/7xj8snPvGJmub5oQ99qLzrXe8qDzzwwCq/WQj893//d309//zzy3777bdg
x0kkEolEIrF0SOKXSCQSS4w//OEP9fVHP/pR2XTTTcsuu+xSrr766vLBD36w3HPPPfW7xSB+Z5xx
RjniiCMW7DiJRCKRSCSWDkn8EolEYokRpO7hhx8uL3/5y8s555xTfvrTn5Ztt912UVI9g/idddZZ
5cADD1yw4yQSiUQikVg6JPFLJBKJHiCIHeKluMtb3/rWcuyxxy7KsX/729+Wj3zkI2WdddYp6623
Xnnve987Xd0zopGJRCKRSCQmG0n8EolEokdAAH/1q1+Vxx9/fKm7kkgkEolEYhkhiV8ikUgsAkTO
FjJd074dQ9qm1zhe22K733TdFvr8EolEIpFIjIckfolEIrHACMJVpubTWZhdeqVlE37/+9+X3/3u
d9Pbotnmu2h+q/3Xf/3X9Gu8931fgPw5xySBiUQikUj0C0n8EolEYgERBOjnP/95+cY3vlEXaN97
773Le97znlq103y+HXfcsWy55ZZ1bt273/3u2rz33c4771x/t+uuu9YlHszFs32PPfYoe+65Z/no
Rz9a92X9vTPPPLP84Ac/KA8++GAtDvPQQw+VRx99tK4P+Mtf/rK+3nvvveW2224rN954Y7n++uvL
DTfcUL7//e/X91q8t92+vPf6wx/+sP5Hu+mmm+pnv4lXx0Reg+BGlDGRSCQSiUQ/kMQvkUgkFghB
ghRK+cAHPlC23377sskmm5Q3vvGNZeONN65VO3fYYYe6fbvttquLt/u8zTbblK222qq87W1vq4Tw
7W9/e32/2Wab1f9rb3nLW8qb3/zmum2jjTYq6667bnnBC15QnvGMZ5S11167bL755mWnnXaqZHH3
3XcvW2+9dXnta19bXvSiF5XnPve55V/+5V/K//2//7c8+9nPrv951rOeVd8//elPL8985jPLc57z
nLp9jTXWqNue97znlTXXXLP+16vf2P7CF76w/Ou//mt58YtfXPt9yCGHVLIoGlkWYeH5xcR801mT
BCcSiUSiD0jil0gkEguAIH0WYEeIEDQE7JhjjqlRMpE3Ebmf/exndRkHzWeROtEzzX/b99p9991X
X++///763n5im1drAZ5wwgnl9a9/fbngggvKhRdeWImiKOJJJ51USZmInXbLLbeU22+/fbrdcccd
NRqo+Rzv289eEVn/1fzH66WXXlpJpuUokNAvfvGL0ymok0Z6pKoirlnRNJFIJBLLCUn8EolEYoGA
QIj0ieKJhMUSCYuxJt8pp5xSU0EtBv/1r399evtCHTv2e+edd9bUVdHC4447bkGPuRiIvpt3iZhL
Z50rzNf0/0QikUgklhJJ/BKJRKJjBFm47rrr6np8n/3sZ8vNN99ctw1W3uy6KfYC5vStv/765dBD
D50+7kJV9Gwre8axRDdf/epX1yhkmQDyF/37zW9+U0488cQ6l/Lkk0+eHk/zHM2t9F2gjQgOm9sY
r6eddlr52te+Vt+3BDznQyYSiURiMZHEL5FIJDpGGPFSLhE/BMLafGURCFDs3/EQv8suu2xRjhsI
YoMoSfs8/vjjF/X480WQMP02Z/L0008ve+21V/nKV74y/ZuDDjqo7LvvvvV9nI/zFdEbhDTX+I3/
BQFvtw/7nEgkEonEQiGJXyKRSHSMMOTNc0O+Lrnkkvo5SNFCIo5hHuE666xTvvrVr9bPizVfLY5z
99131wI1u+2226Icd1xEv6+++upy8MEH1/dXXHFFJX9B7I499thpIgtSP0U2FdI555xz6jYRwiOP
PLK87nWvq5VW4Qtf+EIl//fcc0+dB/nrX/+6pn5efPHFtaDP+973vhppLBNAkBOJRCIxuUjil0gk
Eh0jjPfDDz+8bLDBBuWaa66pnxeT+Ekz3XDDDSv5LEtA/BSZkRqJ2EwCot/GzVIaRx99dCXOkaIJ
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
0047rb4XsUXUJ3mME4mlQBK/RCJR0ZK+yy67rGy//fbVC/7EE09Mf59IJBLLDeHQaklEpBSeffbZ
ZY899ig777xzfbVm6dVXXz1dJfQnP/lJjULddNNNtejVW9/61vLAAw9M73eS0ZK/j33sY5V4lSU8
rzjuQw89VN7xjnfUOZpL2Z9EYhKRxC+RSEwrTqk8hxxySCV955577vR3qVgTicRKwCh5J+UR4Tv0
0ENrpMmagfvvv38lH1tttVUlfxdddFGdC40olWUwDzr6br3WT3ziE+Xxxx9fZftS9OX8888v6667
bjn++OMnemwTiaVCEr9EYoWjVe4WP953332nU5VymYZEIrFSMUr+/fa3v60LxFvLVArk3//935ct
ttiipnputtlm5Z577qm/m3RiEud+++23l/3222861XWpUj1FV803Xy4R1URiKZDEL5FYxhjlvW7n
6pkwf9RRR9V5Kt/85jdn/F8ikUisVAxLCSU/Rf9e8YpXlDXWWKO87GUvq1E/VUKvvfbaoemRw/bT
N0TfRDQVdllrrbXKO9/5zvKtb31rle8XA6Grrrzyyjq+5p1zUpqKsByrqCYSC4kkfonEMsYo0hfb
LXD8vve9r6bxPPzww3VbRvkSiURiNIK4xfp/UiBFxX784x/XpSKkfEr9VBRl1113rVVCL7300rrc
w6Bs7TsJFF1T2EYU80c/+lEtZrNUEHG8+eaba8rtNddcU/uTSCTmhiR+icQyRBgRFOWJJ55Y1zxq
t0tVMkdi2223rcULAn02QBKJRKJvGOVcAwVgkJQjjzyyfPKTn6wRs3322aecddZZdT3UmDOXSCQS
i4UkfonEMkSkvxx99NF1Dkp4psvUPAnFCZA+XuqScyUSiURiQYHk3XLLLeVrX/ta2WuvvWoBLa9k
tOhVVAkdNyU0nXeJRGImJPFLJMZApO1I8TFHzqKyxx13XC/6xNNsInysvYQM8jRvt912tShBmcO6
fNa1Ms/DeZYlWtohjJmvf/3rdaHkN7zhDdWIWqr+JBKJxEyItPpBIkZe3X///eWCCy6o6wV++MMf
rktFfPazny3f/va367zAwZR78psDbzakzm9y7lsikRiGJH6JxDzRKnQRNHM4zIV46UtfWtd0KktY
/ezee+8tm2++efUkx2feZQsSSzEa7P9M+3r00UfrPMBNN920fO9736vbFtuoiL5YYFnRBOXSzTlR
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
BGuO/wcDI3WxYF4iYAAAAABJRU5ErkJggg==
------=_Part_14_1195019268.1750505967557
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: file:///C:/a230f21414f0a9a4cb5e23291530ac56a34abbc023a196e593ed66d2bcb29d01

iVBORw0KGgoAAAANSUhEUgAAAm8AAAD6CAYAAAD3AqBRAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAg
AElEQVR4nOzdCbi1U90/8OYJDTIPSUmGiijSQKV5pghpUCqRCklIykwlUaFCIWODWYaMD5WhaBIy
lQbJnOr9v8P6X5/1nt9517Od8zznnOc5+97nnN/3uta19773ve+97nWv4bt+48NKIpFIJDrBf//3
f5f/+q//6roaiURiiuFhXVcgkUhMXfzP//zPcEmMD9lmiURiokjylkgkJoSRyEcSkrEh2unuu+8u
l19+eZXAJRKJxFiR5C2RSIwbQT7uuOOOctZZZ5Vzzz233H///bN9lxgZ0T6///3vy/rrr1+e//zn
l6uuuqoeSxXq+JHS38RMRJK3RCIxIXz9618vq6yySnnDG95QXvziF5c11lijXHHFFfW7lCSNjGgX
ZPcZz3hGedaznlXb8MILL6zH//M//7PjGk4t/L//9/+G2xR58zlJXGImIMlbIpEYM2JhvOaaayr5
OOigg+rnv//972Xdddctb37zm8sDDzww27mJ/0O0yZFHHlm23HLL8sMf/rC88IUvHCZvKXkbO6It
ETb975///OdsxxOJ6Ywkb4lEYsyIhfGrX/1qWW+99eqiCb/73e+q+m+llVYq1157bT2W0rfREW0z
a9as2m7IcEnyNiZEH/R68skn1w2Dvvia17ym7L///qm+T8wIJHlLJBJjRiyI22+/fXnf+95X3yMc
H/7wh8urXvWqsvbaa5fzzz+/Hk/yNjqibUjcXvSiF1XyW5K8jQnRB4844oiywAILlJ133rn86le/
Kt/85jfLUkstVdX5JclbYpojyVsikRgzYkHcaqutygc+8IH6/rjjjiuveMUrqh3XmmuuWc4777x6
PMnb6Ii2ueCCC6ra9Lrrrqufk7yNHaS/X/ziF+v7aM9tt922vPGNb8x2TEx7JHlLJBLjAgK34YYb
1oWS2nS11VYrRx99dPn1r39dVlxxxUpISpK3OSJIMJu31VdfPSVv84Boy3//+99lo402Km95y1uy
HRPTHkneEonEuGCx3HTTTcv73//+anS/2Wab1eNXXnlltXn78Y9/XD8neRsdQTi+973vVfIWkjfe
pqnuGxsQtCBp2m233XYriy22WDnqqKPqsWzHxHRGkrdEIjFufOhDHypLL710eec731luu+22euxH
P/pRWXnlldNhYQwIYqHN2AneeOON9XO22dgRbXjOOeeUddZZpzzzmc8sX/7yl4fDrSR5S0xnJHlL
JBJjRiyIBxxwQFl88cWHVaQkIFtvvXV5+ctfXu67777Zzk38L6I9brrppvLud7+7ekm+9KUvrdKi
j3zkI+Wzn/1sOfjgg8u//vWvrqs60Gi9Tffaa6+yzDLLVEnw9ddfP9v3icR0RpK3RCIxZsTCePvt
t1eJkeC8e+65Z3nb295WPf9OPPHE+n1KkB6KaLtbbrml7L777uXjH/94+cQnPlE+9alPlY9+9KNV
BU31l6Eu5oxol9NPP70SX44LicRMQ5K3RCIxLsTi+ac//al86UtfKh/72Mcq6bjkkktmi3afSEwW
9K+NN964vOMd7yj/8R//MXwskZgpSPKWSCTGjdEWylxA5w5txDMS6ZAdoLdkG46OaJt77rmnhlgh
reSp+8tf/rLGzDvmmGPKGWecMZxtIZGYrkjylkgkJgRStlbSxu4tiUeiH2AXSN3MUYHd4Mte9rLy
pje9qebZZXuJ3JXcTCSmMZK8JRKJRGLKgZTyL3/5S/nzn/9c7rzzzq6rk0j0FUneEolEIjEtQNKW
0rbETECSt0QikUhMOSBpobpXkrglZhKSvCUSiUQikUhMISR5SyQSiUQikZhCSPKWSExzpCdoItEt
Qq2bSMwvJHlLJKYpLBY88tpsB0icCP5CKSh33313+fvf/17+9re/lTvuuKP89a9/rd57Mij88Y9/
rHlLb7311poV4Oabb65FHk7lhhtuKL/97W/Lr3/96xpn6xe/+EW5+uqryxVXXFF++tOflssvv7xc
euml5aKLLirnnntuOfXUU8tpp51WfvCDH5STTz65HHfccTUu19FHH12+9rWvlf32268cfvjhNUXU
V77ylRoAeP/99y/77rtvTYP0+c9/vmYm+MxnPlN23nnnstNOO5VPfvKTZfvtt6+BgrfddtuyzTbb
1Lyr0k29613vKu95z3vKhz/84fKBD3ygvP/9769liy22KO973/tq8f3mm29ei/M322yzWjbZZJMa
BDYCwb797W8vr371q8vrXve6mtZKSIoor3/96+vx9ddfv7zmNa8pr33ta2d7VfxWad8rr3jFK8qL
XvSi8qpXvaq88pWvrNfwqvguirRjynrrrVdL+12cG79T4vz4zbrrrluLsBoveclL6mtvaY/Hexk0
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
jvXg9tlnn2W3BQAAaAvC2xFE4NqxY4cHtIceeshPP1Bwu+++++zll1+27du3+23SsNba15AJEyZY
7969s3EgDOAFAADtQXhLtFbPpjNIp02b5ofLq65Ns9qGDx9ub7zxhm3atMlvo/vEiJBDia+rAKhO
VEs6TgEAANqK8HYwqClIRcDav3+/n3AwefJkD22NjY3+52HDhtmMGTN8vEd633JWz1hxAwAA5ej2
4S2tZ1OAW758ua+wjRw50qZOnerboqNHj7YpU6bYtm3bWtwvne3WHmn9GwAAQHt0u/AW3Z5pfdqe
PXt8iK5W2dSIoEPiZ86caY888ogHudgeLXeVDQAAoLN0m/AWwSsNXwpts2bN8m5RhTZ1f+ryiBEj
fATIN998k91WNW0ENwAAUG3dIrwpeMU4Dv1ZTQivvPKKDR061Jqammzt2rX2zjvv+FapukE3b97s
t43tTUIbAADIi5oOb6XBS4fE19fXe8eoVth0lqg6PxXaxo8fb+vXr29x33Jr2gAAALpKzYW30no2
XV65cqU9+OCDNmrUKJszZ45t2bLFFixY4CGuoaHBvvrqq2yVjYG5AAAgz2omvJWusimELVq0yOrq
6rzxoLm52X799VdbsWKFXzdu3LisEcEOdpoS3AAAQN7VTHizgwFOpx3Mnj3bBg4c6MdQKaDprNHF
ixd7I4KCXNo9Sk0bAAAokpoJbwcOHPC5bOoc1aqa6td27tzp26M6EeHJJ5+0devWVfthAgAAdEhN
hTd1kGpVTatpakTQ6ptmt61ZsybbEmVrFAAAFFnNhLewZMkSu/nmm717dOPGjbZv3z6/XjVtGhMC
AABQZDUT3qK7VOeOfvfdd9l11LQBAIBaUjPhDQAAoDuoyfDGYF0AAFCrajK8AQAA1CrCGwAAQIEQ
3gAAAAqE8AYAAFAguQxvMeIDAAAALXU4vMUcNcIWAABA18vlypvCIIN1AQAA/q/D4U0nGsybN89+
++03v1zuClzcb/fu3Xbvvffae++955cJcQAAAP/pcHgbNmyYHXXUUdbY2OiX07CVbqcebmtV18eB
8T/++KOdc8459uqrr/rluD5u09rB8q19XbZxAQBALSo7vEVIe/HFF23AgAG2bNmyFte3dltrJVRF
qIvrt27dar1797Y333zTLyuslQa/1hoajvR5AACAWtClNW86IF7boLJhwwbbsmVLi89HwNq7d699
/vnn9vPPP9svv/xi/fv3t4ULF/rnYqXt999/t/fff9+WLFlif/75Z4v7//XXX/b333+3+Nr79+//
33UAAABF1+7wFqtoClHXX3+9r7rddtttHr4kAtOuXbvsxhtvtPr6eq9hO/fcc+2SSy6x2bNn++cj
eM2fP9+uvPJKO+uss+zSSy+1a6+91i644AL74IMPsr/zo48+squuusrOPvtsO+OMM+z222+3H374
wT+3c+dOGzJkiD333HPZ19yzZ4/V1dXZM8880/FnCAAAIEfaHd4iIG3evNnmzp1rU6ZMsVNPPdVe
f/11v/7AgQP+3++//9769OljJ598st199922bt06D1SXX365BztZu3at9ejRw2666SZflfv444+t
X79+HtCWLl2afZ0LL7zQHnvsMQ+OapDQtuo999yTBckJEybYMcccY6+99ppf1m179eplq1evbvGY
AQAAiq7sbdMIRNrqVCBbvHixX47wtn79erv44os9SIV3333Xr9u4caNfnjhxoq/Gbdu2LbvNmjVr
fIUtwttLL71kV199tW+takXt7bff9oaG+LrxOMaPH2/nnXeejRs3zu+/aNEiv55uVQAAUEs6HN42
bdrk4e3DDz/0y6o1k08//dTOP/98W7VqVXYf3UZhTcFORo4c6VuvloQsrcZpizXCm7ZctZ368MMP
ezhTMJs6dapvl1oyJFjuvPNO73xtamryy611pgIAABRZWeEtHe2h8KbVNK2ISTQTLF++3FfIvvzy
y+x+CnIXXXSR17BJQ0OD17JpRS18/fXXLcLb2LFj7cQTT7RBgwb5Nu1PP/2UPQZLQp+2XC+77DI7
88wz7f7777d9+/a1uB0AAEAt6PDK2/bt2722TYN6LVl5++STT7zxYOXKldl9VCen20Z9nAKXAl7c
1w5uk5522mnZtqcua2VPtW7hiy++sKeeesp27NjhlxUQtSL36KOP+sqdVvweeOCBLNgR4AAAQK1o
V3iLEKSxHW+99ZbNmDHDnn76aTvhhBN8y3L69OnZCpxW0Hr27JnNaxOFLTUfqAPVDnamPv7443b6
6afb0KFDbfDgwd6McOyxx2ZDfzVuRCt7+vrqcNVcOa2uDRw40Ovr1Oig4HbLLbdkK3iaOXfSSSfZ
E0880XnPFAAAQA6UFd5UbzZmzBi79dZbPXxNnjzZA9no0aOzejPNd5s0aZI1Nzdn99dW67Rp0zyE
BQUwBT59HQW2b7/91ubMmeMrd0GraepYVb3cDTfcYM8++8bIp3EAAACpSURBVGy2Eqf5cfq7NR/O
klElCxYs8FEh0UABAABQC3J5MH1rtAWq0EgYAwAA3VmHw5tCVemHJat0bak3i/vFUVilx2Ed6TJn
mwIAgO6iQw0LRwpIhwpV5QSrGAlypHNN23I9AABAURVm2xQAAACENwAAgEIhvAEAABQI4Q0AAKBA
CG8AAAAFQngDAAAoEMIbAABAgRDeAAAACoTwBgAAUCCENwAAgAL5F36X3kRJP3UyAAAAAElFTkSu
QmCC
------=_Part_14_1195019268.1750505967557
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: file:///C:/88523f142a792a8d2762bc585fc4533c6b4b51e0b4178ca64a4675fc42bf9f19

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
M2u9zzri6quvDhtssEHYcMMN4zJDzPcze/bs8OWXX3bo85hg8d///nfcB5RhPrPYbNfqHMovU46k
KQAuv/zy8Oijj7aaGLNejkUtzovNNtssThR68803d9m/maR1U7siaFVSd9dLeegsg1YRVGBUZI10
QDlBWAj0f//3f+M6U1woukq9BK1aHzf2OXdbLD3BseBObNSoUXFOmWrIrm3IQq5UXJ1V633WGddd
d11s2aKCIoCyzw8++OBwzz33dPgz09xAjXjX3FGHHXZYLjcGha699tqWFonCWceLqeWxqMV5MWPG
jLDlllvGMLHaaqvFMk23eVeo16CV1cjnpkGriGJLmDSC//znP2H//fePXStUOgMHDgynnXZaWLp0
aa7/br0ErXo6boSiCy+8MGyxxRbxWKQZlB988MFOfS5N/AS6ao1NrKd91lF33HFHrCQo72PHjg07
7bRT/E6nn356bGWsRLqY17osdyUmt01llADPgwd5oIz16tWr7DF2tTwWtT4v5syZE8vxmmuuGffB
8OHDc23pSkErLa+Tp84GrUY8Nxs+aN16663hsssui03S3AHw39lB2Yxjef7558O7775b9HMYM0AT
dmodoMDRL0zXxJgxY8p60onZt9kOtoHX3XffXfNZcR977LHYpdKnT5+4n3h66x//+EdcSqESaeI6
uiYnTpwYXwSIbEWfDVrp/VR+vIrdHfEeBkPSxcbFjObyhx566E/7jH+DLqHbbrst/g4vukf59+67
775WXUUdOW5diXEoKXRxTFge54033ij799k3BKz2BoRSnmnRZF/QakCwO/nkk2PTe2ErQr3vs0o9
/fTT4Ygjjoj7+MADD4yBgVYJWgHLvaiXczEvt/xWciyyGCDO9vK7tGjwoElXXE+4dnIN5UbtL3/5
S9hjjz3Cc8891+nPTWWXMkbQeuSRR1rKMT8v9d2qeSwSrins22OOOSZ+V/588803W72n3s6LW265
JQYtWro4NoMHD45drp3BzTdjpY477rhYdzHZKEGrcBHocvcvYyWffPLJP5Vr9jdL82THUpZbdxcq
N2jVY33c8EGLFwMr6a6hIPL/3NlScPDhhx+Gfv36xQNZrKvlnHPOaUnXHKA0hqDYi4G4hIgsmpi5
I+Tv+XdSsOEErUbXTjVQyE888cR44VhllVXidjKg+r333mvz9/iuaX2r7KtwfFAKWjR9H3vssa3e
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
L467ohVrwIABYaeddnKZHElSwzNoqWZYxogljJgDi5arDTfcMOy9995h/vz5td40SZKqwqClLvfm
m2/GObCY+4q1CJnJfezYsXHOMkmSuhODlrrMCy+8EA477LC4wPOIESPiHFgukyNJ6s4MWsrdo48+
Gvbbb7+wwQYbxK5CFvGeNGlSnN1dkqTuzKCl3Nxzzz0xWPEUIXNhEbBcJkeS1EwMWqq6m266KWyz
zTZxigaCFl2EZ555psvkSJKajkFLVfHbb7/FObCGDx8enyBkDNbOO+8cLrjgApfJkSQ1LYOWOiXN
gcUahASrLbbYomWZHMKXJEnNzKClDmEOrOnTp8c5sEaOHBm23357l8mRJKmAQUsVSXNgMbB9r732
CltvvbXL5EiSVIJBS2VZuHBhnAOrT58+Yd99940LPTPQ3WVyJEkqzaClNqU5sDbeeONwwAEHxPFX
o0ePdpkcSZLKYNBSUWkOrM022ywceOCBcbLRMWPGuEyOJEkVMGipFebA2nbbbeMahAQslss5/PDD
XSZHkqQOMGipZQ6sgQMHxikaCFirrrqqy+RIktRJBq0mlubA6tu3b3yCcKuttmpZJmfJkiW13jxJ
khqeQasJffzxx+HUU0+Nc2Dtv//+cbA7y+ScfvrpYfHixbXePEmSug2DVhN56623wvHHHx/nvTr4
4INjKxatWSyT891339V68yRJ6nYMWk2AObDGjx8fB7YzFxbjsFwmR5Kk/Bm0urHHHnssdg1utNFG
4YgjjogBy2VyJEnqOgatbojZ2nfdddew+eabhwkTJsSuQpfJkSSp6xm0upGbb745bLfddmH48OFh
4sSJsfWKwOUyOZIk1YZBqxu48sorY7fgHnvsEQPWgAEDwj777OMyOZIk1ZhBq0F9++238WnBfv36
xekZxo0bF7beeuv4NOFzzz1X682TJEnNFLR++eWXuE4fk3Q2sk8//TTOd9W7d+9wyCGHhKOPPjrO
gXXkkUeGO+64o9abJ0mSMpomaM2bNy+stNJK4aKLLqr1pnTIO++8E0444YSw8sorx1B11FFHhVVW
WSUcd9xxTjIqSVKdapqg9cADDzRk0HrxxRfjos59+vQJxx57bPzv1VZbLZxyyilh6dKltd48SZLU
BoNWnXryySfj4s79+/ePLVmMvSJsnXPOOeHLL7+s9eZJkqQyGLTqzP333x9GjRoVBg8eHE466aRw
0EEHxbA1c+bM8OOPP9Z68yRJUgW6RdD69ddfw9133x0n5WQWdJ7AW7ZsWav3ZIMWy84wronB47wY
YF4MA+j5vWOOOSZ+Nn+++eabf3rP7Nmzw2233RY/l9cnn3wSf+++++4ru/WJ3+ffGDZsWOwW3HPP
PcOgQYPi1A2SJKkxNXzQ+vrrr+PiyISonj17xu41/ptZ0T///POW96WgNWPGjDjWif9OL1qPPvro
o1afy/8z+Wf2fbx69OgRw09aI5CQRrjbZZddwgsvvBCDUvb9BKi2XHPNNXFS0d122y1Mnz49zoe1
1VZbxfAmSZIaW0MHLcLOlClTYqA5+eSTww8//BBftAYVhpwUtAhiDCY/++yz42LLI0aMiD+nyy7h
M5jwk58z+Hz58uXx37rnnntimONnCYGMrj0+k78jaD3zzDPh6quvLtlV+dNPP4VLLrkkbLzxxnEt
whNPPDHO4r7jjjuGuXPndsGekyRJXaGhg9brr78e1lprrRhuCEMJ3YGEnmx4SkGLFim6GRPCU2Eg
WrBgQVh11VVjKxUTgyYvvfRSWH311cMZZ5zxp5/xGZMmTYpdieH3BZ2ZiuHaa69ttc0MZifsjR8/
PkybNi12DxIMH3zwwRz2kCRJqqWGDlqEGAJOYZgpJgUtQg0tVkkKStmgdf755xft9is2F9eiRYtC
r169YssY3ZgJ48YIf/xZ+Bm0wvXt2zeMGTMmPP300x3+/pIkqb41dNCaPHlyDD6EqPakoEWIyioW
tOgapEWMmeSLfUb2veU+zfjxxx+HU089NayxxhpxstFXXnmlgm8qSZIaUUMHLQJRpUGrMBBVErQY
BN/RoAVast57770yv50kSWp0DR20GCtFyLnpppta/ZwuPCb4vO6661p+RjdgW0ErO8A9tZRlp1ZY
smRJGDhwYPw5f5+k7sTsuC1JkqTQ6EErDVpnegUCDwPXWZaG9f8IP1OnTm15LwGrWNBKQSkbtHhq
kM8dMGBAePXVV8O7774bx2AxkJ73jh49umXy0GJBTZIkKTR60GLKhVmzZv1pritezK2VHZyeglbh
APf0dOCECRPa/FyebuQpRsLXkCFDwhdffBHfm6Z3YJqGn3/+uQu/vSRJqncNHbQSWpyYF2vixIlx
qRpmfU8TiiYEI9YPzD5xGH5/OvD555//0+zw/D6zwDNL+7nnnhv/np8xPxahLE37wM/4/ddee60L
vqkkSWok3SJoSZIk1SODliRJUk4MWpIkSTkxaEmSJOXEoCVJkpQTg5YkSVJODFqSJEk5MWhJkiTl
xKAlSZKUE4OWJElSTgxakiRJOTFoSZIk5cSgJUmSlBODliRJUk4MWpIkSTkxaEmSJOXEoCVJkpQT
g5YkSVJODFqSJEk5MWhJkiTlxKAlSZKUE4OWJElSTgxakiRJOTFoSZIk5cSgJUmSlBODVgjhu+++
C/Pnzw9z5swJ9957b1i6dGnR961YsSJ8+umn8fXZZ5+FX375pcu3VZIkNY6mDlq//fZbmDt3blhz
zTXDSiut1Oo1derUliD10UcfhaFDh/7pPb169QpXXnll+PXXX2v9VSRJUh1q6qD16KOPhh49eoR1
1103PPTQQ7Fla/HixWHEiBFh5ZVXDvPmzYvve+mll8Lqq68ef75w4cLYosXfDRs2LAauWbNm1fqr
SJKkOtTUQevGG28Mffr0ieEp69lnnw09e/YMkydPjv+/aNGi2Hp1+OGHt3rf119/HcPXkCFDwhdf
fNGl2y5JkupfUwetUh577LHYopWCFa1XtFwVBi3wM1q7aPWSJEnKMmgVYFzWxIkTW3UJpq7DwqDF
ew844IDQv3//OI5LkiQpy6CVsWzZshicCFkDBw4MS5YsiT8vFrQYzzVjxoz43ilTpsSB9ZIkSVkG
rRDCDz/8EGbOnBnHZRGchg8fHj788MOWv09Bq/CpQ14TJkwI33//fU23X5Ik1aemD1p0+W233XYx
NDHNw+233/6n6RqyTx3eddddcRD9oYceGtZaa634eyNHjoytYZIkSVlNHbS+/fbbMGrUqBiWjj/+
+NgdWEypMVq0hJ199tnx98eNG+cEppIkqZWmDlp33HFHDEljx45tMySVClrh9xYxBsPvsssuMbhJ
kiQlTRu0GLxO9192YtJS2mrRYowWYe2iiy7KeYslSVKjadqgResTrVBrr712WLBgQcsahu+8805c
75CxWE899VRs6UpBa/fdd49PIvLz888/P2y00UYxZI0fP75kt6MkSWpeTRu0CFAHHXRQ0ScJ0yt1
B5Z66nDTTTcNd955p2sdSpKkopo2aGH58uXhgQceiK1XvGjJokUrtW6tWLEivo8gxbI8vIf306rl
eCxJktSepg5akiRJeTJoSZIk5cSgJUmSlBODliRJUk4MWpIkSTkxaEmSJOXEoCVJkpQTg5YkSVJO
DFqSJEk5MWhJkiTlxKAlSZKUE4OWJElSTgxakiRJOTFoSZIk5cSgJUmSlBODliRJUk4MWpIkSTn5
P0uBPC5dd7uqAAAAAElFTkSuQmCC
------=_Part_14_1195019268.1750505967557
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: file:///C:/972dae2638bfb6dd6cc3bc067f459fd28429e69d150dc13133e7121f5fdacc30

iVBORw0KGgoAAAANSUhEUgAAAewAAAD6CAYAAABj0nRSAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAg
AElEQVR4nOzdZ7Q1SV0u8PvJL/cul1/kg9xlZl0vgoDIkJMwMMQBBtQhSJAsURBQEUEkI0pQkoBK
kJwRkCEOOSNBRHIUHMQEJuatu351+znUW9N7n33ek/Y+p561au1zevfurq7uruef63+UgYGBgYGB
gbXH/zjsDgwMDAwMDAxsj0HYA8cWJ06cOKmdf/75K7Xvfve7R6Kter1p/XjNtYGBgf3DIOyBjQNi
aElnEQENIjk8rCIE9ffN3+NeDQwsxiDsgY1CJvedAhH893//d/nP//zP8p3vfKf88z//c/nmN79Z
vvGNb5SvfOUr5Utf+lL5u7/7u/K3f/u3tX384x8vH/3oR8uHP/zh8oEPfKC8733vK+95z3vKu971
rvL2t7+9nHvuubW97W1vK29961vLW97ylvLmN7+5vPGNbyznnHNObW94wxtqe/3rX7/VXve615XX
vva1tf3lX/5lba95zWsu0F71qleVV7/61Vv/t39r+a3mWI6rOcdf/dVf1ebc+qFPb3rTm2of9VWf
XcM73/nO8u53v7u8973vrdfnOl3vX//1X5ePfexj5ROf+EQdi0996lPlM5/5TPnc5z5XvvjFL9bx
+vu///s6dv/4j/9Yx/Jf//Vf67j+13/91yndn/Y+7eb3AwNHGYOwBzYG0b6QLqK6293uVu54xzuW
X/3VXy2/9mu/Vu51r3vVdu9737vc5z73Kb/+679efuM3fqM86EEPKr/3e79XHvawh5VHPOIRtT30
oQ8tD37wg8tv//Zvl9/8zd+s+933vvetv8un5rhty7bs17f8rt3vHve4R+2X//UtLf3V7nnPe261
u9/97uWud71r/XRt/r7LXe5S7nznO5c73elO5Q53uEO5/e1vX37lV36l3O52t6vtNre5Tbn1rW9d
fvmXf7m2W93qVuWWt7xlbbe4xS0u0PKdff3utre9bT2OYzq2cdX87fya8dYnzTXpa8a7b7n+9jqz
f37j03U5x9lnn13+5E/+pBJ+e68HBga+h0HYAxuBTOCf/exny01vetNKsjTF97///VuNZvg3f/M3
5dOf/nT5whe+UL72ta9VLfrf/u3fKskPEtgZ4nqIdSIWin//93+v2rRxpVnTsL/1rW9Vbfu8886r
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
AElFTkSuQmCC
------=_Part_14_1195019268.1750505967557
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: file:///C:/7ee599634e708cfa6be9d82271c77ac6523de91934942817a198ae755227c3d0

iVBORw0KGgoAAAANSUhEUgAAAloAAADaCAYAAAB+dOwbAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAg
AElEQVR4nO2dh5tURdaHv79EEF0UFROKYXUBUTGLLgYMYEJBUVYUUURFUcyyJjCsOSJGXHNAMAcE
w5qzYkBQMYBpre95a6nxTtM90z0zd7p7+n2f5z4DPbfv3FtVt86vTp069X9BRERERHLh/6p9AyIi
IiJdFYWWiIiISE4otERERERyQqElIiIikhMKLREREZGcUGiJiIiI5IRCS0RERCQnFFoiIiIiOaHQ
EhEREckJhZaIiIhITii0RERERHJCoSUiIiKSEwotERERkZxQaImIiIjkhEJLREREJCcUWiIiIiI5
odASERERyQmFloiIiEhOKLREREREckKhJSIiIpITCi0RkVb4/vvvw5w5c8J9990Xnn322fDzzz8X
PW/p0qXhq6++isfXX38dfvvtt06/VxGpLRRaIiIl+OOPP8J1110XevToEVZZZZWmY/311w9PP/10
03mff/55GDRoULNzOHr27Bmuvfba8Pvvv1f1OUSkeii0RERKMG/evLDaaquFIUOGRDGF8HriiSfC
OuusE7beeuuwePHieN6rr74a1lhjjXje/Pnzo0dr9uzZYeedd46C64orrqj2o4hIlVBoiYiUYNq0
adGb9cILL7T4+YIFC6L36uijj252HlOOiK+BAweGJUuWdOq9i0htoNASESkBnqhu3bqFWbNmNfuc
6cCs0MJ7heeqUGgBn+HtwuslIo2HQktEpASfffZZ6NevXxRVl156afjuu+/ClVdeGf8/YcKEpmD3
NHVYKLT4/YgRI0Lfvn3j1KOINB4KLRGRFnj//fdD//79mwW5n3766c1WFBYTWj/99FOYOnVqPH/S
pEkxvktEGg+FlohICRBTeK4QS1tuuWW44IILwoABA+L/R44cGWOwQkZoFa465Bg3blxYtmxZtR+l
S/DKK6+Eyy67LHz77bcr/c7UGlKrKLREugAaoHxIMVoIrFRu/OT/iKg0fZhddUiurVtvvTUceeSR
cXUi5w0dOjQsWrSo2o9T17z++utN5fnII480fW5qjY7DfHH5oNASqXM0QPnAKkFWC+6///5h+fLl
zX7H//m8T58+4eOPPy4Zo8V5559/fiz30aNHa5DaCAIAsYropSxZ9ZkwtUb7MV9cvii0ROoYDVB+
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
pQwia8yYMSWnHTsLgvm33HLL2DYQj2Rx/+STT6p6TyIiUt80jNBiyu+ll16KQlPCODkAAA4USURB
VCCJLjwphTRKYs2OAAF12GGHFV1JmI40HVhq1SHC5t57763alCziDk9anz59ogeLezznnHNiXJ6I
iEh7aRihlSUZ/WJTVV05sWYefPPNNzGWCe8VB54sPFrJu8WigrBC6LItD+dwPl6tasZjscIRQUXs
FWka8MrhYaulGDEREal/FFolfteVEmvKn7DS9KSTTop1ufnmm8epy6uuuspFDiIikgsKrRK/6wqJ
NeVPXnnllTB27NgYf4fA2mqrrcLNN99c7dsSEZEuTkMKrbThcUtCq54Ta8qfkO+KKV+mBvFekViV
VYUiIiKdQUMKLWKESqUTqOfEmvInN954YxTFBLinHF3Ej4mIiHQmCq0C6jGxpvzJ7bffHnOeMT2I
F3L48OHhiSeeqPZtiYhIg9KQQovVb2x+XKlHq9YSa8qfXHfddaFfv37xYJpw5MiR4fnnn6/2bYmI
SIPTEEKLab4ZM2bEDN8cxOwQo0XsVUpL8NRTT9VNYk35Hz/88EO45JJLwoYbbhg22GCDmKqBgHc2
fxYREakFGkJokdV91113bTGxJglMSWRaq4k15U++/PLLcNZZZ8V62mabbcKqq64avY3Un4iISC3R
EEIrgceKjN8pmWb2qNXEmvIn7733XjjxxBND9+7d48bfCKzJkyeHhQsXVvvWREREitJQQkvqEzb3
HjZsWFhrrbWiwOLneeed556TIiJS8yi0pGYh39khhxwSY7CIkWM/wksvvdSksSIiUjcotKTmIN/V
XnvtFTbbbLOw7bbbxvi4q6++utq3JSIiUjEKLakZZs6cGTO39+/fPwwcODCKrFtuuaXatyUiItJm
FFpSda655pooroi/GjBgQFwhevfdd1f7tkRERNqNQkuqAjmwLrroohh3hRdriy22CLvvvrvb5IiI
SJdCoSWdCtsYsYURObDwXG2yySbhgAMOCHPmzKn2rYmIiHQ4Ci3pFN55552YA4vcV+xFSCb3UaNG
xZxlIiIiXRWFluTKyy+/HI466qi4wfOQIUNiDiy3yRERkUZBoSW5MHfu3HDwwQeHjTfeOE4Vson3
hAkTYnZ3ERGRRkGhJR3KAw88EIUVqwjJhYXAcpscERFpVBRa0iHcdtttYYcddogpGhBaTBGee+65
bpMjIiINjUJL2swff/wRc2ANHjw4riAkBmuPPfYIl1xyidvkiIiIKLSkLaQcWOxBiLDaZpttmrbJ
QXyJiIjI/1BoSdmQA2vKlCkxB9bQoUPDLrvs4jY5IiIiLaDQklZJObAIbB82bFjYfvvt3SZHRESk
DBRaUpL58+fHHFi9e/cOBx10UNzomUB3t8kREREpD4WWrETKgbXZZpuFESNGxPir4cOHu02OiIhI
hSi0pImUA2urrbYKhx56aEw2OnLkSLfJERERaSMKLYk5sHbccce4ByECi+1yjj76aLfJERERaScK
rQYl5cDq169fTNGAwFpttdXcJkdERKQDUWg1GCkHVp8+feIKwu22265pm5zPPvus2rcnIiLSpVBo
NQhffPFFOPPMM2MOrEMOOSQGu7NNztlnnx3ef//9at+eiIhIl0Sh1cV59913w8SJE2Peq8MPPzx6
sfBmsU3OTz/9VO3bExER6dIotLoo5MAaM2ZMDGwnFxZxWG6TIyIi0rkotLoYTz75ZJwa3HTTTcPY
sWOjwHKbHBERkeqg0OoikK19r732CltvvXUYN25cnCp0mxwREZHqotCqc26//faw0047hcGDB4fx
48dH7xWCy21yREREqo9Cq0659tpr47TgfvvtFwXWFltsEQ488EC3yREREakhFFp1xI8//hhXC260
0UYxPcPo0aPD9ttvH1cTvvjii9W+PRERESmgSwut3377Le7TR5LOeuarr76K+a569eoVjjjiiHDc
ccfFHFjHHHNMuOeee6p9eyIiIlKCLi20Zs+eHVZZZZUwbdq0at9Km/jggw/CSSedFLp16xZF1bHH
HhtWXXXVcOKJJ5pkVEREpA7o0kLrkUceqUuh9corr8RNnXv37h1OOOGE+O/VV189nHHGGWHhwoXV
vj0REREpE4VWDfHMM8/EzZ379u0bPVnEXiG2LrjggvDtt99W+/ZERESkQhRaNcDDDz8c9t133zBg
wIBw6qmnhsMOOyyKrenTp4eff/652rcnIiIibaRuhdbvv/8e7r///piUkyzorMBbtGhRs3OyQott
Z4hrInicgwDzYhBAz/eOP/74eG1+vvPOOyudM2PGjHDXXXfF63J8+eWX8XsPPfRQ2d4nvs/f2Hnn
neO04P777x/69+8fUzeIiIhI/VOXQuv777+PmyMjonr06BGn1/g3WdEXL17cdF4SWlOnTo2xTvw7
HXiPPv/882bX5f8k/8yex9G9e/coftIegYg0xN2ee+4ZXn755SiUsucjoFrihhtuiElF99577zBl
ypSYD2u77baL4k1ERES6DnUntBA7kyZNioLmtNNOC8uXL48H3qBCkZOEFkKMYPLzzz8/brY8ZMiQ
+DlTdgmuQcJPPif4/Jtvvol/64EHHohijs8SCDKm9rgmv0NoPf/88+H6668vOVX5yy+/hMsvvzxs
ttlmcS/CU045JWZx32233cKsWbM6oeRERESks6k7ofXWW2+FddZZJ4obxFCC6UBET1Y8JaGFR4pp
xgTiqVAQzZs3L6y22mrRS0Vi0MSrr74a1lhjjXDOOees9BnXmDBhQpxKDCs2dCYVw4033tjsnglm
R+yNGTMmnH766XF6EGH46KOP5lBCIiIiUivUndBCxCBwCsVMMZLQQtTgsUokoZQVWhdffHHRab9i
ubgWLFgQevbsGT1jTGMmiBtD/PGz8Bp44fr06RNGjhwZnnvuuTY/v4iIiNQPdSe0Tj755Ch8EFGt
kYQWIipLMaHF1CAeMTLJF7tG9txyVzN+8cUX4cwzzwxrrrlmTDb6+uuvV/CkIiIiUu/UndBCEFUq
tAoFUSVCiyD4tgotwJP10Ucflfl0IiIi0pWoO6FFrBQi57bbbmv2OVN4JPi86aabmj5jGrAloZUN
cE+esmxqhc8++yz069cvfs7vE2k6MRu3JSIiIlJI3QmtFLROegUED4HrbEvD/n+In8mTJzedi8Aq
JrSSUMoKLVYNct0tttgivPHGG+HDDz+MMVgE0nPu8OHDm5KHFhNqIiIiIoXUndAi5cIVV1yxUq4r
DnJrZYPTk9AqDHBPqwPHjRvX4nVZ3cgqRsTXwIEDw5IlS+K5Kb0DaRp+/fXXTnx6ERERqSfqTmgl
8DiRF2v8+PFxqxqyvqeEogmEEfsHZlcchhWrA1966aWVssPzfbLAk6X9wgsvjL/nM/JjIcpS2gc+
4/tvvvlmJzypiIiI1Ct1K7REREREah2FloiIiEhOKLREREREckKhJSIiIpITCi0RERGRnFBoiYiI
iOSEQktEREQkJxRaIiIiIjmh0BIRERHJCYWWiIiISE4otERERERyQqElIiIikhMKLREREZGcUGiJ
iIiI5IRCS0RERCQnFFoiIiIiOaHQEhEREckJhZaIiIhITii0RERERHJCoSUiIiKSEwotERERkZxQ
aImIiIjkhEJLREREJCcUWiIiIiI5odASERERyYmGFVo//fRTmDNnTpg5c2Z48MEHw8KFC4uet3Tp
0vDVV1/F4+uvvw6//fZbp9+riIiI1CcNJ7T++OOPMGvWrLDWWmuFVVZZpdkxefLkJiH1+eefh0GD
Bq10Ts+ePcO1114bfv/992o/ioiIiNQ4DSe05s6dG7p37x7WX3/98Nhjj0XP1vvvvx+GDBkSunXr
FmbPnh3Pe/XVV8Maa6wRP58/f370aPG7nXfeOQquK664otqPIiIiIjVOwwmtW2+9NfTu3TuKpywv
vPBC6NGjRzj55JPj/xcsWBC9V0cffXSz877//vsovgYOHBiWLFnSqfcuIiIi9UXDCa1SPPnkk9Gj
lYQV3is8V4VCC/gMbxdeLxEREZFSKLRCiHFZ48ePbzYlmKYOC4UW544YMSL07ds3xnGJiIiIlKLh
hdaiRYuicEJk9evXL3z22Wfx82JCi3iuqVOnxnMnTZoUA+tFREREStGwQmv58uVh+vTpMS4L4TR4
8ODw6aefNv0+Ca3CVYcc48aNC8uWLavq/YuIiEjt05BCiym/nXbaKYom0jzcfffdK6VryK46vO++
+2IQ/ZFHHhnWWWed+L2hQ4dGb5iIiIhIKRpOaP34449h3333jWJp4sSJcTqwGKVitPCEnX/++fH7
o0ePNoGpiIiIlKThhNY999wTRdKoUaNaFEmlhFZY4REjGH7PPfeMwk1ERESkGA0ltAheZ/ovm5i0
FC15tIjRQqxNmzYt5zsWERGReqahhBbeJ7xQ6667bpg3b17THoYffPBB3O+QWKxnn302erqS0Npn
n33iSkQ+v/jii8Omm24aRdaYMWNKTjuKiIiIhEYTWgioww47rOhKwnSk6cBSqw633HLLcO+997rX
oYiIiLRKQwkt+Oabb8IjjzwSvVcceLLwaCXv1tKlS+N5CCm25eEczserZTyWiIiIVELDCS0RERGR
zkKhJSIiIpITCi0RERGRnFBoiYiIiOSEQktEREQkJxRaIiIiIjmh0BIRERHJCYWWiIiISE4otERE
RERyQqElIiIikhMKLREREZGcUGiJiIiI5IRCS0RERCQnFFoiIiIiOaHQEhEREckJhZaIiIhITii0
RERERHJCoSUiIiKSEwotERERkZxQaImIiIjkhEJLREREJCcUWiIiIiI5odASERERyQmFloiIiEhO
KLREREREcuL/AVGQoihGd7/zAAAAAElFTkSuQmCC
------=_Part_14_1195019268.1750505967557--
